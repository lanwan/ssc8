   1               		.file	"ssc_main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 102               		.section	.progmem.data,"a",@progbits
 105               	RTL_M_ID:
 106 0000 0D0A 2A56 		.string	"\r\n*VER:SSC8.V2\r\n"
 106      4552 3A53 
 106      5343 382E 
 106      5632 0D0A 
 106      00
 109               	RTL_M_CMDREADY:
 110 0011 0D0A 2A43 		.string	"\r\n*CSTU\r\n"
 110      5354 550D 
 110      0A00 
 111               		.data
 114               	g_svr_gpios:
 115 0000 00        		.byte	0
 116 0001 01        		.byte	1
 117 0002 02        		.byte	2
 118 0003 03        		.byte	3
 119 0004 04        		.byte	4
 120 0005 05        		.byte	5
 121 0006 06        		.byte	6
 122 0007 07        		.byte	7
 124               		.lcomm g_active_svr_idx,2
 127               	g_runtime_svrs:
 128 0008 DC05      		.word	1500
 129 000a FFFF      		.word	-1
 130 000c DC05      		.word	1500
 131 000e 0000      		.word	0
 132 0010 DC05      		.word	1500
 133 0012 FFFF      		.word	-1
 134 0014 DC05      		.word	1500
 135 0016 0000      		.word	0
 136 0018 DC05      		.word	1500
 137 001a FFFF      		.word	-1
 138 001c DC05      		.word	1500
 139 001e 0000      		.word	0
 140 0020 DC05      		.word	1500
 141 0022 FFFF      		.word	-1
 142 0024 DC05      		.word	1500
 143 0026 0000      		.word	0
 144 0028 DC05      		.word	1500
 145 002a FFFF      		.word	-1
 146 002c DC05      		.word	1500
 147 002e 0000      		.word	0
 148 0030 DC05      		.word	1500
 149 0032 FFFF      		.word	-1
 150 0034 DC05      		.word	1500
 151 0036 0000      		.word	0
 152 0038 DC05      		.word	1500
 153 003a FFFF      		.word	-1
 154 003c DC05      		.word	1500
 155 003e 0000      		.word	0
 156 0040 DC05      		.word	1500
 157 0042 FFFF      		.word	-1
 158 0044 DC05      		.word	1500
 159 0046 0000      		.word	0
 160               		.lcomm g_startup_run_pg,1
 161               		.lcomm g_eprom_address,2
 170               	.LC0:
 171 0048 4154 2A53 		.string	"AT*SMVR"
 171      4D56 5200 
 172               	.LC1:
 173 0050 4154 2A53 		.string	"AT*SMV"
 173      4D56 00
 174               	.LC2:
 175 0057 4154 2A56 		.string	"AT*VER"
 175      4552 00
 176               	.LC3:
 177 005e 4154 2A52 		.string	"AT*RESET"
 177      4553 4554 
 177      00
 178               	.LC4:
 179 0067 4154 2A53 		.string	"AT*SBR"
 179      4252 00
 180               	.LC5:
 181 006e 4154 2A43 		.string	"AT*CYWT"
 181      5957 5400 
 182               	.LC6:
 183 0076 4154 2A43 		.string	"AT*CYRD"
 183      5952 4400 
 186               	g_cmmd_handles:
 187 007e 0000      		.word	.LC0
 188 0080 0000      		.word	gs(rt_smvr)
 189 0082 0000      		.word	.LC1
 190 0084 0000      		.word	gs(rt_smv)
 191 0086 0000      		.word	.LC2
 192 0088 0000      		.word	gs(rt_ver)
 193 008a 0000      		.word	.LC3
 194 008c 0000      		.word	gs(rt_reset)
 195 008e 0000      		.word	.LC4
 196 0090 0000      		.word	gs(rt_sbr)
 197 0092 0000      		.word	.LC5
 198 0094 0000      		.word	gs(rt_cywt)
 199 0096 0000      		.word	.LC6
 200 0098 0000      		.word	gs(rt_cyrd)
 201               	.LC7:
 202 009a 0D0A 534D 		.string	"\r\nSMVR:%d,%d,%d,%d,%d\r\n"
 202      5652 3A25 
 202      642C 2564 
 202      2C25 642C 
 202      2564 2C25 
 203               		.text
 206               	rt_smvr:
   1:ssc_main.c    **** /*
   2:ssc_main.c    ****  *  ssc_main.c
   3:ssc_main.c    ****  *
   4:ssc_main.c    ****  *  Created on: 2009-6-10
   5:ssc_main.c    ****  *
   6:ssc_main.c    ****  *  Copyright (c) 2009 LDRobot.com
   7:ssc_main.c    ****  *
   8:ssc_main.c    ****  *  Author: Steven Wang
   9:ssc_main.c    ****  *
  10:ssc_main.c    ****  *	F(clk) = 8MHz
  11:ssc_main.c    ****  *	TIMER0 256 иокх, T=2.5ms
  12:ssc_main.c    ****  *	TIMER1 8иокх, Offset=-17us, hold 500us, you may set 500-17us
  13:ssc_main.c    ****  *
  14:ssc_main.c    ****  *	Support AT commands:
  15:ssc_main.c    ****  *
  16:ssc_main.c    ****  *	AT*SMV		AT*SMV=P0,1500,30,P1,1300,20
  17:ssc_main.c    ****  *	AT*VER      tell version
  18:ssc_main.c    ****  *	AT*RESET    reset
  19:ssc_main.c    ****  *	AT*SBR      set baud rate
  20:ssc_main.c    ****  *	AT*RADV     read ADC value
  21:ssc_main.c    ****  *	AT*EER		read e2prom
  22:ssc_main.c    ****  *	AT*EEW		write e2prom
  23:ssc_main.c    ****  */
  24:ssc_main.c    **** 
  25:ssc_main.c    **** #include <stdio.h>
  26:ssc_main.c    **** #include <stdlib.h>
  27:ssc_main.c    **** #include <stdint.h>
  28:ssc_main.c    **** #include <string.h>
  29:ssc_main.c    **** 
  30:ssc_main.c    **** # define F_CPU 8000000UL
  31:ssc_main.c    **** 
  32:ssc_main.c    **** #include <avr/io.h>
  33:ssc_main.c    **** #include <avr/interrupt.h>
  34:ssc_main.c    **** #include <avr/pgmspace.h>
  35:ssc_main.c    **** #include <avr/wdt.h>
  36:ssc_main.c    **** #include <avr/eeprom.h>
  37:ssc_main.c    **** #include <util/delay.h>
  38:ssc_main.c    **** 
  39:ssc_main.c    **** #include "avr_modules.h"
  40:ssc_main.c    **** 
  41:ssc_main.c    **** /**
  42:ssc_main.c    ****  * Definition Board IO
  43:ssc_main.c    ****  */
  44:ssc_main.c    **** 
  45:ssc_main.c    **** // control pins
  46:ssc_main.c    **** #define SVR1    PC0
  47:ssc_main.c    **** #define SVR2    PC1
  48:ssc_main.c    **** #define SVR3    PC2
  49:ssc_main.c    **** #define SVR4    PC3
  50:ssc_main.c    **** #define SVR5    PD4
  51:ssc_main.c    **** #define SVR6    PD5
  52:ssc_main.c    **** #define SVR7    PD6
  53:ssc_main.c    **** #define SVR8    PD7
  54:ssc_main.c    **** 
  55:ssc_main.c    **** /*
  56:ssc_main.c    ****  * global definition
  57:ssc_main.c    ****  */
  58:ssc_main.c    **** 
  59:ssc_main.c    **** #define DEBUG	1
  60:ssc_main.c    **** #define TRUE    1
  61:ssc_main.c    **** #define FALSE   0
  62:ssc_main.c    **** 
  63:ssc_main.c    **** /*
  64:ssc_main.c    ****  * AT MODULE definition
  65:ssc_main.c    ****  */
  66:ssc_main.c    **** 
  67:ssc_main.c    **** // AT module ID&P&V
  68:ssc_main.c    **** static const char RTL_M_ID[] PROGMEM = "\r\n*VER:SSC8.V2\r\n";
  69:ssc_main.c    **** static const char RTL_M_CMDREADY[] PROGMEM = "\r\n*CSTU\r\n";
  70:ssc_main.c    **** 
  71:ssc_main.c    **** // Adjust code time
  72:ssc_main.c    **** #define ADJUST_CODE_TIME_US 	17
  73:ssc_main.c    **** #define MIN_POSITION        	450
  74:ssc_main.c    **** #define MAX_POSITION        	2400
  75:ssc_main.c    **** #define UNUSED					0
  76:ssc_main.c    **** 
  77:ssc_main.c    **** static const uint8_t g_svr_gpios[8] =
  78:ssc_main.c    **** { SVR1, SVR2, SVR3, SVR4, SVR5, SVR6, SVR7, SVR8 };
  79:ssc_main.c    **** 
  80:ssc_main.c    **** struct SVR_PRO
  81:ssc_main.c    **** {
  82:ssc_main.c    **** 	int16_t position_us; // position us
  83:ssc_main.c    **** 	int16_t hold_time_count; // hold time, -1 means hold all time, it's n*2.5ms
  84:ssc_main.c    **** 	int16_t save_position_us; // save position
  85:ssc_main.c    **** 	int16_t speed; // speed per 2.5ms
  86:ssc_main.c    **** };
  87:ssc_main.c    **** 
  88:ssc_main.c    **** static /*volatile*/int g_active_svr_idx = 0;
  89:ssc_main.c    **** static struct SVR_PRO g_runtime_svrs[8] =
  90:ssc_main.c    **** {
  91:ssc_main.c    **** { 1500, -1, 1500, 0 },
  92:ssc_main.c    **** { 1500, -1, 1500, 0 },
  93:ssc_main.c    **** { 1500, -1, 1500, 0 },
  94:ssc_main.c    **** { 1500, -1, 1500, 0 },
  95:ssc_main.c    **** { 1500, -1, 1500, 0 },
  96:ssc_main.c    **** { 1500, -1, 1500, 0 },
  97:ssc_main.c    **** { 1500, -1, 1500, 0 },
  98:ssc_main.c    **** { 1500, -1, 1500, 0 } };
  99:ssc_main.c    **** 
 100:ssc_main.c    **** /**
 101:ssc_main.c    ****  * E2PROM variants
 102:ssc_main.c    ****  */
 103:ssc_main.c    **** 
 104:ssc_main.c    **** unsigned char g_eprom_baud_ubrr __attribute__((section(".eeprom")));
 105:ssc_main.c    **** unsigned char g_eprom_auto_run __attribute__((section(".eeprom")));
 106:ssc_main.c    **** 
 107:ssc_main.c    **** static int8_t g_startup_run_pg = FALSE;
 108:ssc_main.c    **** static uint16_t g_eprom_address = 0;
 109:ssc_main.c    **** enum LD_BASIC_CMMD_TYPE
 110:ssc_main.c    **** {
 111:ssc_main.c    **** 	LDB_CMMD_MOOV = 0,
 112:ssc_main.c    **** 	LDB_CMMD_SLEEP,
 113:ssc_main.c    **** 	LDB_CMMD_JUMP,
 114:ssc_main.c    **** 	LDB_CMMD_IF_JUMP,
 115:ssc_main.c    **** 	LDB_CMMD_END,
 116:ssc_main.c    **** };
 117:ssc_main.c    **** 
 118:ssc_main.c    **** struct LD_BASIC_CMMD_MOOV
 119:ssc_main.c    **** {
 120:ssc_main.c    **** 	uint8_t pin;
 121:ssc_main.c    **** 	int16_t postion;
 122:ssc_main.c    **** 	int16_t speed;
 123:ssc_main.c    **** };
 124:ssc_main.c    **** 
 125:ssc_main.c    **** struct LD_BASIC_CMMD_SLEEP
 126:ssc_main.c    **** {
 127:ssc_main.c    **** 	uint16_t sleep_ms;
 128:ssc_main.c    **** };
 129:ssc_main.c    **** 
 130:ssc_main.c    **** struct LD_BASIC_CMMD_JUMP
 131:ssc_main.c    **** {
 132:ssc_main.c    **** 	uint16_t address;
 133:ssc_main.c    **** };
 134:ssc_main.c    **** 
 135:ssc_main.c    **** struct LD_BASIC_CMMD_IF_JUMP
 136:ssc_main.c    **** {
 137:ssc_main.c    **** 	void* void_variant;
 138:ssc_main.c    **** 	uint16_t true_address;
 139:ssc_main.c    **** 	uint16_t false_address;
 140:ssc_main.c    **** };
 141:ssc_main.c    **** 
 142:ssc_main.c    **** /*static uint8_t
 143:ssc_main.c    **** 		LD_BAISIC_CMMD_LENS[] =
 144:ssc_main.c    **** 		{ sizeof(struct LD_BASIC_CMMD_MOOV),
 145:ssc_main.c    **** 				sizeof(struct LD_BASIC_CMMD_SLEEP),
 146:ssc_main.c    **** 				sizeof(struct LD_BASIC_CMMD_JUMP),
 147:ssc_main.c    **** 				sizeof(struct LD_BASIC_CMMD_IF_JUMP) };
 148:ssc_main.c    **** */
 149:ssc_main.c    **** union LD_BASIC_CMMD
 150:ssc_main.c    **** {
 151:ssc_main.c    **** 	struct LD_BASIC_CMMD_MOOV cmmd_moov;
 152:ssc_main.c    **** 	struct LD_BASIC_CMMD_SLEEP cmmd_sleep;
 153:ssc_main.c    **** 	struct LD_BASIC_CMMD_JUMP cmmd_jump;
 154:ssc_main.c    **** 	struct LD_BASIC_CMMD_IF_JUMP cmmd_if_jump;
 155:ssc_main.c    **** };
 156:ssc_main.c    **** 
 157:ssc_main.c    **** /**
 158:ssc_main.c    ****  * AT-COMMAND support functions and definition
 159:ssc_main.c    ****  */
 160:ssc_main.c    **** 
 161:ssc_main.c    **** #define MAX_COMMAND_PARAMS_COUNT 	20
 162:ssc_main.c    **** struct RTCMMD_HANDLES
 163:ssc_main.c    **** {
 164:ssc_main.c    **** 	const char* cmmd;
 165:ssc_main.c    **** 	int8_t
 166:ssc_main.c    **** 	(*cmmd_handle)(void);
 167:ssc_main.c    **** };
 168:ssc_main.c    **** 
 169:ssc_main.c    **** struct RTCMMD
 170:ssc_main.c    **** {
 171:ssc_main.c    **** 	char* cmmd;
 172:ssc_main.c    **** 	int8_t param_count;
 173:ssc_main.c    **** 	char* params[MAX_COMMAND_PARAMS_COUNT];
 174:ssc_main.c    **** };
 175:ssc_main.c    **** 
 176:ssc_main.c    **** static struct RTCMMD g_user_rtcmmd;
 177:ssc_main.c    **** 
 178:ssc_main.c    **** static int8_t
 179:ssc_main.c    **** rt_ver(void); // show version
 180:ssc_main.c    **** static int8_t
 181:ssc_main.c    **** rt_reset(void); // reset
 182:ssc_main.c    **** static int8_t
 183:ssc_main.c    **** rt_sbr(void); // set UART baud rate
 184:ssc_main.c    **** 
 185:ssc_main.c    **** static int8_t
 186:ssc_main.c    **** rt_smvr(void); // read move arm postion
 187:ssc_main.c    **** static int8_t
 188:ssc_main.c    **** rt_smv(void); // move arm
 189:ssc_main.c    **** static int8_t
 190:ssc_main.c    **** rt_radv(void); // Read AD value
 191:ssc_main.c    **** /*
 192:ssc_main.c    **** int8_t
 193:ssc_main.c    **** rt_eew(void); // write command to eeprom
 194:ssc_main.c    **** int8_t
 195:ssc_main.c    **** rt_eer(void); // clear eeprom
 196:ssc_main.c    **** int8_t
 197:ssc_main.c    **** rt_run(void); // run eeprom
 198:ssc_main.c    **** */
 199:ssc_main.c    **** static int8_t
 200:ssc_main.c    **** rt_cywt(void); // write byte to cy22393
 201:ssc_main.c    **** static int8_t
 202:ssc_main.c    **** rt_cyrd(void); // read byte from cy22393
 203:ssc_main.c    **** 
 204:ssc_main.c    **** //static int8_t
 205:ssc_main.c    **** //run_user_programm(void);
 206:ssc_main.c    **** 
 207:ssc_main.c    **** static struct RTCMMD_HANDLES g_cmmd_handles[] =
 208:ssc_main.c    **** {
 209:ssc_main.c    **** { "AT*SMVR", &rt_smvr },
 210:ssc_main.c    **** { "AT*SMV", &rt_smv },
 211:ssc_main.c    **** { "AT*VER", &rt_ver },
 212:ssc_main.c    **** { "AT*RESET", &rt_reset },
 213:ssc_main.c    **** { "AT*SBR", &rt_sbr },
 214:ssc_main.c    **** //{ "AT*RADV", &rt_radv },
 215:ssc_main.c    **** //{ "AT*EEW", &rt_eew },H:\i-Robot\projects\com.ssc\src\default
 216:ssc_main.c    **** //{ "AT*EER", &rt_eer },
 217:ssc_main.c    **** //{ "AT*RUN", &rt_run },
 218:ssc_main.c    **** { "AT*CYWT", &rt_cywt },
 219:ssc_main.c    **** { "AT*CYRD", &rt_cyrd }, };
 220:ssc_main.c    **** 
 221:ssc_main.c    **** int8_t rt_smvr(void)
 222:ssc_main.c    **** {
 207               	 function */
 208               	/* frame size = 2 */
 210 0000 DF93      	.LM1:
 211 0002 CF93      		std Y+2,__zero_reg__
 212 0004 00D0      		std Y+1,__zero_reg__
 213 0006 CDB7      		rjmp .L2
 214 0008 DEB7      	.L3:
 216               	.LM2:
 223:ssc_main.c    **** 	// check parameters
 224:ssc_main.c    **** 	int i;
 225:ssc_main.c    **** 	for (i = 0; i < 8; ++i)
 217               	+1
 218               		ldd r25,Y+2
 219 000a 1A82      		lsl r24
 220 000c 1982      		rol r25
 221 000e 00C0      		lsl r24
 222               		rol r25
 226:ssc_main.c    **** 	{
 227:ssc_main.c    **** 		printf("\r\nSMVR:%d,%d,%d,%d,%d\r\n", i,
 223               	24
 224               		rol r25
 225 0010 8981      		movw r30,r24
 226 0012 9A81      		subi r30,lo8(-(g_runtime_svrs+4))
 227 0014 880F      		sbci r31,hi8(-(g_runtime_svrs+4))
 228 0016 991F      		ld r20,Z
 229 0018 880F      		ldd r21,Z+1
 230 001a 991F      		ldd r24,Y+1
 231 001c 880F      		ldd r25,Y+2
 232 001e 991F      		lsl r24
 233 0020 FC01      		rol r25
 234 0022 E050      		lsl r24
 235 0024 F040      		rol r25
 236 0026 4081      		lsl r24
 237 0028 5181      		rol r25
 238 002a 8981      		movw r30,r24
 239 002c 9A81      		subi r30,lo8(-(g_runtime_svrs))
 240 002e 880F      		sbci r31,hi8(-(g_runtime_svrs))
 241 0030 991F      		ld r22,Z
 242 0032 880F      		ldd r23,Z+1
 243 0034 991F      		ldd r24,Y+1
 244 0036 880F      		ldd r25,Y+2
 245 0038 991F      		lsl r24
 246 003a FC01      		rol r25
 247 003c E050      		lsl r24
 248 003e F040      		rol r25
 249 0040 6081      		lsl r24
 250 0042 7181      		rol r25
 251 0044 8981      		movw r30,r24
 252 0046 9A81      		subi r30,lo8(-(g_runtime_svrs+2))
 253 0048 880F      		sbci r31,hi8(-(g_runtime_svrs+2))
 254 004a 991F      		ld r26,Z
 255 004c 880F      		ldd r27,Z+1
 256 004e 991F      		ldd r24,Y+1
 257 0050 880F      		ldd r25,Y+2
 258 0052 991F      		lsl r24
 259 0054 FC01      		rol r25
 260 0056 E050      		lsl r24
 261 0058 F040      		rol r25
 262 005a A081      		lsl r24
 263 005c B181      		rol r25
 264 005e 8981      		movw r30,r24
 265 0060 9A81      		subi r30,lo8(-(g_runtime_svrs+6))
 266 0062 880F      		sbci r31,hi8(-(g_runtime_svrs+6))
 267 0064 991F      		ld r18,Z
 268 0066 880F      		ldd r19,Z+1
 269 0068 991F      		in r24,__SP_L__
 270 006a 880F      		in r25,__SP_H__
 271 006c 991F      		sbiw r24,12
 272 006e FC01      		in __tmp_reg__,__SREG__
 273 0070 E050      		cli
 274 0072 F040      		out __SP_H__,r25
 275 0074 2081      		out __SREG__,__tmp_reg__
 276 0076 3181      		out __SP_L__,r24
 277 0078 8DB7      		in r30,__SP_L__
 278 007a 9EB7      		in r31,__SP_H__
 279 007c 0C97      		adiw r30,1
 280 007e 0FB6      		ldi r24,lo8(.LC7)
 281 0080 F894      		ldi r25,hi8(.LC7)
 282 0082 9EBF      		std Z+1,r25
 283 0084 0FBE      		st Z,r24
 284 0086 8DBF      		ldd r24,Y+1
 285 0088 EDB7      		ldd r25,Y+2
 286 008a FEB7      		std Z+3,r25
 287 008c 3196      		std Z+2,r24
 288 008e 80E0      		std Z+5,r21
 289 0090 90E0      		std Z+4,r20
 290 0092 9183      		std Z+7,r23
 291 0094 8083      		std Z+6,r22
 292 0096 8981      		std Z+9,r27
 293 0098 9A81      		std Z+8,r26
 294 009a 9383      		std Z+11,r19
 295 009c 8283      		std Z+10,r18
 296 009e 5583      		rcall printf
 297 00a0 4483      		in r24,__SP_L__
 298 00a2 7783      		in r25,__SP_H__
 299 00a4 6683      		adiw r24,12
 300 00a6 B187      		in __tmp_reg__,__SREG__
 301 00a8 A087      		cli
 302 00aa 3387      		out __SP_H__,r25
 303 00ac 2287      		out __SREG__,__tmp_reg__
 304 00ae 00D0      		out __SP_L__,r24
 306 00b2 9EB7      	.LM3:
 307 00b4 0C96      		ldd r24,Y+1
 308 00b6 0FB6      		ldd r25,Y+2
 309 00b8 F894      		adiw r24,1
 310 00ba 9EBF      		std Y+2,r25
 311 00bc 0FBE      		std Y+1,r24
 312 00be 8DBF      	.L2:
 313               		ldd r24,Y+1
 314               		ldd r25,Y+2
 315 00c0 8981      		cpi r24,8
 316 00c2 9A81      		cpc r25,__zero_reg__
 317 00c4 0196      		brge .+2
 318 00c6 9A83      		rjmp .L3
 320               	.LM4:
 321 00ca 8981      		ldi r24,lo8(1)
 322 00cc 9A81      	/* epilogue start */
 324 00d0 9105      	.LM5:
 325 00d2 04F4      		pop __tmp_reg__
 326 00d4 00C0      		pop __tmp_reg__
 228:ssc_main.c    **** 				g_runtime_svrs[i].save_position_us,
 229:ssc_main.c    **** 				g_runtime_svrs[i].position_us,
 230:ssc_main.c    **** 				g_runtime_svrs[i].hold_time_count, g_runtime_svrs[i].speed);
 231:ssc_main.c    **** 	}
 232:ssc_main.c    **** 
 233:ssc_main.c    **** 	return TRUE;
 327               	B1
 329 00d6 81E0      	.Lscope1:
 330               		.data
 234:ssc_main.c    **** }
 331               	:
 332               		.string	"P%d"
 333 00d8 0F90      		.text
 336 00de DF91      	rt_smv:
 338               	.LM6:
 339               	.LFBB2:
 340               		push r16
 341               		push r17
 342               		push r29
 343               		push r28
 344               		in r28,__SP_L__
 345 00b2 5025 6400 		in r29,__SP_H__
 346               		subi r28,lo8(-(-69))
 347               		sbci r29,hi8(-(-69))
 348               		in __tmp_reg__,__SREG__
 349               		cli
 235:ssc_main.c    **** 
 236:ssc_main.c    **** int8_t rt_smv(void)
 237:ssc_main.c    **** {
 350               	out __SREG__,__tmp_reg__
 351               		out __SP_L__,r28
 352               	/* prologue: function */
 353 00e2 0F93      	/* frame size = 69 */
 355 00e6 DF93      	.LM7:
 356 00e8 CF93      		lds r24,g_user_rtcmmd+2
 357 00ea CDB7      		cp __zero_reg__,r24
 358 00ec DEB7      		brlt .L6
 360 00f0 D040      	.LM8:
 361 00f2 0FB6      		adiw r28,69-63
 362 00f4 F894      		std Y+63,__zero_reg__
 363 00f6 DEBF      		sbiw r28,69-63
 364 00f8 0FBE      		rjmp .L7
 365 00fa CDBF      	.L6:
 367               	.LM9:
 238:ssc_main.c    **** 
 239:ssc_main.c    **** 	// check parameters
 240:ssc_main.c    **** 	if (g_user_rtcmmd.param_count <= 0)
 368               	cmmd+2
 369               		ldi r25,lo8(3)
 370 00fc 8091 0000 		mov r22,r25
 371 0100 1816      		rcall __divmodqi4
 372 0102 04F0      		mov r24,r25
 241:ssc_main.c    **** 		return FALSE;
 373               	r24
 374               		breq .L8
 376 0106 1FAE      	.LM10:
 377 0108 2697      		adiw r28,69-63
 378 010a 00C0      		std Y+63,__zero_reg__
 379               		sbiw r28,69-63
 242:ssc_main.c    **** 	if (g_user_rtcmmd.param_count % 3 != 0)
 380               	L7
 381               	.L8:
 383 0110 93E0      	.LM11:
 384 0112 692F      		movw r24,r28
 385 0114 00D0      		adiw r24,3
 386 0116 892F      		ldi r18,lo8(g_runtime_svrs)
 387 0118 8823      		ldi r19,hi8(g_runtime_svrs)
 388 011a 01F0      		movw r22,r18
 243:ssc_main.c    **** 		return FALSE;
 389               	lo8(64)
 390               		ldi r21,hi8(64)
 391 011c 2696      		rcall memcpy
 393 0120 2697      	.LM12:
 394 0122 00C0      		movw r30,r28
 395               		subi r30,lo8(-(67))
 244:ssc_main.c    **** 
 245:ssc_main.c    **** 	struct SVR_PRO temp_action[8];
 246:ssc_main.c    **** 	memcpy(&temp_action, &g_runtime_svrs, sizeof(g_runtime_svrs));
 396               	31,hi8(-(67))
 397               		std Z+1,__zero_reg__
 398 0124 CE01      		st Z,__zero_reg__
 400 0128 20E0      	.LM13:
 401 012a 30E0      		std Y+2,__zero_reg__
 402 012c B901      		std Y+1,__zero_reg__
 403 012e 40E4      		rjmp .L9
 404 0130 50E0      	.L18:
 247:ssc_main.c    **** 
 248:ssc_main.c    **** 	int i;
 249:ssc_main.c    **** 	int j = 0;
 406               	d r24,Y+1
 407               		ldd r25,Y+2
 408 0134 FE01      		lsl r24
 409 0136 ED5B      		rol r25
 410 0138 FF4F      		movw r30,r24
 411 013a 1182      		subi r30,lo8(-(g_user_rtcmmd+3))
 412 013c 1082      		sbci r31,hi8(-(g_user_rtcmmd+3))
 250:ssc_main.c    **** 
 251:ssc_main.c    **** 	for (i = 0; i < g_user_rtcmmd.param_count; i += 3)
 413               	,Z
 414               		ldd r25,Z+1
 415 013e 1A82      		rcall .
 416 0140 1982      		rcall .
 417 0142 00C0      		rcall .
 418               		in r30,__SP_L__
 252:ssc_main.c    **** 	{
 253:ssc_main.c    **** 
 254:ssc_main.c    **** 		// read pin number
 255:ssc_main.c    **** 		sscanf(g_user_rtcmmd.params[i], "P%d", &j);
 419               	1,__SP_H__
 420               		adiw r30,1
 421 0144 8981      		std Z+1,r25
 422 0146 9A81      		st Z,r24
 423 0148 880F      		ldi r24,lo8(.LC8)
 424 014a 991F      		ldi r25,hi8(.LC8)
 425 014c FC01      		std Z+3,r25
 426 014e E050      		std Z+2,r24
 427 0150 F040      		movw r24,r28
 428 0152 8081      		subi r24,lo8(-(67))
 429 0154 9181      		sbci r25,hi8(-(67))
 430 0156 00D0      		std Z+5,r25
 431 0158 00D0      		std Z+4,r24
 432 015a 00D0      		rcall sscanf
 433 015c EDB7      		in r24,__SP_L__
 434 015e FEB7      		in r25,__SP_H__
 435 0160 3196      		adiw r24,6
 436 0162 9183      		in __tmp_reg__,__SREG__
 437 0164 8083      		cli
 438 0166 80E0      		out __SP_H__,r25
 439 0168 90E0      		out __SREG__,__tmp_reg__
 440 016a 9383      		out __SP_L__,r24
 442 016e CE01      	.LM15:
 443 0170 8D5B      		movw r30,r28
 444 0172 9F4F      		subi r30,lo8(-(67))
 445 0174 9583      		sbci r31,hi8(-(67))
 446 0176 8483      		ld r24,Z
 447 0178 00D0      		ldd r25,Z+1
 448 017a 8DB7      		tst r25
 449 017c 9EB7      		brlt .L10
 450 017e 0696      		movw r30,r28
 451 0180 0FB6      		subi r30,lo8(-(67))
 452 0182 F894      		sbci r31,hi8(-(67))
 453 0184 9EBF      		ld r24,Z
 454 0186 0FBE      		ldd r25,Z+1
 455 0188 8DBF      		cpi r24,8
 256:ssc_main.c    **** 		// check pin number
 257:ssc_main.c    **** 		if (j < 0 || j > 7)
 456               	:
 458 018a FE01      	.LM16:
 459 018c ED5B      		adiw r28,69-63
 460 018e FF4F      		std Y+63,__zero_reg__
 461 0190 8081      		sbiw r28,69-63
 462 0192 9181      		rjmp .L7
 463 0194 9923      	.L11:
 465 0198 FE01      	.LM17:
 466 019a ED5B      		movw r30,r28
 467 019c FF4F      		subi r30,lo8(-(67))
 468 019e 8081      		sbci r31,hi8(-(67))
 469 01a0 9181      		ld r16,Z
 470 01a2 8830      		ldd r17,Z+1
 471 01a4 9105      		ldd r24,Y+1
 472 01a6 04F0      		ldd r25,Y+2
 473               		adiw r24,1
 258:ssc_main.c    **** 			return FALSE;
 474               		movw r30,r24
 475               		subi r30,lo8(-(g_user_rtcmmd+3))
 476 01a8 2696      		sbci r31,hi8(-(g_user_rtcmmd+3))
 477 01aa 1FAE      		ld r24,Z
 478 01ac 2697      		ldd r25,Z+1
 479 01ae 00C0      		rcall atol
 480               		movw r26,r24
 259:ssc_main.c    **** 
 260:ssc_main.c    **** 		// read position & hold time
 261:ssc_main.c    **** 		temp_action[j].save_position_us = atol(g_user_rtcmmd.params[i + 1]);
 481               	24,r22
 482               		movw r20,r24
 483 01b0 FE01      		movw r18,r16
 484 01b2 ED5B      		lsl r18
 485 01b4 FF4F      		rol r19
 486 01b6 0081      		lsl r18
 487 01b8 1181      		rol r19
 488 01ba 8981      		lsl r18
 489 01bc 9A81      		rol r19
 490 01be 0196      		movw r24,r28
 491 01c0 880F      		adiw r24,1
 492 01c2 991F      		add r24,r18
 493 01c4 FC01      		adc r25,r19
 494 01c6 E050      		movw r30,r24
 495 01c8 F040      		adiw r30,6
 496 01ca 8081      		std Z+1,r21
 497 01cc 9181      		st Z,r20
 499 01d0 DC01      	.LM18:
 500 01d2 CB01      		movw r30,r28
 501 01d4 AC01      		subi r30,lo8(-(67))
 502 01d6 9801      		sbci r31,hi8(-(67))
 503 01d8 220F      		ld r16,Z
 504 01da 331F      		ldd r17,Z+1
 505 01dc 220F      		ldd r24,Y+1
 506 01de 331F      		ldd r25,Y+2
 507 01e0 220F      		adiw r24,2
 508 01e2 331F      		lsl r24
 509 01e4 CE01      		rol r25
 510 01e6 0196      		movw r30,r24
 511 01e8 820F      		subi r30,lo8(-(g_user_rtcmmd+3))
 512 01ea 931F      		sbci r31,hi8(-(g_user_rtcmmd+3))
 513 01ec FC01      		ld r24,Z
 514 01ee 3696      		ldd r25,Z+1
 515 01f0 5183      		rcall atol
 516 01f2 4083      		movw r26,r24
 262:ssc_main.c    **** 		temp_action[j].speed = atol(g_user_rtcmmd.params[i + 2]);
 517               	8,r16
 518               		lsl r18
 519 01f4 FE01      		rol r19
 520 01f6 ED5B      		lsl r18
 521 01f8 FF4F      		rol r19
 522 01fa 0081      		lsl r18
 523 01fc 1181      		rol r19
 524 01fe 8981      		movw r24,r28
 525 0200 9A81      		adiw r24,1
 526 0202 0296      		add r24,r18
 527 0204 880F      		adc r25,r19
 528 0206 991F      		movw r30,r24
 529 0208 FC01      		adiw r30,8
 530 020a E050      		std Z+1,r21
 531 020c F040      		st Z,r20
 533 0210 9181      	.LM19:
 534 0212 00D0      		movw r30,r28
 535 0214 DC01      		subi r30,lo8(-(67))
 536 0216 CB01      		sbci r31,hi8(-(67))
 537 0218 AC01      		ld r24,Z
 538 021a 9801      		ldd r25,Z+1
 539 021c 220F      		movw r18,r24
 540 021e 331F      		lsl r18
 541 0220 220F      		rol r19
 542 0222 331F      		lsl r18
 543 0224 220F      		rol r19
 544 0226 331F      		lsl r18
 545 0228 CE01      		rol r19
 546 022a 0196      		movw r24,r28
 547 022c 820F      		adiw r24,1
 548 022e 931F      		add r24,r18
 549 0230 FC01      		adc r25,r19
 550 0232 3896      		movw r30,r24
 551 0234 5183      		adiw r30,6
 552 0236 4083      		ld r24,Z
 263:ssc_main.c    **** 
 264:ssc_main.c    **** 		// check data
 265:ssc_main.c    **** 		if (temp_action[j].save_position_us < MIN_POSITION
 553               	r24,lo8(450)
 554               		cpc r25,r18
 555 0238 FE01      		brlt .L12
 556 023a ED5B      		movw r30,r28
 557 023c FF4F      		subi r30,lo8(-(67))
 558 023e 8081      		sbci r31,hi8(-(67))
 559 0240 9181      		ld r24,Z
 560 0242 9C01      		ldd r25,Z+1
 561 0244 220F      		movw r18,r24
 562 0246 331F      		lsl r18
 563 0248 220F      		rol r19
 564 024a 331F      		lsl r18
 565 024c 220F      		rol r19
 566 024e 331F      		lsl r18
 567 0250 CE01      		rol r19
 568 0252 0196      		movw r24,r28
 569 0254 820F      		adiw r24,1
 570 0256 931F      		add r24,r18
 571 0258 FC01      		adc r25,r19
 572 025a 3696      		movw r30,r24
 573 025c 8081      		adiw r30,6
 574 025e 9181      		ld r24,Z
 575 0260 21E0      		ldd r25,Z+1
 576 0262 823C      		ldi r18,hi8(2401)
 577 0264 9207      		cpi r24,lo8(2401)
 578 0266 04F0      		cpc r25,r18
 579 0268 FE01      		brlt .L13
 580 026a ED5B      	.L12:
 582 026e 8081      	.LM20:
 583 0270 9181      		adiw r28,69-63
 584 0272 9C01      		std Y+63,__zero_reg__
 585 0274 220F      		sbiw r28,69-63
 586 0276 331F      		rjmp .L7
 587 0278 220F      	.L13:
 589 027c 220F      	.LM21:
 590 027e 331F      		movw r30,r28
 591 0280 CE01      		subi r30,lo8(-(67))
 592 0282 0196      		sbci r31,hi8(-(67))
 593 0284 820F      		ld r24,Z
 594 0286 931F      		ldd r25,Z+1
 595 0288 FC01      		movw r18,r24
 596 028a 3696      		lsl r18
 597 028c 8081      		rol r19
 598 028e 9181      		lsl r18
 599 0290 29E0      		rol r19
 600 0292 8136      		lsl r18
 601 0294 9207      		rol r19
 602 0296 04F0      		movw r24,r28
 603               		adiw r24,1
 266:ssc_main.c    **** 				|| temp_action[j].save_position_us > MAX_POSITION)
 267:ssc_main.c    **** 			return FALSE;
 604               	
 605               		ld r24,Z
 606 0298 2696      		ldd r25,Z+1
 607 029a 1FAE      		ldi r18,hi8(450)
 608 029c 2697      		cpi r24,lo8(450)
 609 029e 00C0      		cpc r25,r18
 610               		brge .+2
 268:ssc_main.c    **** 
 269:ssc_main.c    **** 		// calculate speed
 270:ssc_main.c    **** 		if (temp_action[j].position_us >= MIN_POSITION)
 611               	.L14
 613 02a0 FE01      	.LM22:
 614 02a2 ED5B      		movw r30,r28
 615 02a4 FF4F      		subi r30,lo8(-(67))
 616 02a6 8081      		sbci r31,hi8(-(67))
 617 02a8 9181      		ld r24,Z
 618 02aa 9C01      		ldd r25,Z+1
 619 02ac 220F      		movw r18,r24
 620 02ae 331F      		lsl r18
 621 02b0 220F      		rol r19
 622 02b2 331F      		lsl r18
 623 02b4 220F      		rol r19
 624 02b6 331F      		lsl r18
 625 02b8 CE01      		rol r19
 626 02ba 0196      		movw r24,r28
 627 02bc 820F      		adiw r24,1
 628 02be 931F      		add r24,r18
 629 02c0 FC01      		adc r25,r19
 630 02c2 3296      		movw r30,r24
 631 02c4 8081      		adiw r30,8
 632 02c6 9181      		ld r24,Z
 633 02c8 21E0      		ldd r25,Z+1
 634 02ca 823C      		sbiw r24,0
 635 02cc 9207      		breq .+2
 636 02ce 04F4      		rjmp .L15
 271:ssc_main.c    **** 		{
 272:ssc_main.c    **** 			if (temp_action[j].speed == 0)
 638               	r30,lo8(-(67))
 639               		sbci r31,hi8(-(67))
 640 02d2 FE01      		ld r22,Z
 641 02d4 ED5B      		ldd r23,Z+1
 642 02d6 FF4F      		movw r30,r28
 643 02d8 8081      		subi r30,lo8(-(67))
 644 02da 9181      		sbci r31,hi8(-(67))
 645 02dc 9C01      		ld r24,Z
 646 02de 220F      		ldd r25,Z+1
 647 02e0 331F      		movw r18,r24
 648 02e2 220F      		lsl r18
 649 02e4 331F      		rol r19
 650 02e6 220F      		lsl r18
 651 02e8 331F      		rol r19
 652 02ea CE01      		lsl r18
 653 02ec 0196      		rol r19
 654 02ee 820F      		movw r24,r28
 655 02f0 931F      		adiw r24,1
 656 02f2 FC01      		add r24,r18
 657 02f4 3896      		adc r25,r19
 658 02f6 8081      		movw r30,r24
 659 02f8 9181      		adiw r30,6
 660 02fa 0097      		ld r20,Z
 661 02fc 01F0      		ldd r21,Z+1
 662 02fe 00C0      		movw r30,r28
 273:ssc_main.c    **** 			{
 274:ssc_main.c    **** 				temp_action[j].speed = (temp_action[j].save_position_us
 663               	i r31,hi8(-(67))
 664               		ld r24,Z
 665 0300 FE01      		ldd r25,Z+1
 666 0302 ED5B      		movw r18,r24
 667 0304 FF4F      		lsl r18
 668 0306 6081      		rol r19
 669 0308 7181      		lsl r18
 670 030a FE01      		rol r19
 671 030c ED5B      		lsl r18
 672 030e FF4F      		rol r19
 673 0310 8081      		movw r24,r28
 674 0312 9181      		adiw r24,1
 675 0314 9C01      		add r24,r18
 676 0316 220F      		adc r25,r19
 677 0318 331F      		movw r30,r24
 678 031a 220F      		adiw r30,2
 679 031c 331F      		ld r24,Z
 680 031e 220F      		ldd r25,Z+1
 681 0320 331F      		sub r20,r24
 682 0322 CE01      		sbc r21,r25
 683 0324 0196      		movw r18,r22
 684 0326 820F      		lsl r18
 685 0328 931F      		rol r19
 686 032a FC01      		lsl r18
 687 032c 3696      		rol r19
 688 032e 4081      		lsl r18
 689 0330 5181      		rol r19
 690 0332 FE01      		movw r24,r28
 691 0334 ED5B      		adiw r24,1
 692 0336 FF4F      		add r24,r18
 693 0338 8081      		adc r25,r19
 694 033a 9181      		movw r30,r24
 695 033c 9C01      		adiw r30,8
 696 033e 220F      		std Z+1,r21
 697 0340 331F      		st Z,r20
 698 0342 220F      		rjmp .L17
 699 0344 331F      	.L15:
 701 0348 331F      	.LM24:
 702 034a CE01      		movw r30,r28
 703 034c 0196      		subi r30,lo8(-(67))
 704 034e 820F      		sbci r31,hi8(-(67))
 705 0350 931F      		ld r24,Z
 706 0352 FC01      		ldd r25,Z+1
 707 0354 3296      		movw r18,r24
 708 0356 8081      		lsl r18
 709 0358 9181      		rol r19
 710 035a 481B      		lsl r18
 711 035c 590B      		rol r19
 712 035e 9B01      		lsl r18
 713 0360 220F      		rol r19
 714 0362 331F      		movw r24,r28
 715 0364 220F      		adiw r24,1
 716 0366 331F      		add r24,r18
 717 0368 220F      		adc r25,r19
 718 036a 331F      		movw r30,r24
 719 036c CE01      		adiw r30,6
 720 036e 0196      		ld r20,Z
 721 0370 820F      		ldd r21,Z+1
 722 0372 931F      		movw r30,r28
 723 0374 FC01      		subi r30,lo8(-(67))
 724 0376 3896      		sbci r31,hi8(-(67))
 725 0378 5183      		ld r24,Z
 726 037a 4083      		ldd r25,Z+1
 727 037c 00C0      		movw r18,r24
 728               		lsl r18
 275:ssc_main.c    **** 						- temp_action[j].position_us);
 276:ssc_main.c    **** 			}
 277:ssc_main.c    **** 			else
 278:ssc_main.c    **** 			{
 279:ssc_main.c    **** 				if (temp_action[j].save_position_us
 729               	24,1
 730               		add r24,r18
 731 037e FE01      		adc r25,r19
 732 0380 ED5B      		movw r30,r24
 733 0382 FF4F      		adiw r30,2
 734 0384 8081      		ld r24,Z
 735 0386 9181      		ldd r25,Z+1
 736 0388 9C01      		cp r20,r24
 737 038a 220F      		cpc r21,r25
 738 038c 331F      		brlt .+2
 739 038e 220F      		rjmp .L17
 741 0392 220F      	.LM25:
 742 0394 331F      		movw r30,r28
 743 0396 CE01      		subi r30,lo8(-(67))
 744 0398 0196      		sbci r31,hi8(-(67))
 745 039a 820F      		ld r22,Z
 746 039c 931F      		ldd r23,Z+1
 747 039e FC01      		movw r30,r28
 748 03a0 3696      		subi r30,lo8(-(67))
 749 03a2 4081      		sbci r31,hi8(-(67))
 750 03a4 5181      		ld r24,Z
 751 03a6 FE01      		ldd r25,Z+1
 752 03a8 ED5B      		movw r18,r24
 753 03aa FF4F      		lsl r18
 754 03ac 8081      		rol r19
 755 03ae 9181      		lsl r18
 756 03b0 9C01      		rol r19
 757 03b2 220F      		lsl r18
 758 03b4 331F      		rol r19
 759 03b6 220F      		movw r24,r28
 760 03b8 331F      		adiw r24,1
 761 03ba 220F      		add r24,r18
 762 03bc 331F      		adc r25,r19
 763 03be CE01      		movw r30,r24
 764 03c0 0196      		adiw r30,8
 765 03c2 820F      		ld r24,Z
 766 03c4 931F      		ldd r25,Z+1
 767 03c6 FC01      		clr r20
 768 03c8 3296      		clr r21
 769 03ca 8081      		sub r20,r24
 770 03cc 9181      		sbc r21,r25
 771 03ce 4817      		movw r18,r22
 772 03d0 5907      		lsl r18
 773 03d2 04F0      		rol r19
 774 03d4 00C0      		lsl r18
 280:ssc_main.c    **** 						< temp_action[j].position_us)
 281:ssc_main.c    **** 				{
 282:ssc_main.c    **** 					temp_action[j].speed = -temp_action[j].speed;
 775               	 r24,1
 776               		add r24,r18
 777 03d6 FE01      		adc r25,r19
 778 03d8 ED5B      		movw r30,r24
 779 03da FF4F      		adiw r30,8
 780 03dc 6081      		std Z+1,r21
 781 03de 7181      		st Z,r20
 782 03e0 FE01      		rjmp .L17
 783 03e2 ED5B      	.L14:
 785 03e6 8081      	.LM26:
 786 03e8 9181      		movw r30,r28
 787 03ea 9C01      		subi r30,lo8(-(67))
 788 03ec 220F      		sbci r31,hi8(-(67))
 789 03ee 331F      		ld r22,Z
 790 03f0 220F      		ldd r23,Z+1
 791 03f2 331F      		movw r30,r28
 792 03f4 220F      		subi r30,lo8(-(67))
 793 03f6 331F      		sbci r31,hi8(-(67))
 794 03f8 CE01      		ld r24,Z
 795 03fa 0196      		ldd r25,Z+1
 796 03fc 820F      		movw r18,r24
 797 03fe 931F      		lsl r18
 798 0400 FC01      		rol r19
 799 0402 3896      		lsl r18
 800 0404 8081      		rol r19
 801 0406 9181      		lsl r18
 802 0408 4427      		rol r19
 803 040a 5527      		movw r24,r28
 804 040c 481B      		adiw r24,1
 805 040e 590B      		add r24,r18
 806 0410 9B01      		adc r25,r19
 807 0412 220F      		movw r30,r24
 808 0414 331F      		adiw r30,6
 809 0416 220F      		ld r20,Z
 810 0418 331F      		ldd r21,Z+1
 811 041a 220F      		movw r18,r22
 812 041c 331F      		lsl r18
 813 041e CE01      		rol r19
 814 0420 0196      		lsl r18
 815 0422 820F      		rol r19
 816 0424 931F      		lsl r18
 817 0426 FC01      		rol r19
 818 0428 3896      		movw r24,r28
 819 042a 5183      		adiw r24,1
 820 042c 4083      		add r24,r18
 821 042e 00C0      		adc r25,r19
 822               		movw r30,r24
 283:ssc_main.c    **** 				}
 284:ssc_main.c    **** 			}
 285:ssc_main.c    **** 		}
 286:ssc_main.c    **** 		else
 287:ssc_main.c    **** 		{
 288:ssc_main.c    **** 			temp_action[j].position_us = temp_action[j].save_position_us;
 823               		68,0,251,.LM27-.LFBB2
 824               	.LM27:
 825 0430 FE01      		ldd r24,Y+1
 826 0432 ED5B      		ldd r25,Y+2
 827 0434 FF4F      		adiw r24,3
 828 0436 6081      		std Y+2,r25
 829 0438 7181      		std Y+1,r24
 830 043a FE01      	.L9:
 831 043c ED5B      		lds r24,g_user_rtcmmd+2
 832 043e FF4F      		mov r18,r24
 833 0440 8081      		clr r19
 834 0442 9181      		sbrc r18,7
 835 0444 9C01      		com r19
 836 0446 220F      		ldd r24,Y+1
 837 0448 331F      		ldd r25,Y+2
 838 044a 220F      		cp r24,r18
 839 044c 331F      		cpc r25,r19
 840 044e 220F      		brge .+2
 841 0450 331F      		rjmp .L18
 843 0454 0196      	.LM28:
 844 0456 820F      		ldi r24,lo8(g_runtime_svrs)
 845 0458 931F      		ldi r25,hi8(g_runtime_svrs)
 846 045a FC01      		movw r18,r28
 847 045c 3696      		subi r18,lo8(-(3))
 848 045e 4081      		sbci r19,hi8(-(3))
 849 0460 5181      		movw r22,r18
 850 0462 9B01      		ldi r20,lo8(64)
 851 0464 220F      		ldi r21,hi8(64)
 852 0466 331F      		rcall memcpy
 854 046a 331F      	.LM29:
 855 046c 220F      		ldi r24,lo8(1)
 856 046e 331F      		adiw r28,69-63
 857 0470 CE01      		std Y+63,r24
 858 0472 0196      		sbiw r28,69-63
 859 0474 820F      	.L7:
 860 0476 931F      		adiw r28,69-63
 861 0478 FC01      		ldd r24,Y+63
 862 047a 3296      		sbiw r28,69-63
 863 047c 5183      	/* epilogue start */
 865               	.LM30:
 866               		subi r28,lo8(-(69))
 867               		sbci r29,hi8(-(69))
 868 0480 8981      		in __tmp_reg__,__SREG__
 869 0482 9A81      		cli
 870 0484 0396      		out __SP_H__,r29
 871 0486 9A83      		out __SREG__,__tmp_reg__
 872 0488 8983      		out __SP_L__,r28
 873               		pop r28
 874 048a 8091 0000 		pop r29
 875 048e 282F      		pop r17
 876 0490 3327      		pop r16
 877 0492 27FD      		ret
 884 04a0 00C0      	.Lscope2:
 289:ssc_main.c    **** 		}
 290:ssc_main.c    **** 
 291:ssc_main.c    **** 	}
 292:ssc_main.c    **** 
 293:ssc_main.c    **** 	memcpy(&g_runtime_svrs, &temp_action, sizeof(temp_action));
 885               	
 886               	rt_ver:
 888 04a4 90E0      	.LM31:
 889 04a6 9E01      	.LFBB3:
 890 04a8 2D5F      		push r29
 891 04aa 3F4F      		push r28
 892 04ac B901      		in r28,__SP_L__
 893 04ae 40E4      		in r29,__SP_H__
 894 04b0 50E0      	/* prologue: function */
 895 04b2 00D0      	/* frame size = 0 */
 294:ssc_main.c    **** 
 295:ssc_main.c    **** 	return TRUE;
 896               	,0,300,.LM32-.LFBB3
 897               	.LM32:
 898 04b4 81E0      		rcall .
 899 04b6 2696      		in r30,__SP_L__
 900 04b8 8FAF      		in r31,__SP_H__
 901 04ba 2697      		adiw r30,1
 902               		ldi r24,lo8(RTL_M_ID)
 903 04bc 2696      		ldi r25,hi8(RTL_M_ID)
 904 04be 8FAD      		std Z+1,r25
 905 04c0 2697      		st Z,r24
 906               		rcall printf_P
 296:ssc_main.c    **** }
 907               	reg__
 908               		pop __tmp_reg__
 910 04c4 DF4F      	.LM33:
 911 04c6 0FB6      		ldi r24,lo8(1)
 912 04c8 F894      	/* epilogue start */
 914 04cc 0FBE      	.LM34:
 915 04ce CDBF      		pop r28
 916 04d0 CF91      		pop r29
 917 04d2 DF91      		ret
 919 04d6 0F91      	.Lscope3:
 920 04d8 0895      		.data
 921               	.LC9:
 922               		.string	"\r\n*SBR:%d\r\n"
 923               		.text
 926               	rt_sbr:
 928               	.LM35:
 929               	.LFBB4:
 930               		push r29
 297:ssc_main.c    **** 
 298:ssc_main.c    **** int8_t rt_ver(void)
 299:ssc_main.c    **** {
 931               	__
 932               		in r29,__SP_H__
 933               		sbiw r28,7
 934 04da DF93      		in __tmp_reg__,__SREG__
 935 04dc CF93      		cli
 936 04de CDB7      		out __SP_H__,r29
 937 04e0 DEB7      		out __SREG__,__tmp_reg__
 938               		out __SP_L__,r28
 939               	/* prologue: function */
 300:ssc_main.c    **** 	printf_P(RTL_M_ID);
 940               	size = 7 */
 942 04e2 00D0      	.LM36:
 943 04e4 EDB7      		lds r24,g_user_rtcmmd+2
 944 04e6 FEB7      		cp __zero_reg__,r24
 945 04e8 3196      		brlt .L23
 947 04ec 90E0      	.LM37:
 948 04ee 9183      		std Y+5,__zero_reg__
 949 04f0 8083      		rjmp .L24
 950 04f2 00D0      	.L23:
 952 04f6 0F90      	.LM38:
 301:ssc_main.c    **** 	return TRUE;
 953               	er_rtcmmd+3
 954               		lds r25,(g_user_rtcmmd+3)+1
 955 04f8 81E0      		rcall atol
 956               		movw r26,r24
 302:ssc_main.c    **** }
 957               	w r24,r22
 958               		std Y+4,r25
 959 04fa CF91      		std Y+3,r24
 961 04fe 0895      	.LM39:
 962               		std Y+2,__zero_reg__
 964               	.LM40:
 965               		ldd r24,Y+3
 966 00b6 0D0A 2A53 		ldd r25,Y+4
 966      4252 3A25 
 966      640D 0A00 
 967               		std Y+7,r25
 968               		std Y+6,r24
 969               		ldd r24,Y+6
 970               		ldd r25,Y+7
 303:ssc_main.c    **** 
 304:ssc_main.c    **** //int8_t rt_radv(void)
 305:ssc_main.c    **** //{
 306:ssc_main.c    **** //
 307:ssc_main.c    **** //	// check parameters
 308:ssc_main.c    **** //	if (g_user_rtcmmd.param_count < 1)
 309:ssc_main.c    **** //	{
 310:ssc_main.c    **** //		return FALSE;
 311:ssc_main.c    **** //	}
 312:ssc_main.c    **** //
 313:ssc_main.c    **** //	int8_t channel = atoi(g_user_rtcmmd.params[0]);
 314:ssc_main.c    **** //	int16_t adc_value = 0;
 315:ssc_main.c    **** //
 316:ssc_main.c    **** //	if (channel >= 0 && channel <= 7)
 317:ssc_main.c    **** //	{
 318:ssc_main.c    **** //
 319:ssc_main.c    **** //		if (avr_adc_open(AVR_ADC_AREF_SRC_INNER2_5V, channel))
 320:ssc_main.c    **** //		{
 321:ssc_main.c    **** //
 322:ssc_main.c    **** //			adc_value = avr_adc_read(channel);
 323:ssc_main.c    **** //			avr_adc_close();
 324:ssc_main.c    **** //
 325:ssc_main.c    **** //			printf("\r\n*RADV:%d,%d\r\n", channel, adc_value);
 326:ssc_main.c    **** //			return TRUE;
 327:ssc_main.c    **** //		}
 328:ssc_main.c    **** //	}
 329:ssc_main.c    **** //
 330:ssc_main.c    **** //	return FALSE;
 331:ssc_main.c    **** //}
 332:ssc_main.c    **** 
 333:ssc_main.c    **** /**
 334:ssc_main.c    ****  * AT*SBR=<baud rate>
 335:ssc_main.c    ****  * <baud rate> accepted values 921600 - 460800 еC 230400 еC 115200 еC 57600 еC 9600
 336:ssc_main.c    ****  * Default baud rate is 115200 bauds
 337:ssc_main.c    ****  */
 338:ssc_main.c    **** int8_t rt_sbr(void)
 339:ssc_main.c    **** {
 971               	9200)
 972               		cpi r24,lo8(19200)
 973               		cpc r25,r18
 974 0500 DF93      		breq .L29
 975 0502 CF93      		ldd r24,Y+6
 976 0504 CDB7      		ldd r25,Y+7
 977 0506 DEB7      		ldi r18,hi8(19201)
 978 0508 2797      		cpi r24,lo8(19201)
 979 050a 0FB6      		cpc r25,r18
 980 050c F894      		brsh .L33
 981 050e DEBF      		ldd r24,Y+6
 982 0510 0FBE      		ldd r25,Y+7
 983 0512 CDBF      		ldi r18,hi8(4800)
 984               		cpi r24,lo8(4800)
 985               		cpc r25,r18
 340:ssc_main.c    **** 	// check parameters
 341:ssc_main.c    **** 	if (g_user_rtcmmd.param_count < 1)
 986               	 r24,Y+6
 987               		ldd r25,Y+7
 988 0514 8091 0000 		ldi r18,hi8(9600)
 989 0518 1816      		cpi r24,lo8(9600)
 990 051a 04F0      		cpc r25,r18
 342:ssc_main.c    **** 	{
 343:ssc_main.c    **** 		return FALSE;
 991               	 .L28
 992               		ldd r24,Y+6
 993 051c 1D82      		ldd r25,Y+7
 994 051e 00C0      		ldi r18,hi8(2400)
 995               		cpi r24,lo8(2400)
 344:ssc_main.c    **** 	}
 345:ssc_main.c    **** 
 346:ssc_main.c    **** 	uint16_t baud_rate = atol(g_user_rtcmmd.params[0]);
 996               	r25,r18
 997               		breq .L26
 998 0520 8091 0000 		rjmp .L25
 999 0524 9091 0000 	.L33:
 1000 0528 00D0      		ldd r24,Y+6
 1001 052a DC01      		ldd r25,Y+7
 1002 052c CB01      		ldi r18,hi8(31250)
 1003 052e 9C83      		cpi r24,lo8(31250)
 1004 0530 8B83      		cpc r25,r18
 347:ssc_main.c    **** 	uint8_t baud_ubrr = 0;
 1005               	1
 1006               		ldd r24,Y+6
 1007 0532 1A82      		ldd r25,Y+7
 348:ssc_main.c    **** 	switch (baud_rate)
 1008               	i r18,hi8(-27136)
 1009               		cpi r24,lo8(-27136)
 1010 0534 8B81      		cpc r25,r18
 1011 0536 9C81      		breq .L32
 1012 0538 9F83      		ldd r24,Y+6
 1013 053a 8E83      		ldd r25,Y+7
 1014 053c 8E81      		ldi r18,hi8(28800)
 1015 053e 9F81      		cpi r24,lo8(28800)
 1016 0540 2BE4      		cpc r25,r18
 1017 0542 8030      		breq .L30
 1018 0544 9207      		rjmp .L25
 1019 0546 01F0      	.L26:
 1021 054a 9F81      	.LM41:
 1022 054c 2BE4      		ldi r24,lo8(-49)
 1023 054e 8130      		std Y+2,r24
 1024 0550 9207      		rjmp .L25
 1025 0552 00F4      	.L27:
 1027 0556 9F81      	.LM42:
 1028 0558 22E1      		ldi r24,lo8(103)
 1029 055a 803C      		std Y+2,r24
 1030 055c 9207      		rjmp .L25
 1031 055e 01F0      	.L28:
 1033 0562 9F81      	.LM43:
 1034 0564 25E2      		ldi r24,lo8(51)
 1035 0566 8038      		std Y+2,r24
 1036 0568 9207      		rjmp .L25
 1037 056a 01F0      	.L29:
 1039 056e 9F81      	.LM44:
 1040 0570 29E0      		ldi r24,lo8(25)
 1041 0572 8036      		std Y+2,r24
 1042 0574 9207      		rjmp .L25
 1043 0576 01F0      	.L30:
 1045               	.LM45:
 1046 057a 8E81      		ldi r24,lo8(16)
 1047 057c 9F81      		std Y+2,r24
 1048 057e 2AE7      		rjmp .L25
 1049 0580 8231      	.L31:
 1051 0584 01F0      	.LM46:
 1052 0586 8E81      		ldi r24,lo8(15)
 1053 0588 9F81      		std Y+2,r24
 1054 058a 26E9      		rjmp .L25
 1055 058c 8030      	.L32:
 1057 0590 01F0      	.LM47:
 1058 0592 8E81      		ldi r24,lo8(12)
 1059 0594 9F81      		std Y+2,r24
 1060 0596 20E7      	.L25:
 1062 059a 9207      	.LM48:
 1063 059c 01F0      		ldd r24,Y+2
 1064 059e 00C0      		tst r24
 1065               		breq .L34
 349:ssc_main.c    **** 	{
 350:ssc_main.c    **** 	case 2400:
 351:ssc_main.c    **** 		baud_ubrr = 207;
 1066               	o_reg__
 1067               	.L35:
 1069 05a2 8A83      	.LM50:
 1070 05a4 00C0      		ldi r30,lo8(60)
 1071               		ldi r31,hi8(60)
 352:ssc_main.c    **** 		break;
 353:ssc_main.c    **** 	case 4800:
 354:ssc_main.c    **** 		baud_ubrr = 103;
 1072               	4,Z
 1073               		mov r24,r24
 1074 05a6 87E6      		ldi r25,lo8(0)
 1075 05a8 8A83      		andi r24,lo8(2)
 1076 05aa 00C0      		andi r25,hi8(2)
 1077               		sbiw r24,0
 355:ssc_main.c    **** 		break;
 356:ssc_main.c    **** 	case 9600:
 357:ssc_main.c    **** 		baud_ubrr = 51;
 1078               	.L35
 1080 05ac 83E3      	.LM51:
 1081 05ae 8A83      		ldi r24,lo8(g_eprom_baud_ubrr)
 1082 05b0 00C0      		ldi r25,hi8(g_eprom_baud_ubrr)
 1083               		ldd r22,Y+2
 358:ssc_main.c    **** 		break;
 359:ssc_main.c    **** 	case 19200: // default band rate
 360:ssc_main.c    **** 		baud_ubrr = 25;
 1084               	 eeprom_write_byte
 1085               	.L36:
 1087 05b4 8A83      	.LM52:
 1088 05b6 00C0      		ldi r30,lo8(60)
 1089               		ldi r31,hi8(60)
 361:ssc_main.c    **** 		break;
 362:ssc_main.c    **** 	case 28800:
 363:ssc_main.c    **** 		baud_ubrr = 16;
 1090               	4,Z
 1091               		mov r24,r24
 1092 05b8 80E1      		ldi r25,lo8(0)
 1093 05ba 8A83      		andi r24,lo8(2)
 1094 05bc 00C0      		andi r25,hi8(2)
 1095               		sbiw r24,0
 364:ssc_main.c    **** 		break;
 365:ssc_main.c    **** 	case 31250:
 366:ssc_main.c    **** 		baud_ubrr = 15;
 1096               	.L36
 1098 05be 8FE0      	.LM53:
 1099 05c0 8A83      		ldi r24,lo8(g_eprom_baud_ubrr)
 1100 05c2 00C0      		ldi r25,hi8(g_eprom_baud_ubrr)
 1101               		rcall eeprom_read_byte
 367:ssc_main.c    **** 		break;
 368:ssc_main.c    **** 	case 38400:
 369:ssc_main.c    **** 		baud_ubrr = 12;
 1102               	+1,r24
 1104 05c4 8CE0      	.LM54:
 1105 05c6 8A83      		ldd r25,Y+1
 1106               		ldd r24,Y+2
 370:ssc_main.c    **** 		break;
 371:ssc_main.c    **** 	}
 372:ssc_main.c    **** 
 373:ssc_main.c    **** 	if (baud_ubrr)
 1107               	25,r24
 1108               		brne .L37
 1110 05ca 8823      	.LM55:
 1111 05cc 01F0      		ldd r24,Y+2
 1112               		mov r18,r24
 374:ssc_main.c    **** 	{
 375:ssc_main.c    **** 		uint8_t baud_ubrr_temp = 0;
 1113               	19,lo8(0)
 1114               		rcall .
 1115 05ce 1982      		rcall .
 1116               		in r30,__SP_L__
 376:ssc_main.c    **** 		eeprom_busy_wait();
 1117               	r31,__SP_H__
 1118               		adiw r30,1
 1119 05d0 ECE3      		ldi r24,lo8(.LC9)
 1120 05d2 F0E0      		ldi r25,hi8(.LC9)
 1121 05d4 8081      		std Z+1,r25
 1122 05d6 882F      		st Z,r24
 1123 05d8 90E0      		std Z+3,r19
 1124 05da 8270      		std Z+2,r18
 1125 05dc 9070      		rcall printf
 1126 05de 0097      		pop __tmp_reg__
 1127 05e0 01F4      		pop __tmp_reg__
 377:ssc_main.c    **** 		eeprom_write_byte(&g_eprom_baud_ubrr, baud_ubrr);
 1128               	reg__
 1129               		pop __tmp_reg__
 1130 05e2 80E0      	.L37:
 1132 05e6 6A81      	.LM56:
 1133 05e8 00D0      		ldi r24,lo8(1)
 1134               		std Y+5,r24
 378:ssc_main.c    **** 		eeprom_busy_wait();
 1135               	L24
 1136               	.L34:
 1137 05ea ECE3      	.LBE2:
 1139 05ee 8081      	.LM57:
 1140 05f0 882F      		std Y+5,__zero_reg__
 1141 05f2 90E0      	.L24:
 1142 05f4 8270      		ldd r24,Y+5
 1143 05f6 9070      	/* epilogue start */
 1145 05fa 01F4      	.LM58:
 379:ssc_main.c    **** 		baud_ubrr_temp = eeprom_read_byte(&g_eprom_baud_ubrr);
 1146               	
 1147               		in __tmp_reg__,__SREG__
 1148 05fc 80E0      		cli
 1149 05fe 90E0      		out __SP_H__,r29
 1150 0600 00D0      		out __SREG__,__tmp_reg__
 1151 0602 8983      		out __SP_L__,r28
 380:ssc_main.c    **** 
 381:ssc_main.c    **** 		// double verify save value
 382:ssc_main.c    **** 		if (baud_ubrr_temp == baud_ubrr)
 1152               	r28
 1153               		pop r29
 1154 0604 9981      		ret
 383:ssc_main.c    **** 		{
 384:ssc_main.c    **** 			printf("\r\n*SBR:%d\r\n", baud_ubrr);
 1158               	n	192,0,0,.LFBB4-.LFBB4
 1163 0612 00D0      	.Lscope4:
 1168 061c 80E0      	eeprom_write_byte:
 1170 0620 9183      	.Ltext1:
 1172 0624 3383      	.LM59:
 1173 0626 2283      	.LFBB5:
 1174 0628 00D0      		push r29
 1175 062a 0F90      		push r28
 1176 062c 0F90      		rcall .
 1177 062e 0F90      		push __tmp_reg__
 1178 0630 0F90      		in r28,__SP_L__
 1179               		in r29,__SP_H__
 385:ssc_main.c    **** 		}
 386:ssc_main.c    **** 
 387:ssc_main.c    **** 		return TRUE;
 1180               	*/
 1181               	/* frame size = 3 */
 1182 0632 81E0      		std Y+2,r25
 1183 0634 8D83      		std Y+1,r24
 1184 0636 00C0      		std Y+3,r22
 1185               	.L40:
 388:ssc_main.c    **** 	}
 389:ssc_main.c    **** 
 390:ssc_main.c    **** 	return FALSE;
 1187               		ldi r30,lo8(60)
 1188               		ldi r31,hi8(60)
 1189 0638 1D82      		ld r24,Z
 1190               		mov r24,r24
 1191 063a 8D81      		ldi r25,lo8(0)
 1192               		andi r24,lo8(2)
 391:ssc_main.c    **** }
 1193               	r25,hi8(2)
 1194               		sbiw r24,0
 1195 063c 2796      		brne .L40
 1197 0640 F894      	.LM61:
 1198 0642 DEBF      		ldi r30,lo8(62)
 1199 0644 0FBE      		ldi r31,hi8(62)
 1200 0646 CDBF      		ldd r24,Y+1
 1201 0648 CF91      		ldd r25,Y+2
 1202 064a DF91      		std Z+1,r25
 1203 064c 0895      		st Z,r24
 1205               	.LM62:
 1206               		ldi r30,lo8(61)
 1207               		ldi r31,hi8(61)
 1208               		ldd r24,Y+3
 1209               		st Z,r24
 1211               	.LM63:
 1212               	/* #APP */
 1213               	 ;  315 "c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h" 1
 1214               		/* START EEPROM WRITE CRITICAL SECTION */
 1215               		in	r0, 63		
 1216               		cli				
 1217               		sbi	28, 2	
 1218               		sbi	28, 1	
 1219               		out	63, r0		
   1:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /* Copyright (c) 2002, 2003, 2004, 2007 Marek Michalkiewicz
   2:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    Copyright (c) 2005, 2006 Bjoern Haase
   3:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    Copyright (c) 2008 Atmel Corporation
   4:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    Copyright (c) 2008 Wouter van Gulik
   5:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    All rights reserved.
   6:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
   7:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    Redistribution and use in source and binary forms, with or without
   8:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    modification, are permitted provided that the following conditions are met:
   9:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  10:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    * Redistributions of source code must retain the above copyright
  11:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****      notice, this list of conditions and the following disclaimer.
  12:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****      notice, this list of conditions and the following disclaimer in
  14:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****      the documentation and/or other materials provided with the
  15:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****      distribution.
  16:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****      from this software without specific prior written permission.
  19:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  20:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  32:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /* $Id: eeprom.h,v 1.21.2.7 2008/12/13 04:27:54 dmix Exp $ */
  33:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  34:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #ifndef _AVR_EEPROM_H_
  35:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #define _AVR_EEPROM_H_ 1
  36:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  37:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #include <avr/io.h>
  38:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #include <stddef.h>	/* size_t */
  39:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #include <stdint.h>
  40:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  41:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #ifdef __cplusplus
  42:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** extern "C" {
  43:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
  44:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  45:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #ifndef	__ATTR_PURE__
  46:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # ifdef	 __DOXYGEN__
  47:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #  define __ATTR_PURE__
  48:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # else
  49:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #  define __ATTR_PURE__  __attribute__((__pure__))
  50:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # endif
  51:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
  52:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  53:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
  54:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** uint16_t __eerd_word (const uint16_t *, uint8_t (*)(const uint8_t *))
  55:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     __ATTR_PURE__;
  56:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** uint32_t __eerd_dword (const uint32_t *, uint8_t (*)(const uint8_t *))
  57:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     __ATTR_PURE__;
  58:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** void __eerd_block (void *, const void *, size_t, uint8_t (*)(const uint8_t *));
  59:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  60:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** void __eewr_word (uint16_t *, uint16_t, void (*)(uint8_t *, uint8_t));
  61:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** void __eewr_dword (uint32_t *, uint32_t, void (*)(uint8_t *, uint8_t));
  62:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** void __eewr_block (void *, const void *, size_t, void (*)(uint8_t *, uint8_t));
  63:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif /* (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) ) */
  64:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  65:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if !E2END && !defined(__DOXYGEN__)
  66:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # ifndef __COMPILING_AVR_LIBC__
  67:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #  warning "Device does not have EEPROM available."
  68:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # endif
  69:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****   /* Omit below for chips without EEPROM. */
  70:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  71:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #else
  72:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  73:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \defgroup avr_eeprom <avr/eeprom.h>: EEPROM handling
  74:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \code #include <avr/eeprom.h> \endcode
  75:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  76:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     This header file declares the interface to some simple library
  77:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     routines suitable for handling the data EEPROM contained in the
  78:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     AVR microcontrollers.  The implementation uses a simple polled
  79:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     mode interface.  Applications that require interrupt-controlled
  80:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     EEPROM access to ensure that no time will be wasted in spinloops
  81:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     will have to deploy their own implementation.
  82:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  83:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \note All of the read/write functions first make sure the EEPROM
  84:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     is ready to be accessed.  Since this may cause long delays if a
  85:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     write operation is still pending, time-critical applications
  86:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     should first poll the EEPROM e. g. using eeprom_is_ready() before
  87:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     attempting any actual I/O.  But this functions are not wait until
  88:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     SELFPRGEN in SPMCSR becomes zero.  Do this manually, if your
  89:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     softwate contains the Flash burning.
  90:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  91:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \note As these functions modify IO registers, they are known to be
  92:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     non-reentrant.  If any of these functions are used from both,
  93:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     standard and interrupt context, the applications must ensure
  94:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     proper protection (e.g. by disabling interrupts before accessing
  95:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     them).
  96:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
  97:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \note All write functions force erase_and_write programming mode.
  98:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****  */
  99:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 100:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \def EEMEM
 101:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \ingroup avr_eeprom
 102:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     Attribute expression causing a variable to be allocated within the
 103:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     .eeprom section.	*/
 104:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #define EEMEM __attribute__((section(".eeprom")))
 105:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 106:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 107:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /* Register definitions */
 108:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 109:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /* Check for aliases. */
 110:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if	!defined(EEWE) && defined(EEPE)
 111:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEWE EEPE
 112:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 113:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 114:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if	!defined(EEMWE) && defined(EEMPE)
 115:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEMWE EEMPE
 116:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 117:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 118:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if	!defined(EECR) && defined(DEECR)
 119:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /* AT86RF401 */
 120:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EECR  DEECR
 121:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEAR  DEEAR
 122:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEARL DEEAR
 123:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEDR  DEEDR
 124:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EERE  EER
 125:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEWE  EEL
 126:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEMWE EEU
 127:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 128:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 129:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 130:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if	!defined(EECR) || !defined(EEDR) || !defined(EEARL)
 131:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 132:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # if	 !defined(__EEPROM_REG_LOCATIONS__) \
 133:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****       && !defined(EEPROM_REG_LOCATIONS_OVERRIDE)
 134:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****    /* 6-byte string denoting where to find the EEPROM registers in memory
 135:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****       space.  Adresses denoted in hex syntax with uppercase letters. Used
 136:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****       by the EEPROM subroutines.
 137:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 	First two letters:  EECR address.
 138:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 	Second two letters: EEDR address.
 139:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 	Last two letters:   EEAR address.
 140:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     */
 141:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #  error "Unknown EEPROM register(s) location."
 142:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # endif
 143:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 144:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /* If needed, override the locations defined in the IO headers. */
 145:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # ifdef  EEPROM_REG_LOCATIONS_OVERRIDE
 146:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #  undef  __EEPROM_REG_LOCATIONS__
 147:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #  define __EEPROM_REG_LOCATIONS__ EEPROM_REG_LOCATIONS_OVERRIDE
 148:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # endif
 149:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 150:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define CONCAT1(a, b) CONCAT2(a, b)
 151:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define CONCAT2(a, b) a ## b
 152:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define HEXNR CONCAT1(0x, __EEPROM_REG_LOCATIONS__)
 153:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 154:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # undef EECR
 155:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EECR _SFR_IO8((HEXNR >> 16) & 0xFF)
 156:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 157:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # undef EEDR
 158:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEDR _SFR_IO8((HEXNR >> 8) & 0xFF)
 159:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 160:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # undef EEAR
 161:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEAR _SFR_IO8(HEXNR & 0xFF)
 162:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 163:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # undef EEARH
 164:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 165:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # undef EEARL
 166:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define EEARL EEAR
 167:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 168:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 169:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 170:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 171:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \def eeprom_is_ready
 172:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \ingroup avr_eeprom
 173:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \returns 1 if EEPROM is ready for a new read/write operation, 0 if not.
 174:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****  */
 175:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if	defined(__DOXYGEN__)
 176:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define eeprom_is_ready()
 177:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #elif	defined(DEECR)
 178:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define eeprom_is_ready() bit_is_clear(DEECR, BSY)
 179:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #else
 180:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # define eeprom_is_ready() bit_is_clear(EECR, EEWE)
 181:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 182:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 183:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 184:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \def eeprom_busy_wait
 185:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \ingroup avr_eeprom
 186:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     Loops until the eeprom is no longer busy.
 187:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \returns Nothing.
 188:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****  */ 	 
 189:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #define eeprom_busy_wait() do {} while (!eeprom_is_ready())
 190:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 191:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 192:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \ingroup avr_eeprom
 193:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     Read one byte from EEPROM address \a __p.
 194:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****  */
 195:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** __ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
 196:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** {
 197:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     do {} while (!eeprom_is_ready ());
 198:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if E2END <= 0xFF
 199:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     EEARL = (size_t)__p;
 200:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #else
 201:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     EEAR = (size_t)__p;
 202:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 203:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     /* Use inline assembly below as some AVRs have problems with accessing
 204:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     EECR with STS instructions. For example, see errata for ATmega64. 
 205:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     The code below also assumes that EECR and EEDR are in the I/O space.
 206:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     */
 207:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     uint8_t __result;
 208:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     __asm__ __volatile__
 209:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     (
 210:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "/* START EEPROM READ CRITICAL SECTION */ \n\t"
 211:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "sbi %1, %2 \n\t"
 212:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "in %0, %3 \n\t"
 213:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "/* END EEPROM READ CRITICAL SECTION */ \n\t"
 214:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         : "=r" (__result)
 215:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         : "i" (_SFR_IO_ADDR(EECR)),
 216:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****           "i" (EERE),
 217:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****           "i" (_SFR_IO_ADDR(EEDR))
 218:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     );
 219:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     return __result;
 220:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** }
 221:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 222:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \ingroup avr_eeprom
 223:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     Read one 16-bit word (little endian) from EEPROM address \a __p.
 224:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****  */
 225:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** __ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
 226:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** {
 227:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
 228:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     return __eerd_word (__p, eeprom_read_byte);
 229:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #else
 230:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     /* If ATmega256x device, do not call function. */
 231:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     union
 232:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     {
 233:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         uint16_t word;
 234:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         struct
 235:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         {
 236:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****             uint8_t lo;
 237:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****             uint8_t hi;
 238:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         } byte;
 239:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     } x;
 240:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 241:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     x.byte.lo = eeprom_read_byte ((const uint8_t *)__p);
 242:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     x.byte.hi = eeprom_read_byte ((const uint8_t *)__p + 1);
 243:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     return x.word;
 244:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 245:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** }
 246:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 247:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \ingroup avr_eeprom
 248:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     Read one 32-bit double word (little endian) from EEPROM address \a __p.
 249:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****  */
 250:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** __ATTR_PURE__ static __inline__
 251:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** uint32_t eeprom_read_dword (const uint32_t *__p)
 252:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** {
 253:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
 254:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     return __eerd_dword (__p, eeprom_read_byte);
 255:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #else
 256:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     /* If ATmega256x device, do not call function. */
 257:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     union
 258:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     {
 259:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         uint32_t dword;
 260:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         struct
 261:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         {
 262:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****             uint8_t byte0;
 263:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****             uint8_t byte1;
 264:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****             uint8_t byte2;
 265:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****             uint8_t byte3;
 266:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         } byte;
 267:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     } x;
 268:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 269:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     x.byte.byte0 = eeprom_read_byte ((const uint8_t *)__p);
 270:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     x.byte.byte1 = eeprom_read_byte ((const uint8_t *)__p + 1);
 271:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     x.byte.byte2 = eeprom_read_byte ((const uint8_t *)__p + 2);
 272:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     x.byte.byte3 = eeprom_read_byte ((const uint8_t *)__p + 3);
 273:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     return x.dword;
 274:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 275:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** }
 276:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 277:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \ingroup avr_eeprom
 278:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     Read a block of \a __n bytes from EEPROM address \a __src to SRAM
 279:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     \a __dst.
 280:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****  */
 281:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** static __inline__ void
 282:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** eeprom_read_block (void *__dst, const void *__src, size_t __n)
 283:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** {
 284:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
 285:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     __eerd_block (__dst, __src, __n, eeprom_read_byte);
 286:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #else
 287:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     /* If ATmega256x device, do not call function. */
 288:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     while (__n--)
 289:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     {
 290:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         *(char *)__dst++ = eeprom_read_byte(__src++);
 291:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     }
 292:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 293:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** }
 294:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 295:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** /** \ingroup avr_eeprom
 296:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     Write a byte \a __value to EEPROM address \a __p.
 297:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****  */
 298:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
 299:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** {
 1220               	AL SECTION */
 1221               	 ;  0 "" 2
 1222               	/* epilogue start */
 1224 0650 CF93      	.LM64:
 1225 0652 00D0      	/* #NOAPP */
 1226 0654 0F92      		pop __tmp_reg__
 1227 0656 CDB7      		pop __tmp_reg__
 1228 0658 DEB7      		pop __tmp_reg__
 1229               		pop r28
 1230               		pop r29
 1231 065a 9A83      		ret
 1233 065e 6B83      	.Lscope5:
 300:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     do {} while (!eeprom_is_ready ());
 1235               	0,32)=*(3,2)",160,0,0,2
 1237 0660 ECE3      	eeprom_read_byte:
 1239 0664 8081      	.LM65:
 1240 0666 882F      	.LFBB6:
 1241 0668 90E0      		push r29
 1242 066a 8270      		push r28
 1243 066c 9070      		rcall .
 1244 066e 0097      		push __tmp_reg__
 1245 0670 01F4      		in r28,__SP_L__
 301:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 302:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if	defined(EEPM0) && defined(EEPM1)
 303:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     EECR = 0;		/* Set programming mode: erase and write.	*/
 304:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #elif	defined(EEPM0) || defined(EEPM1)
 305:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** # warning "Unknown EECR register, eeprom_write_byte() has become outdated."
 306:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 307:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 308:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #if	E2END <= 0xFF
 309:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     EEARL = (size_t)__p;
 310:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #else
 311:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     EEAR = (size_t)__p;
 1246               	P_H__
 1247               	/* prologue: function */
 1248 0672 EEE3      	/* frame size = 3 */
 1249 0674 F0E0      		std Y+3,r25
 1250 0676 8981      		std Y+2,r24
 1251 0678 9A81      	.L43:
 1253 067c 8083      	.LM66:
 312:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** #endif
 313:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     EEDR = __value;
 1254               	,lo8(60)
 1255               		ldi r31,hi8(60)
 1256 067e EDE3      		ld r24,Z
 1257 0680 F0E0      		mov r24,r24
 1258 0682 8B81      		ldi r25,lo8(0)
 1259 0684 8083      		andi r24,lo8(2)
 314:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** 
 315:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     __asm__ __volatile__ (
 1260               	r25,hi8(2)
 1261               		sbiw r24,0
 1262               		brne .L43
 1264               	.LM67:
 1265 0686 0FB6      		ldi r30,lo8(62)
 1266 0688 F894      		ldi r31,hi8(62)
 1267 068a E29A      		ldd r24,Y+2
 1268 068c E19A      		ldd r25,Y+3
 1269 068e 0FBE      		std Z+1,r25
 1270               		st Z,r24
 1272               	.LM68:
 316:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "/* START EEPROM WRITE CRITICAL SECTION */\n\t"
 317:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "in	r0, %[__sreg]		\n\t"
 318:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "cli				\n\t"
 319:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "sbi	%[__eecr], %[__eemwe]	\n\t"
 320:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "sbi	%[__eecr], %[__eewe]	\n\t"
 321:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "out	%[__sreg], r0		\n\t"
 322:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         "/* END EEPROM WRITE CRITICAL SECTION */"
 323:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         :
 324:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         : [__eecr]  "i" (_SFR_IO_ADDR(EECR)),
 325:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****           [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
 326:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****           [__eemwe] "i" (EEMWE),
 327:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****           [__eewe]  "i" (EEWE)
 328:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****         : "r0"
 329:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h ****     );
 330:c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h **** }
 1273               	  208 "c:/winavr/lib/gcc/../../avr/include/avr/eeprom.h" 1
 1274               		/* START EEPROM READ CRITICAL SECTION */ 
 1275               		sbi 28, 0 
 1276 0690 0F90      		in r24, 29 
 1277 0692 0F90      		/* END EEPROM READ CRITICAL SECTION */ 
 1278 0694 0F90      		
 1279 0696 CF91      	 ;  0 "" 2
 1280 0698 DF91      	/* #NOAPP */
 1281 069a 0895      		std Y+1,r24
 1283               	.LM69:
 1284               		ldd r24,Y+1
 1285               	/* epilogue start */
 1287               	.LM70:
 1288               		pop __tmp_reg__
 1289               		pop __tmp_reg__
 1290               		pop __tmp_reg__
 1291 069c DF93      		pop r28
 1292 069e CF93      		pop r29
 1293 06a0 00D0      		ret
 1298               	.Lscope6:
 1299 06a8 9B83      	.global	reset
 1300 06aa 8A83      	.global	reset
 1301               		.section .bss
 1304 06ac ECE3      	reset:
 1305 06ae F0E0      		.skip 2,0
 1306 06b0 8081      		.text
 1309 06b6 8270      	rt_reset:
 1311 06ba 0097      	.Ltext2:
 1313               	.LM71:
 1314               	.LFBB7:
 1315 06be EEE3      		push r29
 1316 06c0 F0E0      		push r28
 1317 06c2 8A81      		in r28,__SP_L__
 1318 06c4 9B81      		in r29,__SP_H__
 1319 06c6 9183      	/* prologue: function */
 1320 06c8 8083      	/* frame size = 0 */
 1322               	.LM72:
 1323               		sts (g_eprom_address)+1,__zero_reg__
 1324               		sts g_eprom_address,__zero_reg__
 1326 06ca E09A      	.LM73:
 1327 06cc 8DB3      		lds r30,reset
 1328               		lds r31,(reset)+1
 1329               		icall
 1331               	.LM74:
 1332 06ce 8983      		ldi r24,lo8(1)
 1333               	/* epilogue start */
 1335 06d0 8981      	.LM75:
 1336               		pop r28
 1337               		pop r29
 1338               		ret
 1340 06d4 0F90      	.Lscope7:
 1343 06da DF91      	rt_cywt:
 1345               	.LM76:
 1346               	.LFBB8:
 1347               		push r16
 1348               		push r17
 1349               		push r29
 1350               		push r28
 1351               		in r28,__SP_L__
 1352               		in r29,__SP_H__
 1353               		sbiw r28,14
 1354               		in __tmp_reg__,__SREG__
 1355               		cli
 1356 0000 0000      		out __SP_H__,r29
 1357               		out __SREG__,__tmp_reg__
 1358               		out __SP_L__,r28
 1359               	/* prologue: function */
 1360               	/* frame size = 14 */
 1362               	.LM77:
 392:ssc_main.c    **** 
 393:ssc_main.c    **** void
 394:ssc_main.c    **** (*reset)(void) = 0x0000;
 395:ssc_main.c    **** 
 396:ssc_main.c    **** int8_t rt_reset(void)
 397:ssc_main.c    **** {
 1363               	(2)
 1364               		brge .L49
 1365               	.L48:
 1367 06e0 CF93      	.LM78:
 1368 06e2 CDB7      		std Y+14,__zero_reg__
 1369 06e4 DEB7      		rjmp .L50
 1370               	.L49:
 398:ssc_main.c    **** 	g_eprom_address = 0;
 1372               	di r30,lo8(32)
 1373               		ldi r31,hi8(32)
 1374 06e6 1092 0000 		ldi r24,lo8(8)
 1375 06ea 1092 0000 		st Z,r24
 399:ssc_main.c    **** 	reset();
 1376               	abn	68,0,482,.LM80-.LFBB8
 1377               	.LM80:
 1378 06ee E091 0000 		movw r24,r28
 1379 06f2 F091 0000 		adiw r24,6
 1380 06f6 0995      		ldi r22,lo8(0)
 400:ssc_main.c    **** 	return TRUE;
 1381               	r23,hi8(0)
 1382               		ldi r20,lo8(8)
 1383 06f8 81E0      		ldi r21,hi8(8)
 1384               		rcall memset
 401:ssc_main.c    **** }
 1385               	abn	68,0,483,.LM81-.LFBB8
 1386               	.LM81:
 1387 06fa CF91      		lds r24,g_user_rtcmmd+3
 1388 06fc DF91      		lds r25,(g_user_rtcmmd+3)+1
 1389 06fe 0895      		rcall atol
 1390               		movw r26,r24
 1391               		movw r24,r22
 1392               		std Y+4,r25
 1393               		std Y+3,r24
 402:ssc_main.c    **** 
 403:ssc_main.c    **** /*
 404:ssc_main.c    **** int8_t rt_eew(void)
 405:ssc_main.c    **** {
 406:ssc_main.c    **** 	// check parameters
 407:ssc_main.c    **** 	if (g_user_rtcmmd.param_count > 9 || g_user_rtcmmd.param_count < 2)
 408:ssc_main.c    **** 	{
 409:ssc_main.c    **** 		return FALSE;
 410:ssc_main.c    **** 	}
 411:ssc_main.c    **** 
 412:ssc_main.c    **** 	TWBR = 8;
 413:ssc_main.c    **** 
 414:ssc_main.c    **** 	int8_t i;
 415:ssc_main.c    **** 	uint8_t temp[8];
 416:ssc_main.c    **** 	memset(temp, 0, sizeof(temp));
 417:ssc_main.c    **** 	uint16_t dev_addr = atol(g_user_rtcmmd.params[0]);
 418:ssc_main.c    **** 	for (i = 0; i < g_user_rtcmmd.param_count - 1; ++i)
 419:ssc_main.c    **** 	{
 420:ssc_main.c    **** 		temp[i] = atoi(g_user_rtcmmd.params[i + 1]);
 421:ssc_main.c    **** 	}
 422:ssc_main.c    **** 
 423:ssc_main.c    **** 	int ret = avr_ee24xx_write_buffer(dev_addr, i, (uint8_t*) &temp[0]);
 424:ssc_main.c    **** 	//printf("ret=%d\r", ret);
 425:ssc_main.c    **** 
 426:ssc_main.c    **** 	return ret;
 427:ssc_main.c    **** }
 428:ssc_main.c    **** 
 429:ssc_main.c    **** 
 430:ssc_main.c    **** int8_t rt_eer(void)
 431:ssc_main.c    **** {
 432:ssc_main.c    **** 	// check parameters
 433:ssc_main.c    **** 	if (g_user_rtcmmd.param_count < 2)
 434:ssc_main.c    **** 	{
 435:ssc_main.c    **** 		return FALSE;
 436:ssc_main.c    **** 	}
 437:ssc_main.c    **** 
 438:ssc_main.c    **** 	int8_t i = 0;
 439:ssc_main.c    **** 	uint8_t temp[8];
 440:ssc_main.c    **** 	memset(temp, 0, sizeof(temp));
 441:ssc_main.c    **** 	uint16_t dev_addr = atol(g_user_rtcmmd.params[0]);
 442:ssc_main.c    **** 	int8_t len = atoi(g_user_rtcmmd.params[1]);
 443:ssc_main.c    **** 	if (len < 0 || len > 8)
 444:ssc_main.c    **** 		return FALSE;
 445:ssc_main.c    **** 	//printf("len=%d\r", len);
 446:ssc_main.c    **** 
 447:ssc_main.c    **** 	TWBR = 8;
 448:ssc_main.c    **** 
 449:ssc_main.c    **** 	int8_t ret = avr_ee24xx_read_buffer(dev_addr, len, (uint8_t*) &temp[0]);
 450:ssc_main.c    **** 	//printf("ret=%d\r", ret);
 451:ssc_main.c    **** 	if (ret == TRUE)
 452:ssc_main.c    **** 	{
 453:ssc_main.c    **** 		printf("\r\n*EER:");
 454:ssc_main.c    **** 		for (i = 0; i < len; ++i)
 455:ssc_main.c    **** 		{
 456:ssc_main.c    **** 			if (i != len - 1)
 457:ssc_main.c    **** 				printf("%d,", temp[i]);
 458:ssc_main.c    **** 			else
 459:ssc_main.c    **** 				printf("%d", temp[i]);
 460:ssc_main.c    **** 		}
 461:ssc_main.c    **** 		printf("\r\n");
 462:ssc_main.c    **** 		return TRUE;
 463:ssc_main.c    **** 	}
 464:ssc_main.c    **** 
 465:ssc_main.c    **** 	return FALSE;
 466:ssc_main.c    **** }
 467:ssc_main.c    **** 
 468:ssc_main.c    **** */
 469:ssc_main.c    **** 
 470:ssc_main.c    **** int8_t rt_cywt(void)
 471:ssc_main.c    **** {
 1395               	d Y+5,__zero_reg__
 1396               		rjmp .L51
 1397               	.L52:
 1399 0702 1F93      	.LM83:
 1400 0704 DF93      		ldd r24,Y+5
 1401 0706 CF93      		mov r16,r24
 1402 0708 CDB7      		clr r17
 1403 070a DEB7      		sbrc r16,7
 1404 070c 2E97      		com r17
 1405 070e 0FB6      		ldd r24,Y+5
 1406 0710 F894      		clr r25
 1407 0712 DEBF      		sbrc r24,7
 1408 0714 0FBE      		com r25
 1409 0716 CDBF      		adiw r24,1
 1410               		lsl r24
 1411               		rol r25
 472:ssc_main.c    **** 	// check parameters
 473:ssc_main.c    **** 	if (g_user_rtcmmd.param_count > 9 || g_user_rtcmmd.param_count < 2)
 1412               	bi r30,lo8(-(g_user_rtcmmd+3))
 1413               		sbci r31,hi8(-(g_user_rtcmmd+3))
 1414 0718 8091 0000 		ld r24,Z
 1415 071c 8A30      		ldd r25,Z+1
 1416 071e 04F4      		rcall atoi
 1417 0720 8091 0000 		mov r18,r24
 1418 0724 8230      		movw r24,r28
 1419 0726 04F4      		adiw r24,6
 1420               		movw r30,r24
 474:ssc_main.c    **** 	{
 475:ssc_main.c    **** 		return FALSE;
 1421               	r16
 1422               		adc r31,r17
 1423 0728 1E86      		st Z,r18
 1425               	.LM84:
 476:ssc_main.c    **** 	}
 477:ssc_main.c    **** 
 478:ssc_main.c    **** 	TWBR = 8;
 1426               	r24,Y+5
 1427               		subi r24,lo8(-(1))
 1428 072c E0E2      		std Y+5,r24
 1429 072e F0E0      	.L51:
 1430 0730 88E0      		ldd r24,Y+5
 1431 0732 8083      		mov r18,r24
 479:ssc_main.c    **** 
 480:ssc_main.c    **** 	int8_t i;
 481:ssc_main.c    **** 	uint8_t temp[8];
 482:ssc_main.c    **** 	memset(temp, 0, sizeof(temp));
 1432               	19
 1433               		sbrc r18,7
 1434 0734 CE01      		com r19
 1435 0736 0696      		lds r24,g_user_rtcmmd+2
 1436 0738 60E0      		clr r25
 1437 073a 70E0      		sbrc r24,7
 1438 073c 48E0      		com r25
 1439 073e 50E0      		sbiw r24,1
 1440 0740 00D0      		cp r18,r24
 483:ssc_main.c    **** 	uint16_t dev_addr = atol(g_user_rtcmmd.params[0]);
 1441               	r25
 1442               		brlt .L52
 1444 0746 9091 0000 	.LM85:
 1445 074a 00D0      		ldd r24,Y+3
 1446 074c DC01      		ldd r25,Y+5
 1447 074e CB01      		movw r18,r28
 1448 0750 9C83      		subi r18,lo8(-(6))
 1449 0752 8B83      		sbci r19,hi8(-(6))
 484:ssc_main.c    **** 	for (i = 0; i < g_user_rtcmmd.param_count - 1; ++i)
 1450               	r25
 1451               		movw r20,r18
 1452 0754 1D82      		rcall avr_cy2239x_write_buffer
 1453 0756 00C0      		std Y+2,r25
 1454               		std Y+1,r24
 485:ssc_main.c    **** 	{
 486:ssc_main.c    **** 		temp[i] = atoi(g_user_rtcmmd.params[i + 1]);
 1455               	bn	68,0,492,.LM86-.LFBB8
 1456               	.LM86:
 1457 0758 8D81      		ldd r24,Y+1
 1458 075a 082F      		std Y+14,r24
 1459 075c 1127      	.L50:
 1460 075e 07FD      		ldd r24,Y+14
 1461 0760 1095      	/* epilogue start */
 1463 0764 9927      	.LM87:
 1464 0766 87FD      		adiw r28,14
 1465 0768 9095      		in __tmp_reg__,__SREG__
 1466 076a 0196      		cli
 1467 076c 880F      		out __SP_H__,r29
 1468 076e 991F      		out __SREG__,__tmp_reg__
 1469 0770 FC01      		out __SP_L__,r28
 1470 0772 E050      		pop r28
 1471 0774 F040      		pop r29
 1472 0776 8081      		pop r17
 1473 0778 9181      		pop r16
 1474 077a 00D0      		ret
 1482               	.Lscope8:
 1483               		.data
 1484 078a 8D81      	.LC10:
 1485 078c 8F5F      		.string	"\r\n*EER:"
 1486 078e 8D83      	.LC11:
 1487               		.string	"%d,"
 1488 0790 8D81      	.LC12:
 1489 0792 282F      		.string	"%d"
 1490 0794 3327      	.LC13:
 1491 0796 27FD      		.string	"\r"
 1492 0798 3095      		.text
 1495 07a0 87FD      	rt_cyrd:
 1497 07a4 0197      	.LM88:
 1498 07a6 2817      	.LFBB9:
 1499 07a8 3907      		push r29
 1500 07aa 04F0      		push r28
 487:ssc_main.c    **** 	}
 488:ssc_main.c    **** 
 489:ssc_main.c    **** 	int ret = avr_cy2239x_write_buffer(dev_addr, i, (uint8_t*) &temp[0]);
 1501               	
 1502               		in __tmp_reg__,__SREG__
 1503 07ac 8B81      		cli
 1504 07ae 9D81      		out __SP_H__,r29
 1505 07b0 9E01      		out __SREG__,__tmp_reg__
 1506 07b2 2A5F      		out __SP_L__,r28
 1507 07b4 3F4F      	/* prologue: function */
 1508 07b6 692F      	/* frame size = 13 */
 1510 07ba 00D0      	.LM89:
 1511 07bc 9A83      		lds r24,g_user_rtcmmd+2
 1512 07be 8983      		cpi r24,lo8(2)
 490:ssc_main.c    **** 	//printf("ret=%d\r", ret);
 491:ssc_main.c    **** 
 492:ssc_main.c    **** 	return ret;
 1514               	.LM90:
 1515 07c0 8981      		std Y+13,__zero_reg__
 1516 07c2 8E87      		rjmp .L56
 1517               	.L55:
 1519               	.LM91:
 493:ssc_main.c    **** }
 1520               	4,__zero_reg__
 1522 07c6 2E96      	.LM92:
 1523 07c8 0FB6      		movw r24,r28
 1524 07ca F894      		adiw r24,5
 1525 07cc DEBF      		ldi r22,lo8(0)
 1526 07ce 0FBE      		ldi r23,hi8(0)
 1527 07d0 CDBF      		ldi r20,lo8(8)
 1528 07d2 CF91      		ldi r21,hi8(8)
 1529 07d4 DF91      		rcall memset
 1531 07d8 0F91      	.LM93:
 1532 07da 0895      		lds r24,g_user_rtcmmd+3
 1533               		lds r25,(g_user_rtcmmd+3)+1
 1534               		rcall atol
 1535               		movw r26,r24
 1536               		movw r24,r22
 1537               		std Y+3,r24
 1539               	.LM94:
 1540               		lds r24,g_user_rtcmmd+5
 1541               		lds r25,(g_user_rtcmmd+5)+1
 1542               		rcall atoi
 1543 00c2 0D0A 2A45 		std Y+2,r24
 1543      4552 3A00 
 1545 00ca 2564 2C00 	.LM95:
 1546               		ldd r24,Y+2
 1547 00ce 2564 00   		tst r24
 1548               		brlt .L57
 1549 00d1 0D00      		ldd r24,Y+2
 1550               		cpi r24,lo8(9)
 1551               		brlt .L58
 1552               	.L57:
 494:ssc_main.c    **** 
 495:ssc_main.c    **** int8_t rt_cyrd(void)
 496:ssc_main.c    **** {
 1554               	p .L56
 1555               	.L58:
 1557 07dc DF93      	.LM97:
 1558 07de CF93      		ldi r30,lo8(32)
 1559 07e0 CDB7      		ldi r31,hi8(32)
 1560 07e2 DEB7      		ldi r24,lo8(8)
 1561 07e4 2D97      		st Z,r24
 1563 07e8 F894      	.LM98:
 1564 07ea DEBF      		ldd r24,Y+2
 1565 07ec 0FBE      		mov r18,r24
 1566 07ee CDBF      		clr r19
 1567               		sbrc r18,7
 1568               		com r19
 497:ssc_main.c    **** 	// check parameters
 498:ssc_main.c    **** 	if (g_user_rtcmmd.param_count < 2)
 1569               	subi r20,lo8(-(5))
 1570               		sbci r21,hi8(-(5))
 1571 07f0 8091 0000 		ldd r24,Y+3
 1572 07f4 8230      		movw r22,r18
 1573 07f6 04F4      		rcall avr_cy2239x_read_buffer
 499:ssc_main.c    **** 	{
 500:ssc_main.c    **** 		return FALSE;
 1574               	Y+1,r24
 1576 07f8 1D86      	.LM99:
 1577 07fa 00C0      		ldd r24,Y+1
 1578               		cpi r24,lo8(1)
 501:ssc_main.c    **** 	}
 502:ssc_main.c    **** 
 503:ssc_main.c    **** 	int8_t i = 0;
 1579               	 .+2
 1580               		rjmp .L59
 504:ssc_main.c    **** 	uint8_t temp[8];
 505:ssc_main.c    **** 	memset(temp, 0, sizeof(temp));
 1582               	100:
 1583               		rcall .
 1584 07fe CE01      		in r30,__SP_L__
 1585 0800 0596      		in r31,__SP_H__
 1586 0802 60E0      		adiw r30,1
 1587 0804 70E0      		ldi r24,lo8(.LC10)
 1588 0806 48E0      		ldi r25,hi8(.LC10)
 1589 0808 50E0      		std Z+1,r25
 1590 080a 00D0      		st Z,r24
 506:ssc_main.c    **** 	uint8_t dev_addr = atol(g_user_rtcmmd.params[0]);
 1591               	intf
 1592               		pop __tmp_reg__
 1593 080c 8091 0000 		pop __tmp_reg__
 1595 0814 00D0      	.LM101:
 1596 0816 DC01      		std Y+4,__zero_reg__
 1597 0818 CB01      		rjmp .L60
 1598 081a 8B83      	.L63:
 507:ssc_main.c    **** 	int8_t len = atoi(g_user_rtcmmd.params[1]);
 1599               	68,0,521,.LM102-.LFBB9
 1600               	.LM102:
 1601 081c 8091 0000 		ldd r24,Y+4
 1602 0820 9091 0000 		mov r18,r24
 1603 0824 00D0      		clr r19
 1604 0826 8A83      		sbrc r18,7
 508:ssc_main.c    **** 	if (len < 0 || len > 8)
 1605               	19
 1606               		ldd r24,Y+2
 1607 0828 8A81      		clr r25
 1608 082a 8823      		sbrc r24,7
 1609 082c 04F0      		com r25
 1610 082e 8A81      		sbiw r24,1
 1611 0830 8930      		cp r18,r24
 1612 0832 04F0      		cpc r19,r25
 1613               		breq .L61
 509:ssc_main.c    **** 		return FALSE;
 1614               	8,0,522,.LM103-.LFBB9
 1615               	.LM103:
 1616 0834 1D86      		ldd r24,Y+4
 1617 0836 00C0      		mov r18,r24
 1618               		clr r19
 510:ssc_main.c    **** 	//printf("len=%d\r", len);
 511:ssc_main.c    **** 
 512:ssc_main.c    **** 	TWBR = 8;
 1619               	 r18,7
 1620               		com r19
 1621 0838 E0E2      		movw r24,r28
 1622 083a F0E0      		adiw r24,5
 1623 083c 88E0      		movw r30,r24
 1624 083e 8083      		add r30,r18
 513:ssc_main.c    **** 
 514:ssc_main.c    **** 	int8_t ret = avr_cy2239x_read_buffer(dev_addr, len, (uint8_t*) &temp[0]);
 1625               	31,r19
 1626               		ld r24,Z
 1627 0840 8A81      		mov r18,r24
 1628 0842 282F      		ldi r19,lo8(0)
 1629 0844 3327      		rcall .
 1630 0846 27FD      		rcall .
 1631 0848 3095      		in r30,__SP_L__
 1632 084a AE01      		in r31,__SP_H__
 1633 084c 4B5F      		adiw r30,1
 1634 084e 5F4F      		ldi r24,lo8(.LC11)
 1635 0850 8B81      		ldi r25,hi8(.LC11)
 1636 0852 B901      		std Z+1,r25
 1637 0854 00D0      		st Z,r24
 1638 0856 8983      		std Z+3,r19
 515:ssc_main.c    **** 	//printf("ret=%d\r", ret);
 516:ssc_main.c    **** 	if (ret == TRUE)
 1639               	rcall printf
 1640               		pop __tmp_reg__
 1641 0858 8981      		pop __tmp_reg__
 1642 085a 8130      		pop __tmp_reg__
 1643 085c 01F0      		pop __tmp_reg__
 1644 085e 00C0      		rjmp .L62
 517:ssc_main.c    **** 	{
 518:ssc_main.c    **** 		printf("\r\n*EER:");
 1646               	.LM104:
 1647 0860 00D0      		ldd r24,Y+4
 1648 0862 EDB7      		mov r18,r24
 1649 0864 FEB7      		clr r19
 1650 0866 3196      		sbrc r18,7
 1651 0868 80E0      		com r19
 1652 086a 90E0      		movw r24,r28
 1653 086c 9183      		adiw r24,5
 1654 086e 8083      		movw r30,r24
 1655 0870 00D0      		add r30,r18
 1656 0872 0F90      		adc r31,r19
 1657 0874 0F90      		ld r24,Z
 519:ssc_main.c    **** 		for (i = 0; i < len; ++i)
 1658               		ldi r19,lo8(0)
 1659               		rcall .
 1660 0876 1C82      		rcall .
 1661 0878 00C0      		in r30,__SP_L__
 1662               		in r31,__SP_H__
 520:ssc_main.c    **** 		{
 521:ssc_main.c    **** 			if (i != len - 1)
 1663               	 r30,1
 1664               		ldi r24,lo8(.LC12)
 1665 087a 8C81      		ldi r25,hi8(.LC12)
 1666 087c 282F      		std Z+1,r25
 1667 087e 3327      		st Z,r24
 1668 0880 27FD      		std Z+3,r19
 1669 0882 3095      		std Z+2,r18
 1670 0884 8A81      		rcall printf
 1671 0886 9927      		pop __tmp_reg__
 1672 0888 87FD      		pop __tmp_reg__
 1673 088a 9095      		pop __tmp_reg__
 1674 088c 0197      		pop __tmp_reg__
 1675 088e 2817      	.L62:
 1677 0892 01F0      	.LM105:
 522:ssc_main.c    **** 				printf("%d,", temp[i]);
 1678               	ubi r24,lo8(-(1))
 1679               		std Y+4,r24
 1680 0894 8C81      	.L60:
 1681 0896 282F      		ldd r25,Y+4
 1682 0898 3327      		ldd r24,Y+2
 1683 089a 27FD      		cp r25,r24
 1684 089c 3095      		brge .+2
 1685 089e CE01      		rjmp .L63
 1687 08a2 FC01      	.LM106:
 1688 08a4 E20F      		ldi r24,lo8(.LC13)
 1689 08a6 F31F      		ldi r25,hi8(.LC13)
 1690 08a8 8081      		rcall puts
 1692 08ac 30E0      	.LM107:
 1693 08ae 00D0      		ldi r24,lo8(1)
 1694 08b0 00D0      		std Y+13,r24
 1695 08b2 EDB7      		rjmp .L56
 1696 08b4 FEB7      	.L59:
 1698 08b8 80E0      	.LM108:
 1699 08ba 90E0      		std Y+13,__zero_reg__
 1700 08bc 9183      	.L56:
 1701 08be 8083      		ldd r24,Y+13
 1702 08c0 3383      	/* epilogue start */
 1704 08c4 00D0      	.LM109:
 1705 08c6 0F90      		adiw r28,13
 1706 08c8 0F90      		in __tmp_reg__,__SREG__
 1707 08ca 0F90      		cli
 1708 08cc 0F90      		out __SP_H__,r29
 1709 08ce 00C0      		out __SREG__,__tmp_reg__
 1710               		out __SP_L__,r28
 523:ssc_main.c    **** 			else
 524:ssc_main.c    **** 				printf("%d", temp[i]);
 1711               	cyrd, .-rt_cyrd
 1719 08dc 0596      	.Lscope9:
 1720 08de FC01      		.data
 1721 08e0 E20F      	.LC14:
 1722 08e2 F31F      		.string	"\r\nERROR\r\n"
 1723 08e4 8081      	.LC15:
 1724 08e6 282F      		.string	"\r\nOK\r\n"
 1725 08e8 30E0      		.text
 1727 08ec 00D0      	.global	rtcmd_main_handle
 1729 08f0 FEB7      	rtcmd_main_handle:
 1731 08f4 80E0      	.LM110:
 1732 08f6 90E0      	.LFBB10:
 1733 08f8 9183      		push r29
 1734 08fa 8083      		push r28
 1735 08fc 3383      		rcall .
 1736 08fe 2283      		rcall .
 1737 0900 00D0      		rcall .
 1738 0902 0F90      		in r28,__SP_L__
 1739 0904 0F90      		in r29,__SP_H__
 1740 0906 0F90      	/* prologue: function */
 1741 0908 0F90      	/* frame size = 6 */
 1743               	.LM111:
 1744               		ldi r24,lo8(.LC14)
 1745 090a 8C81      		ldi r25,hi8(.LC14)
 1746 090c 8F5F      		std Y+6,r25
 1747 090e 8C83      		std Y+5,r24
 1749 0910 9C81      	.LM112:
 1750 0912 8A81      		ldi r24,lo8(.LC15)
 1751 0914 9817      		ldi r25,hi8(.LC15)
 1752 0916 04F4      		std Y+4,r25
 1753 0918 00C0      		std Y+3,r24
 525:ssc_main.c    **** 		}
 526:ssc_main.c    **** 		printf("\r\n");
 1754               	d Y+2,__zero_reg__
 1755               		std Y+1,__zero_reg__
 1756 091a 80E0      		rjmp .L66
 1757 091c 90E0      	.L71:
 527:ssc_main.c    **** 		return TRUE;
 1759               	4:
 1760               		ldd r24,Y+1
 1761 0920 81E0      		ldd r25,Y+2
 1762 0922 8D87      		lsl r24
 1763 0924 00C0      		rol r25
 1764               		lsl r24
 528:ssc_main.c    **** 	}
 529:ssc_main.c    **** 
 530:ssc_main.c    **** 	return FALSE;
 1765               	25
 1766               		movw r30,r24
 1767 0926 1D86      		subi r30,lo8(-(g_cmmd_handles))
 1768               		sbci r31,hi8(-(g_cmmd_handles))
 1769 0928 8D85      		ld r24,Z
 1770               		ldd r25,Z+1
 531:ssc_main.c    **** }
 1771               	18,g_user_rtcmmd
 1772               		lds r19,(g_user_rtcmmd)+1
 1773 092a 2D96      		movw r22,r18
 1774 092c 0FB6      		rcall strcmp
 1775 092e F894      		sbiw r24,0
 1776 0930 DEBF      		brne .L67
 1778 0934 CDBF      	.LM115:
 1779 0936 CF91      		ldd r24,Y+1
 1780 0938 DF91      		ldd r25,Y+2
 1781 093a 0895      		lsl r24
 1782               		rol r25
 1783               		lsl r24
 1784               		rol r25
 1785               		movw r30,r24
 1786               		subi r30,lo8(-(g_cmmd_handles+2))
 1787               		sbci r31,hi8(-(g_cmmd_handles+2))
 1788               		ld r24,Z
 1789               		ldd r25,Z+1
 1790               		sbiw r24,0
 1791               		brne .+2
 1792               		rjmp .L72
 1794               	.LM116:
 1795 00dd 0D0A 4F4B 		ldd r24,Y+1
 1795      0D0A 00
 1796               		ldd r25,Y+2
 1797               		lsl r24
 1798               		rol r25
 1799               		lsl r24
 1800               		rol r25
 532:ssc_main.c    **** 
 533:ssc_main.c    **** /*
 534:ssc_main.c    **** int8_t rt_run(void)
 535:ssc_main.c    **** {
 536:ssc_main.c    **** 	// check parameters
 537:ssc_main.c    **** 	if (g_user_rtcmmd.param_count < 1)
 538:ssc_main.c    **** 	{
 539:ssc_main.c    **** 		return FALSE;
 540:ssc_main.c    **** 	}
 541:ssc_main.c    **** 
 542:ssc_main.c    **** 	g_eprom_address = 0;
 543:ssc_main.c    **** 
 544:ssc_main.c    **** 	g_startup_run_pg = atoi(g_user_rtcmmd.params[0]);
 545:ssc_main.c    **** 
 546:ssc_main.c    **** 	eeprom_busy_wait();
 547:ssc_main.c    **** 	eeprom_write_byte(&g_eprom_auto_run, g_startup_run_pg);
 548:ssc_main.c    **** 
 549:ssc_main.c    **** 	if (g_startup_run_pg)
 550:ssc_main.c    **** 	{
 551:ssc_main.c    **** 		return run_user_programm();
 552:ssc_main.c    **** 	}
 553:ssc_main.c    **** 
 554:ssc_main.c    **** 	return TRUE;
 555:ssc_main.c    **** }
 556:ssc_main.c    **** ;
 557:ssc_main.c    **** 
 558:ssc_main.c    **** 
 559:ssc_main.c    **** static int8_t run_user_programm(void)
 560:ssc_main.c    **** {
 561:ssc_main.c    **** 	uint8_t cmmd_type = 0;
 562:ssc_main.c    **** 	uint8_t cmmd_len = 0;
 563:ssc_main.c    **** 	union LD_BASIC_CMMD basic_cmmd;
 564:ssc_main.c    **** 	while (TRUE)
 565:ssc_main.c    **** 	{
 566:ssc_main.c    **** 
 567:ssc_main.c    **** 		// read command
 568:ssc_main.c    **** 		if (TRUE != avr_ee24xx_read_buffer(g_eprom_address, 1, &cmmd_type))
 569:ssc_main.c    **** 		{
 570:ssc_main.c    **** 			return FALSE;
 571:ssc_main.c    **** 		}
 572:ssc_main.c    **** 		//printf("t%d\r", cmmd_type);
 573:ssc_main.c    **** 
 574:ssc_main.c    **** 		g_eprom_address += sizeof(cmmd_type);
 575:ssc_main.c    **** 
 576:ssc_main.c    **** 		// command with data
 577:ssc_main.c    **** 		if (cmmd_type < LDB_CMMD_END)
 578:ssc_main.c    **** 		{
 579:ssc_main.c    **** 			cmmd_len = LD_BAISIC_CMMD_LENS[cmmd_type];
 580:ssc_main.c    **** 			//printf("l%d\r", cmmd_len);
 581:ssc_main.c    **** 
 582:ssc_main.c    **** 			if (TRUE != avr_ee24xx_read_buffer(g_eprom_address, cmmd_len,
 583:ssc_main.c    **** 					(uint8_t*) &basic_cmmd))
 584:ssc_main.c    **** 			{
 585:ssc_main.c    **** 				return FALSE;
 586:ssc_main.c    **** 			}
 587:ssc_main.c    **** 
 588:ssc_main.c    **** 			g_eprom_address += cmmd_len;
 589:ssc_main.c    **** 
 590:ssc_main.c    **** 			switch (cmmd_type)
 591:ssc_main.c    **** 			{
 592:ssc_main.c    **** 			case LDB_CMMD_MOOV:
 593:ssc_main.c    **** 			{
 594:ssc_main.c    **** 				//printf("p%d,p%d,s%d\r", basic_cmmd.cmmd_moov.pin, basic_cmmd.cmmd_moov.postion, basic_cmmd.cm
 595:ssc_main.c    **** 				if (basic_cmmd.cmmd_moov.postion >= MIN_POSITION
 596:ssc_main.c    **** 						&& basic_cmmd.cmmd_moov.postion <= MAX_POSITION)
 597:ssc_main.c    **** 				{
 598:ssc_main.c    **** 
 599:ssc_main.c    **** 					int16_t
 600:ssc_main.c    **** 							pos_space =
 601:ssc_main.c    **** 									basic_cmmd.cmmd_moov.postion
 602:ssc_main.c    **** 											- g_runtime_svrs[basic_cmmd.cmmd_moov.pin].save_position_us;
 603:ssc_main.c    **** 					g_runtime_svrs[basic_cmmd.cmmd_moov.pin].save_position_us
 604:ssc_main.c    **** 							= basic_cmmd.cmmd_moov.postion;
 605:ssc_main.c    **** 
 606:ssc_main.c    **** 					g_runtime_svrs[basic_cmmd.cmmd_moov.pin].speed = pos_space
 607:ssc_main.c    **** 							> 0 ? abs(basic_cmmd.cmmd_moov.speed)
 608:ssc_main.c    **** 							: -abs(basic_cmmd.cmmd_moov.speed);
 609:ssc_main.c    **** 					if (g_runtime_svrs[basic_cmmd.cmmd_moov.pin].speed == 0)
 610:ssc_main.c    **** 					{
 611:ssc_main.c    **** 						g_runtime_svrs[basic_cmmd.cmmd_moov.pin].speed
 612:ssc_main.c    **** 								= pos_space;
 613:ssc_main.c    **** 					}
 614:ssc_main.c    **** 				}
 615:ssc_main.c    **** 			}
 616:ssc_main.c    **** 				break;
 617:ssc_main.c    **** 			case LDB_CMMD_SLEEP:
 618:ssc_main.c    **** 			{
 619:ssc_main.c    **** 				//printf("sl%d\r", basic_cmmd.cmmd_sleep.sleep_ms);
 620:ssc_main.c    **** 				while (basic_cmmd.cmmd_sleep.sleep_ms--)
 621:ssc_main.c    **** 				{
 622:ssc_main.c    **** 					_delay_loop_2(4000);
 623:ssc_main.c    **** 					_delay_loop_2(4000);
 624:ssc_main.c    **** 				}
 625:ssc_main.c    **** 			}
 626:ssc_main.c    **** 				break;
 627:ssc_main.c    **** 			case LDB_CMMD_JUMP:
 628:ssc_main.c    **** 			{
 629:ssc_main.c    **** 				//printf("jump %d\r", basic_cmmd.cmmd_jump.address);
 630:ssc_main.c    **** 				g_eprom_address = basic_cmmd.cmmd_jump.address;
 631:ssc_main.c    **** 				return TRUE;
 632:ssc_main.c    **** 			}
 633:ssc_main.c    **** 				break;
 634:ssc_main.c    **** 			}
 635:ssc_main.c    **** 		}
 636:ssc_main.c    **** 		// command without data
 637:ssc_main.c    **** 		else
 638:ssc_main.c    **** 		{
 639:ssc_main.c    **** 			switch (cmmd_type)
 640:ssc_main.c    **** 			{
 641:ssc_main.c    **** 			case LDB_CMMD_END:
 642:ssc_main.c    **** 				return TRUE;
 643:ssc_main.c    **** 			}
 644:ssc_main.c    **** 
 645:ssc_main.c    **** 			return FALSE;
 646:ssc_main.c    **** 		}
 647:ssc_main.c    **** 
 648:ssc_main.c    **** 	}
 649:ssc_main.c    **** }
 650:ssc_main.c    **** */
 651:ssc_main.c    **** 
 652:ssc_main.c    **** /**
 653:ssc_main.c    ****  * AT-Command main handle
 654:ssc_main.c    ****  */
 655:ssc_main.c    **** void rtcmd_main_handle(void)
 656:ssc_main.c    **** {
 1801               	g_cmmd_handles+2))
 1802               		sbci r31,hi8(-(g_cmmd_handles+2))
 1803               		ld __tmp_reg__,Z+
 1804 093c DF93      		ld r31,Z
 1805 093e CF93      		mov r30,__tmp_reg__
 1806 0940 00D0      		icall
 1807 0942 00D0      		tst r24
 1808 0944 00D0      		breq .L69
 1810 0948 DEB7      	.LM117:
 1811               		rcall .
 1812               		in r30,__SP_L__
 657:ssc_main.c    **** 	const char* ERROR_STR = "\r\nERROR\r\n";
 1813               	_H__
 1814               		adiw r30,1
 1815 094a 80E0      		ldd r24,Y+3
 1816 094c 90E0      		ldd r25,Y+4
 1817 094e 9E83      		std Z+1,r25
 1818 0950 8D83      		st Z,r24
 658:ssc_main.c    **** 	const char* OK_STR = "\r\nOK\r\n";
 1819               	 printf
 1820               		pop __tmp_reg__
 1821 0952 80E0      		pop __tmp_reg__
 1822 0954 90E0      		rjmp .L72
 1823 0956 9C83      	.L69:
 659:ssc_main.c    **** 	int i;
 660:ssc_main.c    **** 	for (i = 0; i < SIZEOF(g_cmmd_handles); ++i)
 1825               	:
 1826               		rcall .
 1827 095a 1A82      		in r30,__SP_L__
 1828 095c 1982      		in r31,__SP_H__
 1829 095e 00C0      		adiw r30,1
 1830               		ldd r24,Y+5
 661:ssc_main.c    **** 	{
 662:ssc_main.c    **** 		if (0 == strcmp(g_cmmd_handles[i].cmmd, g_user_rtcmmd.cmmd))
 1831               	25,Y+6
 1832               		std Z+1,r25
 1833 0960 8981      		st Z,r24
 1834 0962 9A81      		rcall printf
 1835 0964 880F      		pop __tmp_reg__
 1836 0966 991F      		pop __tmp_reg__
 1837 0968 880F      		rjmp .L72
 1838 096a 991F      	.L67:
 1840 096e E050      	.LM119:
 1841 0970 F040      		ldd r24,Y+1
 1842 0972 8081      		ldd r25,Y+2
 1843 0974 9181      		adiw r24,1
 1844 0976 2091 0000 		std Y+2,r25
 1845 097a 3091 0000 		std Y+1,r24
 1846 097e B901      	.L66:
 1847 0980 00D0      		ldd r24,Y+1
 1848 0982 0097      		ldd r25,Y+2
 1849 0984 01F4      		cpi r24,7
 663:ssc_main.c    **** 		{
 664:ssc_main.c    **** 			if (g_cmmd_handles[i].cmmd_handle)
 1850               	__
 1851               		brsh .+2
 1852 0986 8981      		rjmp .L71
 1854 098a 880F      	.LM120:
 1855 098c 991F      		ldd r24,Y+1
 1856 098e 880F      		ldd r25,Y+2
 1857 0990 991F      		cpi r24,7
 1858 0992 FC01      		cpc r25,__zero_reg__
 1859 0994 E050      		brlo .L72
 1861 0998 8081      	.LM121:
 1862 099a 9181      		rcall .
 1863 099c 0097      		in r30,__SP_L__
 1864 099e 01F4      		in r31,__SP_H__
 1865 09a0 00C0      		adiw r30,1
 665:ssc_main.c    **** 			{
 666:ssc_main.c    **** 				if (g_cmmd_handles[i].cmmd_handle())
 1866               	d r25,Y+6
 1867               		std Z+1,r25
 1868 09a2 8981      		st Z,r24
 1869 09a4 9A81      		rcall printf
 1870 09a6 880F      		pop __tmp_reg__
 1871 09a8 991F      		pop __tmp_reg__
 1872 09aa 880F      	.L72:
 1873 09ac 991F      	/* epilogue start */
 1875 09b0 E050      	.LM122:
 1876 09b2 F040      		adiw r28,6
 1877 09b4 0190      		in __tmp_reg__,__SREG__
 1878 09b6 F081      		cli
 1879 09b8 E02D      		out __SP_H__,r29
 1880 09ba 0995      		out __SREG__,__tmp_reg__
 1881 09bc 8823      		out __SP_L__,r28
 1882 09be 01F0      		pop r28
 667:ssc_main.c    **** 					printf(OK_STR);
 1883               	ize	rtcmd_main_handle, .-rtcmd_main_handle
 1889 09c8 8B81      	.Lscope10:
 1892 09ce 8083      	InitTimer:
 1894 09d2 0F90      	.LM123:
 1895 09d4 0F90      	.LFBB11:
 1896 09d6 00C0      		push r29
 1897               		push r28
 668:ssc_main.c    **** 				else
 669:ssc_main.c    **** 					printf(ERROR_STR);
 1898               	_
 1899               		in r29,__SP_H__
 1900 09d8 00D0      	/* prologue: function */
 1901 09da EDB7      	/* frame size = 0 */
 1903 09de 3196      	.LM124:
 1904 09e0 8D81      		ldi r30,lo8(83)
 1905 09e2 9E81      		ldi r31,hi8(83)
 1906 09e4 9183      		ldi r24,lo8(4)
 1907 09e6 8083      		st Z,r24
 1909 09ea 0F90      	.LM125:
 1910 09ec 0F90      		ldi r26,lo8(89)
 1911 09ee 00C0      		ldi r27,hi8(89)
 1912               		ldi r30,lo8(89)
 1913               		ldi r31,hi8(89)
 1914               		ld r24,Z
 1915 09f0 8981      		ori r24,lo8(1)
 1916 09f2 9A81      		st X,r24
 1918 09f6 9A83      	.LM126:
 1919 09f8 8983      		ldi r30,lo8(82)
 1920               		ldi r31,hi8(82)
 1921 09fa 8981      		ldi r24,lo8(-78)
 1922 09fc 9A81      		st Z,r24
 1924 0a00 9105      	.LM127:
 1925 0a02 00F4      		ldi r26,lo8(78)
 1926 0a04 00C0      		ldi r27,hi8(78)
 670:ssc_main.c    **** 			};
 671:ssc_main.c    **** 			return;
 672:ssc_main.c    **** 		}
 673:ssc_main.c    **** 	}
 674:ssc_main.c    **** 
 675:ssc_main.c    **** 	if (i >= SIZEOF(g_cmmd_handles))
 1927               	(78)
 1928               		ld r24,Z
 1929 0a06 8981      		ori r24,lo8(2)
 1930 0a08 9A81      		st X,r24
 1931 0a0a 8730      	/* epilogue start */
 1933 0a0e 00F0      	.LM128:
 676:ssc_main.c    **** 	{
 677:ssc_main.c    **** 		printf(ERROR_STR);
 1934               	8
 1935               		pop r29
 1936 0a10 00D0      		ret
 1938 0a14 FEB7      	.Lscope11:
 1941 0a1a 9E81      	InitSVRGPIO:
 1943 0a1e 8083      	.LM129:
 1944 0a20 00D0      	.LFBB12:
 1945 0a22 0F90      		push r29
 1946 0a24 0F90      		push r28
 1947               		in r28,__SP_L__
 1948               		in r29,__SP_H__
 678:ssc_main.c    **** 	}
 679:ssc_main.c    **** }
 1949               	nction */
 1950               	/* frame size = 0 */
 1952 0a28 0FB6      	.LM130:
 1953 0a2a F894      		ldi r26,lo8(52)
 1954 0a2c DEBF      		ldi r27,hi8(52)
 1955 0a2e 0FBE      		ldi r30,lo8(52)
 1956 0a30 CDBF      		ldi r31,hi8(52)
 1957 0a32 CF91      		ld r24,Z
 1958 0a34 DF91      		ori r24,lo8(15)
 1959 0a36 0895      		st X,r24
 1961               	.LM131:
 1962               		ldi r26,lo8(49)
 1963               		ldi r27,hi8(49)
 1964               		ldi r30,lo8(49)
 1965               		ldi r31,hi8(49)
 1966               		ld r24,Z
 1967               		ori r24,lo8(-16)
 1968               		st X,r24
 680:ssc_main.c    **** 
 681:ssc_main.c    **** /**
 682:ssc_main.c    ****  * Initialize Timer for generating PWM signal
 683:ssc_main.c    ****  */
 684:ssc_main.c    **** static void InitTimer(void)
 685:ssc_main.c    **** {
 1970               	53)
 1971               		ldi r31,hi8(53)
 1972               		ldi r24,lo8(16)
 1973 0a38 DF93      		st Z,r24
 1975 0a3c CDB7      	.LM133:
 1976 0a3e DEB7      		ldi r30,lo8(53)
 1977               		ldi r31,hi8(53)
 1978               		ldi r24,lo8(32)
 686:ssc_main.c    **** 
 687:ssc_main.c    **** 	// TIMER0 нциокх ck/256
 688:ssc_main.c    **** 	TCCR0 = _BV(CS02);
 1979               	
 1980               	/* epilogue start */
 1982 0a42 F0E0      	.LM134:
 1983 0a44 84E0      		pop r28
 1984 0a46 8083      		pop r29
 689:ssc_main.c    **** 	TIMSK |= _BV(TOIE0);
 1986               	.Lscope12:
 1988 0a4a B0E0      	.global	__vector_8
 1990 0a4e F0E0      	__vector_8:
 1992 0a52 8160      	.LM135:
 1993 0a54 8C93      	.LFBB13:
 690:ssc_main.c    **** 	TCNT0 = 0xB2;
 1994               	ero_reg__
 1995               		push r0
 1996 0a56 E2E5      		in r0,__SREG__
 1997 0a58 F0E0      		push r0
 1998 0a5a 82EB      		clr __zero_reg__
 1999 0a5c 8083      		push r18
 691:ssc_main.c    **** 
 692:ssc_main.c    **** 	// TIMER1, clkI/O/8
 693:ssc_main.c    **** 	TCCR1B |= _BV(CS11);
 2000               	r19
 2001               		push r20
 2002 0a5e AEE4      		push r24
 2003 0a60 B0E0      		push r25
 2004 0a62 EEE4      		push r26
 2005 0a64 F0E0      		push r27
 2006 0a66 8081      		push r30
 2007 0a68 8260      		push r31
 2008 0a6a 8C93      		push r29
 2009               		push r28
 694:ssc_main.c    **** }
 2010               	SP_L__
 2011               		in r29,__SP_H__
 2012 0a6c CF91      	/* prologue: Signal */
 2013 0a6e DF91      	/* frame size = 0 */
 2015               	.LM136:
 2016               		lds r24,g_active_svr_idx
 2017               		lds r25,(g_active_svr_idx)+1
 2018               		tst r25
 2019               		brlt .L78
 695:ssc_main.c    **** 
 696:ssc_main.c    **** /**
 697:ssc_main.c    ****  * Initialize SVR Motor PWM IO Pins
 698:ssc_main.c    ****  */
 699:ssc_main.c    **** static void InitSVRGPIO(void)
 700:ssc_main.c    **** {
 2020               	_active_svr_idx
 2021               		lds r25,(g_active_svr_idx)+1
 2022               		cpi r24,4
 2023 0a72 DF93      		cpc r25,__zero_reg__
 2024 0a74 CF93      		brge .L78
 2026 0a78 DEB7      	.LM137:
 2027               		ldi r26,lo8(53)
 2028               		ldi r27,hi8(53)
 701:ssc_main.c    **** 	// OUTPUT
 702:ssc_main.c    **** 	DDRC |= _BV(SVR1) | _BV(SVR2) | _BV(SVR3) | _BV(SVR4);
 2029               	lo8(53)
 2030               		ldi r31,hi8(53)
 2031 0a7a A4E3      		ld r24,Z
 2032 0a7c B0E0      		mov r20,r24
 2033 0a7e E4E3      		lds r24,g_active_svr_idx
 2034 0a80 F0E0      		lds r25,(g_active_svr_idx)+1
 2035 0a82 8081      		movw r30,r24
 2036 0a84 8F60      		subi r30,lo8(-(g_svr_gpios))
 2037 0a86 8C93      		sbci r31,hi8(-(g_svr_gpios))
 703:ssc_main.c    **** 	DDRD |= _BV(SVR5) | _BV(SVR6) | _BV(SVR7) | _BV(SVR8);
 2038               	
 2039               		mov r18,r24
 2040 0a88 A1E3      		ldi r19,lo8(0)
 2041 0a8a B0E0      		ldi r24,lo8(1)
 2042 0a8c E1E3      		ldi r25,hi8(1)
 2043 0a8e F0E0      		mov r0,r18
 2044 0a90 8081      		rjmp 2f
 2045 0a92 806F      	1:	lsl r24
 2046 0a94 8C93      		rol r25
 704:ssc_main.c    **** 
 705:ssc_main.c    **** 	// enable upload R
 706:ssc_main.c    **** 	PORTC = _BV(PC4); // i2c SCL
 2047               	0
 2048               		brpl 1b
 2049 0a96 E5E3      		com r24
 2050 0a98 F0E0      		and r24,r20
 2051 0a9a 80E1      		st X,r24
 2052 0a9c 8083      		rjmp .L79
 707:ssc_main.c    **** 	PORTC = _BV(PC5); // i2c SDA
 2054               	.LM138:
 2055 0a9e E5E3      		ldi r26,lo8(50)
 2056 0aa0 F0E0      		ldi r27,hi8(50)
 2057 0aa2 80E2      		ldi r30,lo8(50)
 2058 0aa4 8083      		ldi r31,hi8(50)
 2059               		ld r24,Z
 708:ssc_main.c    **** 
 709:ssc_main.c    **** 	//avr_ee24xx_init();
 710:ssc_main.c    **** 	//TWBR = 8;
 711:ssc_main.c    **** 	//TWCR|=1<<TWEN;
 712:ssc_main.c    **** }
 2060               	0,r24
 2061               		lds r24,g_active_svr_idx
 2062 0aa6 CF91      		lds r25,(g_active_svr_idx)+1
 2063 0aa8 DF91      		movw r30,r24
 2064 0aaa 0895      		subi r30,lo8(-(g_svr_gpios))
 2065               		sbci r31,hi8(-(g_svr_gpios))
 2066               		ld r24,Z
 2067               		mov r18,r24
 2068               		ldi r19,lo8(0)
 2069               		ldi r24,lo8(1)
 2070               		ldi r25,hi8(1)
 713:ssc_main.c    **** 
 714:ssc_main.c    **** /**
 715:ssc_main.c    ****  * TIMER1 to hold time for SVR PWM
 716:ssc_main.c    ****  *
 717:ssc_main.c    ****  * T = delay time 500us ~ 2400us
 718:ssc_main.c    ****  */
 719:ssc_main.c    **** ISR( TIMER1_OVF_vect )
 720:ssc_main.c    **** {
 2071               		lsl r24
 2072               		rol r25
 2073               	2:	dec r18
 2074 0aac 1F92      		brpl 1b
 2075 0aae 0F92      		com r24
 2076 0ab0 0FB6      		and r24,r20
 2077 0ab2 0F92      		st X,r24
 2078 0ab4 1124      	.L79:
 2080 0ab8 3F93      	.LM139:
 2081 0aba 4F93      		ldi r26,lo8(89)
 2082 0abc 8F93      		ldi r27,hi8(89)
 2083 0abe 9F93      		ldi r30,lo8(89)
 2084 0ac0 AF93      		ldi r31,hi8(89)
 2085 0ac2 BF93      		ld r24,Z
 2086 0ac4 EF93      		andi r24,lo8(-5)
 2087 0ac6 FF93      		st X,r24
 2089 0aca CF93      	.LM140:
 2090 0acc CDB7      		ldi r26,lo8(88)
 2091 0ace DEB7      		ldi r27,hi8(88)
 2092               		ldi r30,lo8(88)
 2093               		ldi r31,hi8(88)
 721:ssc_main.c    **** 	if (g_active_svr_idx >= 0 && g_active_svr_idx < 4)
 2094               	(-5)
 2095               		st X,r24
 2096 0ad0 8091 0000 	/* epilogue start */
 2098 0ad8 9923      	.LM141:
 2099 0ada 04F0      		pop r28
 2100 0adc 8091 0000 		pop r29
 2101 0ae0 9091 0000 		pop r31
 2102 0ae4 8430      		pop r30
 2103 0ae6 9105      		pop r27
 2104 0ae8 04F4      		pop r26
 722:ssc_main.c    **** 	{
 723:ssc_main.c    **** 		PORTC &= ~_BV(g_svr_gpios[g_active_svr_idx]);
 2105               	op r24
 2106               		pop r20
 2107 0aea A5E3      		pop r19
 2108 0aec B0E0      		pop r18
 2109 0aee E5E3      		pop r0
 2110 0af0 F0E0      		out __SREG__,r0
 2111 0af2 8081      		pop r0
 2112 0af4 482F      		pop __zero_reg__
 2113 0af6 8091 0000 		reti
 2115 0afe FC01      	.Lscope13:
 2117 0b02 F040      	.global	__vector_9
 2119 0b06 282F      	__vector_9:
 2121 0b0a 81E0      	.LM142:
 2122 0b0c 90E0      	.LFBB14:
 2123 0b0e 022E      		push __zero_reg__
 2124 0b10 00C0      		push r0
 2125 0b12 880F      		in r0,__SREG__
 2126 0b14 991F      		push r0
 2127 0b16 0A94      		clr __zero_reg__
 2128 0b18 02F4      		push r18
 2129 0b1a 8095      		push r19
 2130 0b1c 8423      		push r20
 2131 0b1e 8C93      		push r21
 2132 0b20 00C0      		push r24
 2133               		push r25
 724:ssc_main.c    **** 	}
 725:ssc_main.c    **** 
 726:ssc_main.c    **** 	else
 727:ssc_main.c    **** 	{
 728:ssc_main.c    **** 		PORTD &= ~_BV(g_svr_gpios[g_active_svr_idx]);
 2134               	
 2135               		push r31
 2136 0b22 A2E3      		push r29
 2137 0b24 B0E0      		push r28
 2138 0b26 E2E3      		rcall .
 2139 0b28 F0E0      		rcall .
 2140 0b2a 8081      		rcall .
 2141 0b2c 482F      		in r28,__SP_L__
 2142 0b2e 8091 0000 		in r29,__SP_H__
 2143 0b32 9091 0000 	/* prologue: Signal */
 2144 0b36 FC01      	/* frame size = 6 */
 2146 0b3a F040      	.LM143:
 2147 0b3c 8081      		ldi r30,lo8(82)
 2148 0b3e 282F      		ldi r31,hi8(82)
 2149 0b40 30E0      		ldi r24,lo8(-78)
 2150 0b42 81E0      		st Z,r24
 2152 0b46 00C0      	.LM144:
 2153 0b48 880F      		lds r24,g_active_svr_idx
 2154 0b4a 991F      		lds r25,(g_active_svr_idx)+1
 2155 0b4c 2A95      		adiw r24,1
 2156 0b4e 02F4      		sts (g_active_svr_idx)+1,r25
 2157 0b50 8095      		sts g_active_svr_idx,r24
 2159 0b54 8C93      	.LM145:
 2160               		lds r24,g_active_svr_idx
 729:ssc_main.c    **** 	}
 730:ssc_main.c    **** 
 731:ssc_main.c    **** 	TIMSK &= ~_BV(TOIE1);
 2161               	)+1
 2162               		cpi r24,8
 2163 0b56 A9E5      		cpc r25,__zero_reg__
 2164 0b58 B0E0      		brge .L82
 2165 0b5a E9E5      		lds r18,g_active_svr_idx
 2166 0b5c F0E0      		lds r19,(g_active_svr_idx)+1
 2167 0b5e 8081      		std Y+6,r19
 2168 0b60 8B7F      		std Y+5,r18
 2169 0b62 8C93      		rjmp .L83
 732:ssc_main.c    **** 	TIFR &= ~_BV(TOV1);
 2170               	d Y+6,__zero_reg__
 2171               		std Y+5,__zero_reg__
 2172 0b64 A8E5      	.L83:
 2173 0b66 B0E0      		ldd r20,Y+5
 2174 0b68 E8E5      		ldd r21,Y+6
 2175 0b6a F0E0      		sts (g_active_svr_idx)+1,r21
 2176 0b6c 8081      		sts g_active_svr_idx,r20
 2178 0b70 8C93      	.LM146:
 2179               		lds r24,g_active_svr_idx
 733:ssc_main.c    **** }
 2180               	g_active_svr_idx)+1
 2181               		lsl r24
 2182 0b72 CF91      		rol r25
 2183 0b74 DF91      		lsl r24
 2184 0b76 FF91      		rol r25
 2185 0b78 EF91      		lsl r24
 2186 0b7a BF91      		rol r25
 2187 0b7c AF91      		movw r30,r24
 2188 0b7e 9F91      		subi r30,lo8(-(g_runtime_svrs+4))
 2189 0b80 8F91      		sbci r31,hi8(-(g_runtime_svrs+4))
 2190 0b82 4F91      		ld r24,Z
 2191 0b84 3F91      		ldd r25,Z+1
 2192 0b86 2F91      		ldi r21,hi8(450)
 2193 0b88 0F90      		cpi r24,lo8(450)
 2194 0b8a 0FBE      		cpc r25,r21
 2195 0b8c 0F90      		brge .+2
 2196 0b8e 1F90      		rjmp .L90
 2197 0b90 1895      		lds r24,g_active_svr_idx
 2198               		lds r25,(g_active_svr_idx)+1
 2199               		lsl r24
 2200               		rol r25
 2201               		lsl r24
 2202               		rol r25
 2203               		lsl r24
 734:ssc_main.c    **** 
 735:ssc_main.c    **** /**
 736:ssc_main.c    ****  * TIMER0 to hold 2.5ms for 8 channels
 737:ssc_main.c    ****  */
 738:ssc_main.c    **** ISR( TIMER0_OVF_vect )
 739:ssc_main.c    **** {
 2204               	subi r30,lo8(-(g_runtime_svrs+4))
 2205               		sbci r31,hi8(-(g_runtime_svrs+4))
 2206               		ld r24,Z
 2207 0b92 1F92      		ldd r25,Z+1
 2208 0b94 0F92      		ldi r18,hi8(450)
 2209 0b96 0FB6      		cpi r24,lo8(450)
 2210 0b98 0F92      		cpc r25,r18
 2211 0b9a 1124      		brge .+2
 2212 0b9c 2F93      		rjmp .L90
 2214 0ba0 4F93      	.LM147:
 2215 0ba2 5F93      		lds r24,g_active_svr_idx
 2216 0ba4 8F93      		lds r25,(g_active_svr_idx)+1
 2217 0ba6 9F93      		tst r25
 2218 0ba8 AF93      		brlt .L85
 2219 0baa BF93      		lds r24,g_active_svr_idx
 2220 0bac EF93      		lds r25,(g_active_svr_idx)+1
 2221 0bae FF93      		cpi r24,4
 2222 0bb0 DF93      		cpc r25,__zero_reg__
 2223 0bb2 CF93      		brge .L85
 2225 0bb6 00D0      	.LM148:
 2226 0bb8 00D0      		ldi r26,lo8(53)
 2227 0bba CDB7      		ldi r27,hi8(53)
 2228 0bbc DEB7      		ldi r30,lo8(53)
 2229               		ldi r31,hi8(53)
 2230               		ld r24,Z
 740:ssc_main.c    **** 	// reload counter
 741:ssc_main.c    **** 	TCNT0 = 0xB2;
 2231               	ive_svr_idx
 2232               		lds r25,(g_active_svr_idx)+1
 2233 0bbe E2E5      		movw r30,r24
 2234 0bc0 F0E0      		subi r30,lo8(-(g_svr_gpios))
 2235 0bc2 82EB      		sbci r31,hi8(-(g_svr_gpios))
 2236 0bc4 8083      		ld r24,Z
 742:ssc_main.c    **** 
 743:ssc_main.c    **** 	g_active_svr_idx++;
 2237               	18,r24
 2238               		ldi r19,lo8(0)
 2239 0bc6 8091 0000 		ldi r24,lo8(1)
 2240 0bca 9091 0000 		ldi r25,hi8(1)
 2241 0bce 0196      		mov r0,r18
 2242 0bd0 9093 0000 		rjmp 2f
 2243 0bd4 8093 0000 	1:	lsl r24
 744:ssc_main.c    **** 	g_active_svr_idx = g_active_svr_idx > 7 ? 0 : g_active_svr_idx;
 2244               	5
 2245               	2:	dec r0
 2246 0bd8 8091 0000 		brpl 1b
 2247 0bdc 9091 0000 		or r24,r20
 2248 0be0 8830      		st X,r24
 2249 0be2 9105      		rjmp .L86
 2250 0be4 04F4      	.L85:
 2252 0bea 3091 0000 	.LM149:
 2253 0bee 3E83      		ldi r26,lo8(50)
 2254 0bf0 2D83      		ldi r27,hi8(50)
 2255 0bf2 00C0      		ldi r30,lo8(50)
 2256               		ldi r31,hi8(50)
 2257 0bf4 1E82      		ld r24,Z
 2258 0bf6 1D82      		mov r20,r24
 2259               		lds r24,g_active_svr_idx
 2260 0bf8 4D81      		lds r25,(g_active_svr_idx)+1
 2261 0bfa 5E81      		movw r30,r24
 2262 0bfc 5093 0000 		subi r30,lo8(-(g_svr_gpios))
 2263 0c00 4093 0000 		sbci r31,hi8(-(g_svr_gpios))
 745:ssc_main.c    **** 
 746:ssc_main.c    **** 	// set timer1 to set svr PWM
 747:ssc_main.c    **** 	if (g_runtime_svrs[g_active_svr_idx].save_position_us >= MIN_POSITION
 2264               	24
 2265               		ldi r19,lo8(0)
 2266 0c04 8091 0000 		ldi r24,lo8(1)
 2267 0c08 9091 0000 		ldi r25,hi8(1)
 2268 0c0c 880F      		rjmp 2f
 2269 0c0e 991F      	1:	lsl r24
 2270 0c10 880F      		rol r25
 2271 0c12 991F      	2:	dec r18
 2272 0c14 880F      		brpl 1b
 2273 0c16 991F      		or r24,r20
 2274 0c18 FC01      		st X,r24
 2275 0c1a E050      	.L86:
 2277 0c1e 8081      	.LM150:
 2278 0c20 9181      		ldi r26,lo8(88)
 2279 0c22 51E0      		ldi r27,hi8(88)
 2280 0c24 823C      		ldi r30,lo8(88)
 2281 0c26 9507      		ldi r31,hi8(88)
 2282 0c28 04F4      		ld r24,Z
 2283 0c2a 00C0      		andi r24,lo8(-5)
 2284 0c2c 8091 0000 		st X,r24
 2286 0c34 880F      	.LM151:
 2287 0c36 991F      		ldi r26,lo8(77)
 2288 0c38 880F      		ldi r27,hi8(77)
 2289 0c3a 991F      		lds r24,g_active_svr_idx
 2290 0c3c 880F      		lds r25,(g_active_svr_idx)+1
 2291 0c3e 991F      		lsl r24
 2292 0c40 FC01      		rol r25
 2293 0c42 E050      		lsl r24
 2294 0c44 F040      		rol r25
 2295 0c46 8081      		lsl r24
 2296 0c48 9181      		rol r25
 2297 0c4a 21E0      		movw r30,r24
 2298 0c4c 823C      		subi r30,lo8(-(g_runtime_svrs))
 2299 0c4e 9207      		sbci r31,hi8(-(g_runtime_svrs))
 2300 0c50 04F4      		ld r24,Z
 2301 0c52 00C0      		ldd r25,Z+1
 748:ssc_main.c    **** 			&& g_runtime_svrs[g_active_svr_idx].save_position_us
 749:ssc_main.c    **** 					>= MIN_POSITION)
 750:ssc_main.c    **** 	{
 751:ssc_main.c    **** 
 752:ssc_main.c    **** 		// set high
 753:ssc_main.c    **** 		if (g_active_svr_idx >= 0 && g_active_svr_idx < 4)
 2302               	m r24
 2303               		st X,r24
 2305 0c58 9091 0000 	.LM152:
 2306 0c5c 9923      		ldi r26,lo8(76)
 2307 0c5e 04F0      		ldi r27,hi8(76)
 2308 0c60 8091 0000 		lds r24,g_active_svr_idx
 2309 0c64 9091 0000 		lds r25,(g_active_svr_idx)+1
 2310 0c68 8430      		lsl r24
 2311 0c6a 9105      		rol r25
 2312 0c6c 04F4      		lsl r24
 754:ssc_main.c    **** 		{
 755:ssc_main.c    **** 			PORTC |= _BV(g_svr_gpios[g_active_svr_idx]);
 2313               	sl r24
 2314               		rol r25
 2315 0c6e A5E3      		movw r30,r24
 2316 0c70 B0E0      		subi r30,lo8(-(g_runtime_svrs))
 2317 0c72 E5E3      		sbci r31,hi8(-(g_runtime_svrs))
 2318 0c74 F0E0      		ld r24,Z
 2319 0c76 8081      		ldd r25,Z+1
 2320 0c78 482F      		com r24
 2321 0c7a 8091 0000 		st X,r24
 2323 0c82 FC01      	.LM153:
 2324 0c84 E050      		ldi r26,lo8(89)
 2325 0c86 F040      		ldi r27,hi8(89)
 2326 0c88 8081      		ldi r30,lo8(89)
 2327 0c8a 282F      		ldi r31,hi8(89)
 2328 0c8c 30E0      		ld r24,Z
 2329 0c8e 81E0      		ori r24,lo8(4)
 2330 0c90 90E0      		st X,r24
 2332 0c94 00C0      	.LM154:
 2333 0c96 880F      	/* #APP */
 2334 0c98 991F      	 ;  772 "ssc_main.c" 1
 2335 0c9a 0A94      		sei
 2336 0c9c 02F4      	 ;  0 "" 2
 2338 0ca0 8C93      	.LM155:
 2339 0ca2 00C0      	/* #NOAPP */
 2340               		lds r24,g_active_svr_idx
 756:ssc_main.c    **** 		}
 757:ssc_main.c    **** 
 758:ssc_main.c    **** 		else
 759:ssc_main.c    **** 		{
 760:ssc_main.c    **** 			PORTD |= _BV(g_svr_gpios[g_active_svr_idx]);
 2341               	1
 2342               		lsl r24
 2343 0ca4 A2E3      		rol r25
 2344 0ca6 B0E0      		lsl r24
 2345 0ca8 E2E3      		rol r25
 2346 0caa F0E0      		lsl r24
 2347 0cac 8081      		rol r25
 2348 0cae 482F      		movw r30,r24
 2349 0cb0 8091 0000 		subi r30,lo8(-(g_runtime_svrs+4))
 2350 0cb4 9091 0000 		sbci r31,hi8(-(g_runtime_svrs+4))
 2351 0cb8 FC01      		ld r18,Z
 2352 0cba E050      		ldd r19,Z+1
 2353 0cbc F040      		lds r24,g_active_svr_idx
 2354 0cbe 8081      		lds r25,(g_active_svr_idx)+1
 2355 0cc0 282F      		lsl r24
 2356 0cc2 30E0      		rol r25
 2357 0cc4 81E0      		lsl r24
 2358 0cc6 90E0      		rol r25
 2359 0cc8 00C0      		lsl r24
 2360 0cca 880F      		rol r25
 2361 0ccc 991F      		movw r30,r24
 2362 0cce 2A95      		subi r30,lo8(-(g_runtime_svrs))
 2363 0cd0 02F4      		sbci r31,hi8(-(g_runtime_svrs))
 2364 0cd2 842B      		ld r24,Z
 2365 0cd4 8C93      		ldd r25,Z+1
 2366               		movw r20,r18
 761:ssc_main.c    **** 		}
 762:ssc_main.c    **** 
 763:ssc_main.c    **** 		// олХ¤▒ЖоЙКт┴с
 764:ssc_main.c    **** 		TIFR &= ~_BV(TOV1);
 2367               		movw r24,r20
 2368               		std Y+4,r25
 2369 0cd6 A8E5      		std Y+3,r24
 2370 0cd8 B0E0      		ldd r24,Y+3
 2371 0cda E8E5      		ldd r25,Y+4
 2372 0cdc F0E0      		tst r25
 2373 0cde 8081      		brge .L87
 2374 0ce0 8B7F      		ldd r18,Y+3
 2375 0ce2 8C93      		ldd r19,Y+4
 765:ssc_main.c    **** 
 766:ssc_main.c    **** 		// ╝к╦с╝к╩§ох
 767:ssc_main.c    **** 		TCNT1H = 0xFF - (g_runtime_svrs[g_active_svr_idx].position_us >> 8); // must be first
 2376               		neg r18
 2377               		sbci r19,lo8(-1)
 2378 0ce4 ADE4      		std Y+4,r19
 2379 0ce6 B0E0      		std Y+3,r18
 2380 0ce8 8091 0000 	.L87:
 2381 0cec 9091 0000 		lds r24,g_active_svr_idx
 2382 0cf0 880F      		lds r25,(g_active_svr_idx)+1
 2383 0cf2 991F      		lsl r24
 2384 0cf4 880F      		rol r25
 2385 0cf6 991F      		lsl r24
 2386 0cf8 880F      		rol r25
 2387 0cfa 991F      		lsl r24
 2388 0cfc FC01      		rol r25
 2389 0cfe E050      		movw r30,r24
 2390 0d00 F040      		subi r30,lo8(-(g_runtime_svrs+6))
 2391 0d02 8081      		sbci r31,hi8(-(g_runtime_svrs+6))
 2392 0d04 9181      		ld r24,Z
 2393 0d06 892F      		ldd r25,Z+1
 2394 0d08 990F      		std Y+2,r25
 2395 0d0a 990B      		std Y+1,r24
 2396 0d0c 8095      		ldd r20,Y+1
 2397 0d0e 8C93      		ldd r21,Y+2
 768:ssc_main.c    **** 		TCNT1L = 0xFF - (g_runtime_svrs[g_active_svr_idx].position_us & 0xFF);
 2398               	dd r24,Y+1
 2399               		ldd r25,Y+2
 2400 0d10 ACE4      		com r25
 2401 0d12 B0E0      		neg r24
 2402 0d14 8091 0000 		sbci r25,lo8(-1)
 2403 0d18 9091 0000 		std Y+2,r25
 2404 0d1c 880F      		std Y+1,r24
 2405 0d1e 991F      	.L88:
 2406 0d20 880F      		ldd r18,Y+3
 2407 0d22 991F      		ldd r19,Y+4
 2408 0d24 880F      		ldd r20,Y+1
 2409 0d26 991F      		ldd r21,Y+2
 2410 0d28 FC01      		cp r20,r18
 2411 0d2a E050      		cpc r21,r19
 2412 0d2c F040      		brlt .L89
 2414 0d30 9181      	.LM156:
 2415 0d32 8095      		lds r20,g_active_svr_idx
 2416 0d34 8C93      		lds r21,(g_active_svr_idx)+1
 769:ssc_main.c    **** 
 770:ssc_main.c    **** 		// олХ¤н╩ль
 771:ssc_main.c    **** 		TIMSK |= _BV(TOIE1);
 2417               	vr_idx
 2418               		lds r25,(g_active_svr_idx)+1
 2419 0d36 A9E5      		lsl r24
 2420 0d38 B0E0      		rol r25
 2421 0d3a E9E5      		lsl r24
 2422 0d3c F0E0      		rol r25
 2423 0d3e 8081      		lsl r24
 2424 0d40 8460      		rol r25
 2425 0d42 8C93      		movw r30,r24
 772:ssc_main.c    **** 		sei();
 2426               	,lo8(-(g_runtime_svrs+4))
 2427               		sbci r31,hi8(-(g_runtime_svrs+4))
 2428               		ld r18,Z
 2429               		ldd r19,Z+1
 2430 0d44 7894      		movw r24,r20
 2431               		lsl r24
 773:ssc_main.c    **** 
 774:ssc_main.c    **** 		// assign new position_us
 775:ssc_main.c    **** 		if (abs(g_runtime_svrs[g_active_svr_idx].save_position_us - g_runtime_svrs[g_active_svr_idx].posi
 2432               	25
 2433               		lsl r24
 2434               		rol r25
 2435 0d46 8091 0000 		lsl r24
 2436 0d4a 9091 0000 		rol r25
 2437 0d4e 880F      		movw r30,r24
 2438 0d50 991F      		subi r30,lo8(-(g_runtime_svrs))
 2439 0d52 880F      		sbci r31,hi8(-(g_runtime_svrs))
 2440 0d54 991F      		std Z+1,r19
 2441 0d56 880F      		st Z,r18
 2442 0d58 991F      		rjmp .L90
 2443 0d5a FC01      	.L89:
 2445 0d5e F040      	.LM157:
 2446 0d60 2081      		lds r20,g_active_svr_idx
 2447 0d62 3181      		lds r21,(g_active_svr_idx)+1
 2448 0d64 8091 0000 		lds r24,g_active_svr_idx
 2449 0d68 9091 0000 		lds r25,(g_active_svr_idx)+1
 2450 0d6c 880F      		lsl r24
 2451 0d6e 991F      		rol r25
 2452 0d70 880F      		lsl r24
 2453 0d72 991F      		rol r25
 2454 0d74 880F      		lsl r24
 2455 0d76 991F      		rol r25
 2456 0d78 FC01      		movw r30,r24
 2457 0d7a E050      		subi r30,lo8(-(g_runtime_svrs))
 2458 0d7c F040      		sbci r31,hi8(-(g_runtime_svrs))
 2459 0d7e 8081      		ld r18,Z
 2460 0d80 9181      		ldd r19,Z+1
 2461 0d82 A901      		lds r24,g_active_svr_idx
 2462 0d84 481B      		lds r25,(g_active_svr_idx)+1
 2463 0d86 590B      		lsl r24
 2464 0d88 CA01      		rol r25
 2465 0d8a 9C83      		lsl r24
 2466 0d8c 8B83      		rol r25
 2467 0d8e 8B81      		lsl r24
 2468 0d90 9C81      		rol r25
 2469 0d92 9923      		movw r30,r24
 2470 0d94 04F4      		subi r30,lo8(-(g_runtime_svrs+6))
 2471 0d96 2B81      		sbci r31,hi8(-(g_runtime_svrs+6))
 2472 0d98 3C81      		ld r24,Z
 2473 0d9a 3095      		ldd r25,Z+1
 2474 0d9c 2195      		add r18,r24
 2475 0d9e 3F4F      		adc r19,r25
 2476 0da0 3C83      		movw r24,r20
 2477 0da2 2B83      		lsl r24
 2478               		rol r25
 2479 0da4 8091 0000 		lsl r24
 2480 0da8 9091 0000 		rol r25
 2481 0dac 880F      		lsl r24
 2482 0dae 991F      		rol r25
 2483 0db0 880F      		movw r30,r24
 2484 0db2 991F      		subi r30,lo8(-(g_runtime_svrs))
 2485 0db4 880F      		sbci r31,hi8(-(g_runtime_svrs))
 2486 0db6 991F      		std Z+1,r19
 2487 0db8 FC01      		st Z,r18
 2488 0dba E050      	.L90:
 2489 0dbc F040      	/* epilogue start */
 2491 0dc0 9181      	.LM158:
 2492 0dc2 9A83      		adiw r28,6
 2493 0dc4 8983      		out __SP_H__,r29
 2494 0dc6 4981      		out __SP_L__,r28
 2495 0dc8 5A81      		pop r28
 2496 0dca 5523      		pop r29
 2497 0dcc 04F4      		pop r31
 2498 0dce 8981      		pop r30
 2499 0dd0 9A81      		pop r27
 2500 0dd2 9095      		pop r26
 2501 0dd4 8195      		pop r25
 2502 0dd6 9F4F      		pop r24
 2503 0dd8 9A83      		pop r21
 2504 0dda 8983      		pop r20
 2505               		pop r19
 2506 0ddc 2B81      		pop r18
 2507 0dde 3C81      		pop r0
 2508 0de0 4981      		out __SREG__,r0
 2509 0de2 5A81      		pop r0
 2510 0de4 4217      		pop __zero_reg__
 2511 0de6 5307      		reti
 776:ssc_main.c    **** 				<= abs(g_runtime_svrs[g_active_svr_idx].speed))
 777:ssc_main.c    **** 		{
 778:ssc_main.c    **** 			g_runtime_svrs[g_active_svr_idx].position_us
 2513               	ction
 2514               	init_board:
 2516 0dee 5091 0000 	.LM159:
 2517 0df2 8091 0000 	.LFBB15:
 2518 0df6 9091 0000 		push r29
 2519 0dfa 880F      		push r28
 2520 0dfc 991F      		push __tmp_reg__
 2521 0dfe 880F      		in r28,__SP_L__
 2522 0e00 991F      		in r29,__SP_H__
 2523 0e02 880F      	/* prologue: function */
 2524 0e04 991F      	/* frame size = 1 */
 2526 0e08 E050      	.LM160:
 2527 0e0a F040      		std Y+1,__zero_reg__
 2529 0e0e 3181      	.LM161:
 2530 0e10 CA01      	/* #APP */
 2531 0e12 880F      	 ;  802 "ssc_main.c" 1
 2532 0e14 991F      		cli
 2533 0e16 880F      	 ;  0 "" 2
 2535 0e1a 880F      	.LM162:
 2536 0e1c 991F      	/* #NOAPP */
 2537 0e1e FC01      		rcall InitSVRGPIO
 2539 0e22 F040      	.LM163:
 2540 0e24 3183      		rcall InitTimer
 2541 0e26 2083      	.L92:
 2543               	.LM164:
 779:ssc_main.c    **** 					= g_runtime_svrs[g_active_svr_idx].save_position_us;
 780:ssc_main.c    **** 		}
 781:ssc_main.c    **** 		else
 782:ssc_main.c    **** 		{
 783:ssc_main.c    **** 			g_runtime_svrs[g_active_svr_idx].position_us
 2544               	0)
 2545               		ld r24,Z
 2546 0e2a 4091 0000 		mov r24,r24
 2547 0e2e 5091 0000 		ldi r25,lo8(0)
 2548 0e32 8091 0000 		andi r24,lo8(2)
 2549 0e36 9091 0000 		andi r25,hi8(2)
 2550 0e3a 880F      		sbiw r24,0
 2551 0e3c 991F      		brne .L92
 2553 0e40 991F      	.LM165:
 2554 0e42 880F      		ldi r24,lo8(g_eprom_baud_ubrr)
 2555 0e44 991F      		ldi r25,hi8(g_eprom_baud_ubrr)
 2556 0e46 FC01      		rcall eeprom_read_byte
 2557 0e48 E050      		std Y+1,r24
 2559 0e4c 2081      	.LM166:
 2560 0e4e 3181      		ldd r24,Y+1
 2561 0e50 8091 0000 		cpi r24,lo8(-1)
 2562 0e54 9091 0000 		breq .L93
 2563 0e58 880F      		ldd r24,Y+1
 2564 0e5a 991F      		tst r24
 2565 0e5c 880F      		brne .L94
 2566 0e5e 991F      	.L93:
 2568 0e62 991F      	.LM167:
 2569 0e64 FC01      		ldi r24,lo8(25)
 2570 0e66 E050      		ldi r25,hi8(25)
 2571 0e68 F040      		rcall avr_uart_init
 2572 0e6a 8081      		rjmp .L95
 2573 0e6c 9181      	.L94:
 2575 0e70 391F      	.LM168:
 2576 0e72 CA01      		ldd r24,Y+1
 2577 0e74 880F      		mov r24,r24
 2578 0e76 991F      		ldi r25,lo8(0)
 2579 0e78 880F      		rcall avr_uart_init
 2580 0e7a 991F      	.L95:
 2582 0e7e 991F      	.LM169:
 2583 0e80 FC01      		ldi r30,lo8(60)
 2584 0e82 E050      		ldi r31,hi8(60)
 2585 0e84 F040      		ld r24,Z
 2586 0e86 3183      		mov r24,r24
 2587 0e88 2083      		ldi r25,lo8(0)
 2588               		andi r24,lo8(2)
 2589               		andi r25,hi8(2)
 784:ssc_main.c    **** 					+= g_runtime_svrs[g_active_svr_idx].speed;
 785:ssc_main.c    **** 		}
 786:ssc_main.c    **** 	}
 787:ssc_main.c    **** 
 788:ssc_main.c    **** }
 2590               	-.LFBB15
 2591               	.LM170:
 2592 0e8a 2696      		ldi r24,lo8(g_eprom_auto_run)
 2593 0e8c DEBF      		ldi r25,hi8(g_eprom_auto_run)
 2594 0e8e CDBF      		rcall eeprom_read_byte
 2595 0e90 CF91      		sts g_startup_run_pg,r24
 2597 0e94 FF91      	.LM171:
 2598 0e96 EF91      	/* #APP */
 2599 0e98 BF91      	 ;  829 "ssc_main.c" 1
 2600 0e9a AF91      		sei
 2601 0e9c 9F91      	 ;  0 "" 2
 2602 0e9e 8F91      	/* epilogue start */
 2604 0ea2 4F91      	.LM172:
 2605 0ea4 3F91      	/* #NOAPP */
 2606 0ea6 2F91      		pop __tmp_reg__
 2607 0ea8 0F90      		pop r28
 2608 0eaa 0FBE      		pop r29
 2609 0eac 0F90      		ret
 2614               	.Lscope15:
 2615               	.global	mystdout
 2616               		.data
 789:ssc_main.c    **** 
 790:ssc_main.c    **** /**
 791:ssc_main.c    ****  * Initialize SSC component board devices
 792:ssc_main.c    ****  */
 793:ssc_main.c    **** static void init_board(void)
 794:ssc_main.c    **** {
 2617               	size	mystdout, 14
 2618               	mystdout:
 2619               		.skip 3,0
 2620 0eb2 DF93      		.byte	2
 2621 0eb4 CF93      		.skip 4,0
 2622 0eb6 0F92      		.word	gs(avr_uart_putchar)
 2623 0eb8 CDB7      		.word	gs(avr_uart_getchar)
 2624 0eba DEB7      		.word	0
 2625               		.text
 795:ssc_main.c    **** 
 796:ssc_main.c    **** 	uint8_t baud_ubrr_temp = 0;
 2627               	t_c_language, @function
 2628               	init_c_language:
 797:ssc_main.c    **** 	/*
 798:ssc_main.c    **** 	 *	Initialize AVR MCU device
 799:ssc_main.c    **** 	 */
 800:ssc_main.c    **** 
 801:ssc_main.c    **** 	// Disable interrupt
 802:ssc_main.c    **** 	cli();
 2630               	173:
 2631               	.LFBB16:
 2632               		push r29
 2633               		push r28
 2634 0ebe F894      		in r28,__SP_L__
 2635               		in r29,__SP_H__
 803:ssc_main.c    **** 
 804:ssc_main.c    **** 	// Initialize SVR Motor PWM IO Pins
 805:ssc_main.c    **** 	InitSVRGPIO();
 2636               	logue: function */
 2637               	/* frame size = 0 */
 2639 0ec0 00D0      	.LM174:
 806:ssc_main.c    **** 
 807:ssc_main.c    **** 	// Initialize Timer for generating PWM signal
 808:ssc_main.c    **** 	InitTimer();
 2640               	 r24,lo8(mystdout)
 2641               		ldi r25,hi8(mystdout)
 2642 0ec2 00D0      		sts (__iob+2)+1,r25
 2643               		sts __iob+2,r24
 809:ssc_main.c    **** 
 810:ssc_main.c    **** 	// Initialize UART register and set band rate for online debugging
 811:ssc_main.c    **** 	eeprom_busy_wait();
 2644               	pilogue start */
 2646 0ec4 ECE3      	.LM175:
 2647 0ec6 F0E0      		pop r28
 2648 0ec8 8081      		pop r29
 2649 0eca 882F      		ret
 2651 0ece 8270      	.Lscope16:
 2653 0ed2 0097      	.global	main
 812:ssc_main.c    **** 	baud_ubrr_temp = eeprom_read_byte(&g_eprom_baud_ubrr);
 2655               	bn	68,0,842,.LM176-.LFBB17
 2656               	.LM176:
 2657 0ed6 80E0      	.LFBB17:
 2658 0ed8 90E0      		push r29
 2659 0eda 00D0      		push r28
 2660 0edc 8983      		in r28,__SP_L__
 813:ssc_main.c    **** 
 814:ssc_main.c    **** 	if (baud_ubrr_temp == 255 || baud_ubrr_temp == 0)
 2661               	9,__SP_H__
 2662               		subi r28,lo8(-(-109))
 2663 0ede 8981      		sbci r29,hi8(-(-109))
 2664 0ee0 8F3F      		in __tmp_reg__,__SREG__
 2665 0ee2 01F0      		cli
 2666 0ee4 8981      		out __SP_H__,r29
 2667 0ee6 8823      		out __SREG__,__tmp_reg__
 2668 0ee8 01F4      		out __SP_L__,r28
 2669               	/* prologue: function */
 815:ssc_main.c    **** 	{
 816:ssc_main.c    **** 		avr_uart_init(25);
 2670               	size = 109 */
 2672 0eea 89E1      	.LM177:
 2673 0eec 90E0      		ldi r24,lo8(100)
 2674 0eee 00D0      		movw r30,r28
 2675 0ef0 00C0      		adiw r30,10
 2676               		movw r26,r30
 817:ssc_main.c    **** 	}
 818:ssc_main.c    **** 	else
 819:ssc_main.c    **** 	{
 820:ssc_main.c    **** 		avr_uart_init(baud_ubrr_temp);
 2677               	8,r24
 2678               		st X+,__zero_reg__
 2679 0ef2 8981      	        dec r18
 2680 0ef4 882F      		brne .-6
 2682 0ef8 00D0      	.LM178:
 2683               		std Y+9,__zero_reg__
 821:ssc_main.c    **** 	}
 822:ssc_main.c    **** 
 823:ssc_main.c    **** 	eeprom_busy_wait();
 2684               	8,__zero_reg__
 2686 0efa ECE3      	.LM179:
 2687 0efc F0E0      		std Y+7,__zero_reg__
 2688 0efe 8081      		std Y+6,__zero_reg__
 2690 0f02 90E0      	.LM180:
 2691 0f04 8270      		std Y+5,__zero_reg__
 2693 0f08 0097      	.LM181:
 2694 0f0a 01F4      		ldi r24,lo8(-1)
 824:ssc_main.c    **** 	g_startup_run_pg = eeprom_read_byte(&g_eprom_auto_run);
 2695               	8(-1)
 2696               		sts (g_active_svr_idx)+1,r25
 2697 0f0c 80E0      		sts g_active_svr_idx,r24
 2699 0f10 00D0      	.LM182:
 2700 0f12 8093 0000 		rcall init_c_language
 825:ssc_main.c    **** 	// enable watch dog, 128K CLK
 826:ssc_main.c    **** 	//wdt_enable(3);
 827:ssc_main.c    **** 
 828:ssc_main.c    **** 	// Enable interrupt
 829:ssc_main.c    **** 	sei();
 2701               	n	68,0,853,.LM183-.LFBB17
 2702               	.LM183:
 2703               		rcall init_board
 2705 0f16 7894      	.LM184:
 2706               		rcall .
 2707               		in r30,__SP_L__
 830:ssc_main.c    **** }
 2708               	,__SP_H__
 2709               		adiw r30,1
 2710               		ldi r24,lo8(RTL_M_CMDREADY)
 2711 0f18 0F90      		ldi r25,hi8(RTL_M_CMDREADY)
 2712 0f1a CF91      		std Z+1,r25
 2713 0f1c DF91      		st Z,r24
 2714 0f1e 0895      		rcall printf_P
 2715               		pop __tmp_reg__
 2716               		pop __tmp_reg__
 2717               	.L110:
 2719               	.LM185:
 2720               		rcall avr_uart_getc
 2721               		mov r24,r24
 2722               		ldi r25,lo8(0)
 2723               		std Y+9,r25
 2724               		std Y+8,r24
 2726 00e7 02        	.LM186:
 2727 00e8 0000 0000 		ldd r24,Y+8
 2728 00ec 0000      		ldd r25,Y+9
 2729 00ee 0000      		ldi r26,hi8(-1)
 2730 00f0 0000      		cpi r24,lo8(-1)
 2731               		cpc r25,r26
 2732               		breq .L110
 2733               		ldd r24,Y+5
 2734               		tst r24
 831:ssc_main.c    **** /**
 832:ssc_main.c    ****  * Initialize C language stdio and redirect to UART port
 833:ssc_main.c    ****  */
 834:ssc_main.c    **** FILE mystdout =
 835:ssc_main.c    **** FDEV_SETUP_STREAM(avr_uart_putchar, avr_uart_getchar, _FDEV_SETUP_WRITE);
 836:ssc_main.c    **** static void init_c_language(void)
 837:ssc_main.c    **** {
 2735               	1,.LM187-.LFBB17
 2736               	.LM187:
 2737               		ldd r24,Y+8
 2738 0f20 DF93      		ldd r25,Y+9
 2739 0f22 CF93      		cpi r24,13
 2740 0f24 CDB7      		cpc r25,__zero_reg__
 2741 0f26 DEB7      		breq .L101
 2743               	.LM188:
 838:ssc_main.c    **** 	stdout = &mystdout;
 2744               	Y+6
 2745               		ldd r25,Y+7
 2746 0f28 80E0      		cpi r24,100
 2747 0f2a 90E0      		cpc r25,__zero_reg__
 2748 0f2c 9093 0000 		brne .L102
 2750               	.LM189:
 839:ssc_main.c    **** }
 2751               	7,__zero_reg__
 2752               		std Y+6,__zero_reg__
 2753 0f34 CF91      	.L102:
 2755 0f38 0895      	.LM190:
 2756               		ldd r18,Y+6
 2757               		ldd r19,Y+7
 2758               		ldd r20,Y+8
 2759               		movw r24,r28
 2760               		adiw r24,10
 2761               		movw r30,r24
 840:ssc_main.c    **** 
 841:ssc_main.c    **** int main(void)
 842:ssc_main.c    **** {
 2762               	8
 2763               		adc r31,r19
 2764               		st Z,r20
 2765 0f3a DF93      		ldd r24,Y+6
 2766 0f3c CF93      		ldd r25,Y+7
 2767 0f3e CDB7      		adiw r24,1
 2768 0f40 DEB7      		std Y+7,r25
 2769 0f42 CD56      		std Y+6,r24
 2770 0f44 D040      		rjmp .L110
 2771 0f46 0FB6      	.L101:
 2772 0f48 F894      	.LBB3:
 2774 0f4c 0FBE      	.LM191:
 2775 0f4e CDBF      		ldi r24,lo8(1)
 2776               		std Y+5,r24
 843:ssc_main.c    **** 
 844:ssc_main.c    **** 	char rcv_buf[100] =
 845:ssc_main.c    **** 	{ 0 };
 2778               	,Y+6
 2779               		ldd r19,Y+7
 2780 0f50 84E6      		movw r24,r28
 2781 0f52 FE01      		adiw r24,10
 2782 0f54 3A96      		movw r30,r24
 2783 0f56 DF01      		add r30,r18
 2784 0f58 282F      		adc r31,r19
 2785 0f5a 1D92      		st Z,__zero_reg__
 2787 0f5e 01F4      	.LM193:
 846:ssc_main.c    **** 	int rcv_char = 0;
 2788               	_zero_reg__
 2789               		std Y+6,__zero_reg__
 2791 0f62 1886      	.LM194:
 847:ssc_main.c    **** 	int16_t rcv_buf_end = 0;
 2792               	w r24,r28
 2793               		adiw r24,10
 2794 0f64 1F82      		std Y+4,r25
 2795 0f66 1E82      		std Y+3,r24
 848:ssc_main.c    **** 	int8_t cmd_is_busy = 0;
 2796               	r19
 2797               		st Z,__zero_reg__
 849:ssc_main.c    **** 	g_active_svr_idx = -1;
 2799               	193:
 2800               		std Y+7,__zero_reg__
 2801 0f6a 8FEF      		std Y+6,__zero_reg__
 2803 0f6e 9093 0000 	.LM194:
 2804 0f72 8093 0000 		movw r24,r28
 850:ssc_main.c    **** 
 851:ssc_main.c    **** 	init_c_language();
 2805               	r24,10
 2806               		std Y+4,r25
 2807 0f76 00D0      		std Y+3,r24
 852:ssc_main.c    **** 
 853:ssc_main.c    **** 	init_board();
 2808               	r19
 2809               		st Z,__zero_reg__
 854:ssc_main.c    **** 
 855:ssc_main.c    **** 	printf_P(RTL_M_CMDREADY);
 2811               	193:
 2812               		std Y+7,__zero_reg__
 2813 0f7a 00D0      		std Y+6,__zero_reg__
 2815 0f7e FEB7      	.LM194:
 2816 0f80 3196      		movw r24,r28
 2817 0f82 80E0      		adiw r24,10
 2818 0f84 90E0      		std Y+4,r25
 2819 0f86 9183      		std Y+3,r24
 2821 0f8a 00D0      	.LM195:
 2822 0f8c 0F90      		movw r24,r28
 2823 0f8e 0F90      		adiw r24,10
 2824               		std Y+2,r25
 856:ssc_main.c    **** 
 857:ssc_main.c    **** 	if (g_startup_run_pg == TRUE)
 858:ssc_main.c    **** 	{
 859:ssc_main.c    **** 		//run_user_programm();
 860:ssc_main.c    **** 	}
 861:ssc_main.c    **** 
 862:ssc_main.c    **** 	for (;;)
 863:ssc_main.c    **** 	{
 864:ssc_main.c    **** 		while (1)
 865:ssc_main.c    **** 		{
 866:ssc_main.c    **** 
 867:ssc_main.c    **** 			// feed watch dog
 868:ssc_main.c    **** 			//wdt_reset();
 869:ssc_main.c    **** 
 870:ssc_main.c    **** 			// receive a char data
 871:ssc_main.c    **** 			rcv_char = avr_uart_getc();
 2825               	L109:
 2827 0f90 00D0      	.LM196:
 2828 0f92 882F      		ldd r30,Y+3
 2829 0f94 90E0      		ldd r31,Y+4
 2830 0f96 9987      		ld r24,Z
 2831 0f98 8887      		cpi r24,lo8(61)
 872:ssc_main.c    **** 			//avr_uart_putc(rcv_char);
 873:ssc_main.c    **** 			//rcv_char = getchar();
 874:ssc_main.c    **** 			//putchar(rcv_char);
 875:ssc_main.c    **** 
 876:ssc_main.c    **** 			if (EOF == rcv_char || cmd_is_busy)
 2832               	n	68,0,895,.LM195-.LFBB17
 2833               	.LM195:
 2834 0f9a 8885      		movw r24,r28
 2835 0f9c 9985      		adiw r24,10
 2836 0f9e AFEF      		std Y+2,r25
 2837 0fa0 8F3F      		std Y+1,r24
 2838 0fa2 9A07      	.L109:
 2840 0fa6 8D81      	.LM196:
 2841 0fa8 8823      		ldd r30,Y+3
 2842 0faa 01F4      		ldd r31,Y+4
 877:ssc_main.c    **** 			{
 878:ssc_main.c    **** 				continue;
 879:ssc_main.c    **** 			}
 880:ssc_main.c    **** 
 881:ssc_main.c    **** 			if (rcv_char != '\r')
 2843               	d Y+4,r25
 2844               		std Y+3,r24
 2846 0fae 9985      	.LM195:
 2847 0fb0 8D30      		movw r24,r28
 2848 0fb2 9105      		adiw r24,10
 2849 0fb4 01F0      		std Y+2,r25
 882:ssc_main.c    **** 			{
 883:ssc_main.c    **** 				if (rcv_buf_end == 100)
 2850               		std Y+6,__zero_reg__
 2852 0fb6 8E81      	.LM194:
 2853 0fb8 9F81      		movw r24,r28
 2854 0fba 8436      		adiw r24,10
 2855 0fbc 9105      		std Y+4,r25
 2856 0fbe 01F4      		std Y+3,r24
 884:ssc_main.c    **** 					rcv_buf_end = 0;
 2857               		68,0,895,.LM195-.LFBB17
 2858               	.LM195:
 2859 0fc0 1F82      		movw r24,r28
 2860 0fc2 1E82      		adiw r24,10
 2861               		std Y+2,r25
 885:ssc_main.c    **** 				rcv_buf[rcv_buf_end++] = rcv_char;
 2862               		std Y+6,__zero_reg__
 2864 0fc4 2E81      	.LM194:
 2865 0fc6 3F81      		movw r24,r28
 2866 0fc8 4885      		adiw r24,10
 2867 0fca CE01      		std Y+4,r25
 2868 0fcc 0A96      		std Y+3,r24
 2870 0fd0 E20F      	.LM195:
 2871 0fd2 F31F      		movw r24,r28
 2872 0fd4 4083      		adiw r24,10
 2873 0fd6 8E81      		std Y+2,r25
 2874 0fd8 9F81      		std Y+1,r24
 2875 0fda 0196      	.L109:
 2877 0fde 8E83      	.LM196:
 2878 0fe0 00C0      		ldd r30,Y+3
 2879               		ldd r31,Y+4
 2880               		ld r24,Z
 886:ssc_main.c    **** 			}
 887:ssc_main.c    **** 			else
 888:ssc_main.c    **** 			{
 889:ssc_main.c    **** 				cmd_is_busy = TRUE;
 2881               	rne .L103
 2883 0fe2 81E0      	.LM197:
 2884 0fe4 8D83      		ldd r30,Y+3
 890:ssc_main.c    **** 
 891:ssc_main.c    **** 				rcv_buf[rcv_buf_end] = '\0';
 2885               	,r25
 2886               		std Y+1,r24
 2887 0fe6 2E81      	.L109:
 2889 0fea CE01      	.LM196:
 2890 0fec 0A96      		ldd r30,Y+3
 2891 0fee FC01      		ldd r31,Y+4
 2892 0ff0 E20F      		ld r24,Z
 2893 0ff2 F31F      		cpi r24,lo8(61)
 2894 0ff4 1082      		brne .L103
 892:ssc_main.c    **** 				rcv_buf_end = 0;
 2895               	M195-.LFBB17
 2896               	.LM195:
 2897 0ff6 1F82      		movw r24,r28
 2898 0ff8 1E82      		adiw r24,10
 893:ssc_main.c    **** 
 894:ssc_main.c    **** 				char* p = rcv_buf;
 2899               	,__zero_reg__
 2900               		std Y+6,__zero_reg__
 2902 0ffc 0A96      	.LM194:
 2903 0ffe 9C83      		movw r24,r28
 2904 1000 8B83      		adiw r24,10
 895:ssc_main.c    **** 				char* buf_ptr = rcv_buf;
 2905               	+4,r25
 2906               		std Y+3,r24
 2908 1004 0A96      	.LM195:
 2909 1006 9A83      		movw r24,r28
 2910 1008 8983      		adiw r24,10
 2911               		std Y+2,r25
 896:ssc_main.c    **** 
 897:ssc_main.c    **** 				while (TRUE)
 898:ssc_main.c    **** 				{
 899:ssc_main.c    **** 					if (*p == '=')
 2912               		std Y+6,__zero_reg__
 2914 100a EB81      	.LM194:
 2915 100c FC81      		movw r24,r28
 2916 100e 8081      		adiw r24,10
 2917 1010 8D33      		std Y+4,r25
 2918 1012 01F4      		std Y+3,r24
 900:ssc_main.c    **** 					{
 901:ssc_main.c    **** 						*p++ = '\0';
 2919               		68,0,895,.LM195-.LFBB17
 2920               	.LM195:
 2921 1014 EB81      		movw r24,r28
 2922 1016 FC81      		adiw r24,10
 2923 1018 1082      		std Y+2,r25
 2924 101a 8B81      		std Y+1,r24
 2925 101c 9C81      	.L109:
 2927 1020 9C83      	.LM196:
 2928 1022 8B83      		ldd r30,Y+3
 902:ssc_main.c    **** 						g_user_rtcmmd.cmmd = buf_ptr;
 2929               	diw r24,10
 2930               		std Y+4,r25
 2931 1024 8981      		std Y+3,r24
 2933 1028 9093 0000 	.LM195:
 2934 102c 8093 0000 		movw r24,r28
 903:ssc_main.c    **** 						buf_ptr = p;
 2935               	M193:
 2936               		std Y+7,__zero_reg__
 2937 1030 8B81      		std Y+6,__zero_reg__
 2939 1034 9A83      	.LM194:
 2940 1036 8983      		movw r24,r28
 2941 1038 00C0      		adiw r24,10
 2942               		std Y+4,r25
 904:ssc_main.c    **** 					}
 905:ssc_main.c    **** 					else if (*p == ',')
 2943               	,r24
 2945 103a EB81      	.LM195:
 2946 103c FC81      		movw r24,r28
 2947 103e 8081      		adiw r24,10
 2948 1040 8C32      		std Y+2,r25
 2949 1042 01F4      		std Y+1,r24
 906:ssc_main.c    **** 					{
 907:ssc_main.c    **** 						*p++ = '\0';
 2950               	o_reg__
 2952 1044 EB81      	.LM194:
 2953 1046 FC81      		movw r24,r28
 2954 1048 1082      		adiw r24,10
 2955 104a 8B81      		std Y+4,r25
 2956 104c 9C81      		std Y+3,r24
 2958 1050 9C83      	.LM195:
 2959 1052 8B83      		movw r24,r28
 908:ssc_main.c    **** 						g_user_rtcmmd.params[g_user_rtcmmd.param_count++]
 2960               	M193:
 2961               		std Y+7,__zero_reg__
 2962 1054 2091 0000 		std Y+6,__zero_reg__
 2964 105a 9927      	.LM194:
 2965 105c 87FD      		movw r24,r28
 2966 105e 9095      		adiw r24,10
 2967 1060 880F      		std Y+4,r25
 2968 1062 991F      		std Y+3,r24
 2970 1066 E050      	.LM195:
 2971 1068 F040      		movw r24,r28
 2972 106a 8981      		adiw r24,10
 2973 106c 9A81      		std Y+2,r25
 2974 106e 9183      		std Y+1,r24
 2975 1070 8083      	.L109:
 2977 1074 8F5F      	.LM196:
 2978 1076 8093 0000 		ldd r30,Y+3
 909:ssc_main.c    **** 								= buf_ptr;
 910:ssc_main.c    **** 						buf_ptr = p;
 2979               	4,Z
 2980               		cpi r24,lo8(61)
 2981 107a 8B81      		brne .L103
 2983 107e 9A83      	.LM197:
 2984 1080 8983      		ldd r30,Y+3
 2985 1082 00C0      		ldd r31,Y+4
 2986               		st Z,__zero_reg__
 911:ssc_main.c    **** 					}
 912:ssc_main.c    **** 					else if (*p == '\0')
 2987               	8,0,899,.LM196-.LFBB17
 2988               	.LM196:
 2989 1084 EB81      		ldd r30,Y+3
 2990 1086 FC81      		ldd r31,Y+4
 2991 1088 8081      		ld r24,Z
 2992 108a 8823      		cpi r24,lo8(61)
 2993 108c 01F4      		brne .L103
 913:ssc_main.c    **** 					{
 914:ssc_main.c    **** 						if (buf_ptr != p)
 2994               	M195-.LFBB17
 2995               	.LM195:
 2996 108e 2981      		movw r24,r28
 2997 1090 3A81      		adiw r24,10
 2998 1092 8B81      		std Y+2,r25
 2999 1094 9C81      		std Y+1,r24
 3000 1096 2817      	.L109:
 3002 109a 01F0      	.LM196:
 915:ssc_main.c    **** 						{
 916:ssc_main.c    **** 							if (NULL == g_user_rtcmmd.cmmd)
 3003               	ovw r24,r28
 3004               		adiw r24,10
 3005 109c 8091 0000 		std Y+4,r25
 3006 10a0 9091 0000 		std Y+3,r24
 3008 10a6 01F4      	.LM195:
 917:ssc_main.c    **** 							{
 918:ssc_main.c    **** 								g_user_rtcmmd.cmmd = buf_ptr;
 3009               	M193-.LFBB17
 3010               	.LM193:
 3011 10a8 8981      		std Y+7,__zero_reg__
 3012 10aa 9A81      		std Y+6,__zero_reg__
 3014 10b0 8093 0000 	.LM194:
 3015 10b4 00C0      		movw r24,r28
 3016               		adiw r24,10
 919:ssc_main.c    **** 							}
 920:ssc_main.c    **** 							else
 921:ssc_main.c    **** 							{
 922:ssc_main.c    **** 								g_user_rtcmmd.params[g_user_rtcmmd.param_count++]
 3017               	,r25
 3018               		std Y+3,r24
 3020 10ba 822F      	.LM195:
 3021 10bc 9927      		movw r24,r28
 3022 10be 87FD      		adiw r24,10
 3023 10c0 9095      		std Y+2,r25
 3024 10c2 880F      		std Y+1,r24
 3025 10c4 991F      	.L109:
 3027 10c8 E050      	.LM196:
 3028 10ca F040      		ldd r30,Y+3
 3029 10cc 8981      		ldd r31,Y+4
 3030 10ce 9A81      		ld r24,Z
 3031 10d0 9183      		cpi r24,lo8(61)
 3032 10d2 8083      		brne .L103
 3034 10d6 8F5F      	.LM197:
 3035 10d8 8093 0000 		ldd r30,Y+3
 3036               		ldd r31,Y+4
 923:ssc_main.c    **** 										= buf_ptr;
 924:ssc_main.c    **** 							}
 925:ssc_main.c    **** 						}
 926:ssc_main.c    **** 
 927:ssc_main.c    **** 						break;
 928:ssc_main.c    **** 					}
 929:ssc_main.c    **** 					else
 930:ssc_main.c    **** 					{
 931:ssc_main.c    **** 						p++;
 932:ssc_main.c    **** 					}
 933:ssc_main.c    **** 				}
 934:ssc_main.c    **** 
 935:ssc_main.c    **** 				// execute user command
 936:ssc_main.c    **** 				rtcmd_main_handle();
 3037               	r24
 3038               	.L109:
 937:ssc_main.c    **** 
 938:ssc_main.c    **** 				// clear user at command buf.
 939:ssc_main.c    **** 				memset(&g_user_rtcmmd, 0, sizeof(g_user_rtcmmd));
 3040               	LM194:
 3041               		movw r24,r28
 3042 10de 80E0      		adiw r24,10
 3043 10e0 90E0      		std Y+4,r25
 3044 10e2 60E0      		std Y+3,r24
 3046 10e6 4BE2      	.LM195:
 3047 10e8 50E0      		movw r24,r28
 3048 10ea 00D0      		adiw r24,10
 940:ssc_main.c    **** 
 941:ssc_main.c    **** 				cmd_is_busy = FALSE;
 3049               	,__zero_reg__
 3050               		std Y+6,__zero_reg__
 3052 10ee 00C0      	.LM194:
 3053               		movw r24,r28
 3054               		adiw r24,10
 3055               		std Y+4,r25
 3056 10f0 8B81      		std Y+3,r24
 3058 10f4 0196      	.LM195:
 3059 10f6 9C83      		movw r24,r28
 3060 10f8 8B83      		adiw r24,10
 3061 10fa 00C0      		std Y+2,r25
 3062               		std Y+1,r24
 3063               	.L109:
 3065               	.LM196:
 3066               		ldd r30,Y+3
 3067               		ldd r31,Y+4
 3068               		ld r24,Z
 3069               		cpi r24,lo8(61)
 3070               		brne .L103
 3072               	.LM197:
 3073               		ldd r30,Y+3
 3074               		ldd r31,Y+4
 3075               		st Z,__zero_reg__
 3076               		ldd r24,Y+3
 3077               		ldd r25,Y+4
 3078               		adiw r24,1
 3079               		std Y+4,r25
 3080               		std Y+3,r24
 3082               	.LM198:
 3083               		ldd r24,Y+1
 3084               		ldd r25,Y+2
 3085               		sts (g_user_rtcmmd)+1,r25
 3086 0001 00        		sts g_user_rtcmmd,r24
 3088               	.LM199:
 3089               		ldd r24,Y+3
 3090               		ldd r25,Y+4
 3091               		std Y+2,r25
 3092               		std Y+1,r24
 3093               		rjmp .L109
 3094               	.L103:
 3096               	.LM200:
 3097               		ldd r30,Y+3
 3098               		ldd r31,Y+4
 3099               		ld r24,Z
 3100               		cpi r24,lo8(44)
 3101               		brne .L105
 3103               	.LM201:
 3104               		ldd r30,Y+3
DEFINED SYMBOLS
                            *ABS*:00000000 ssc_main.c
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:2      *ABS*:0000003f __SREG__
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:3      *ABS*:0000003e __SP_H__
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:4      *ABS*:0000003d __SP_L__
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:5      *ABS*:00000034 __CCP__
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:7      *ABS*:00000001 __zero_reg__
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:105    .progmem.data:00000000 RTL_M_ID
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:109    .progmem.data:00000011 RTL_M_CMDREADY
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:114    .data:00000000 g_svr_gpios
                             .bss:00000002 g_active_svr_idx
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:127    .data:00000008 g_runtime_svrs
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:124    .bss:00000004 g_startup_run_pg
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:160    .bss:00000005 g_eprom_address
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:186    .data:0000007e g_cmmd_handles
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:206    .text:00000000 rt_smvr
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:349    .text:000000e2 rt_smv
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:930    .text:000004da rt_ver
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:1360   .text:000006de rt_reset
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:970    .text:00000500 rt_sbr
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:1394   .text:00000700 rt_cywt
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:1553   .text:000007dc rt_cyrd
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:161    .bss:00000007 g_user_rtcmmd
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:3080   .eeprom:00000000 g_eprom_baud_ubrr
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:1217   .text:0000064e eeprom_write_byte
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:1287   .text:0000069c eeprom_read_byte
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:1355   .bss:00000000 reset
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:1800   .text:0000093c rtcmd_main_handle
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:1969   .text:00000a38 InitTimer
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:2019   .text:00000a72 InitSVRGPIO
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:2070   .text:00000aac __vector_8
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:2203   .text:00000b92 __vector_9
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:2616   .text:00000eb2 init_board
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:3085   .eeprom:00000001 g_eprom_auto_run
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:2724   .data:000000e4 mystdout
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:2734   .text:00000f20 init_c_language
C:\Users\Steven\AppData\Local\Temp/ccyGpLW1.s:2761   .text:00000f3a main

UNDEFINED SYMBOLS
printf
__divmodqi4
memcpy
sscanf
atol
printf_P
memset
atoi
avr_cy2239x_write_buffer
avr_cy2239x_read_buffer
puts
strcmp
avr_uart_init
avr_uart_putchar
avr_uart_getchar
__iob
avr_uart_getc
__do_copy_data
__do_clear_bss
