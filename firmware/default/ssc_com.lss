
ssc_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a74  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00001a74  00001b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008001a2  008001a2  00001c6a  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00001c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000a0  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de1  00000000  00000000  00001edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000677  00000000  00000000  00002cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c14  00000000  00000000  00003335  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00003f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fc  00000000  00000000  00004580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	26 c0       	rjmp	.+76     	; 0x4e <__ctors_end>
       2:	40 c0       	rjmp	.+128    	; 0x84 <__bad_interrupt>
       4:	3f c0       	rjmp	.+126    	; 0x84 <__bad_interrupt>
       6:	3e c0       	rjmp	.+124    	; 0x84 <__bad_interrupt>
       8:	3d c0       	rjmp	.+122    	; 0x84 <__bad_interrupt>
       a:	3c c0       	rjmp	.+120    	; 0x84 <__bad_interrupt>
       c:	3b c0       	rjmp	.+118    	; 0x84 <__bad_interrupt>
       e:	3a c0       	rjmp	.+116    	; 0x84 <__bad_interrupt>
      10:	6f c0       	rjmp	.+222    	; 0xf0 <__vector_8>
      12:	aa c0       	rjmp	.+340    	; 0x168 <__vector_9>
      14:	37 c0       	rjmp	.+110    	; 0x84 <__bad_interrupt>
      16:	36 c0       	rjmp	.+108    	; 0x84 <__bad_interrupt>
      18:	35 c0       	rjmp	.+106    	; 0x84 <__bad_interrupt>
      1a:	34 c0       	rjmp	.+104    	; 0x84 <__bad_interrupt>
      1c:	33 c0       	rjmp	.+102    	; 0x84 <__bad_interrupt>
      1e:	32 c0       	rjmp	.+100    	; 0x84 <__bad_interrupt>
      20:	31 c0       	rjmp	.+98     	; 0x84 <__bad_interrupt>
      22:	30 c0       	rjmp	.+96     	; 0x84 <__bad_interrupt>
      24:	2f c0       	rjmp	.+94     	; 0x84 <__bad_interrupt>

00000026 <RTL_M_CMDREADY>:
      26:	0d 0a 2a 43 53 54 55 0d 0a 00                       ..*CSTU...

00000030 <RTL_M_ID>:
      30:	0d 0a 2a 56 45 52 3a 53 53 43 38 2e 56 32 0d 0a     ..*VER:SSC8.V2..
	...

00000041 <__c.1971>:
      41:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

0000004e <__ctors_end>:
      4e:	11 24       	eor	r1, r1
      50:	1f be       	out	0x3f, r1	; 63
      52:	cf e5       	ldi	r28, 0x5F	; 95
      54:	d4 e0       	ldi	r29, 0x04	; 4
      56:	de bf       	out	0x3e, r29	; 62
      58:	cd bf       	out	0x3d, r28	; 61

0000005a <__do_copy_data>:
      5a:	11 e0       	ldi	r17, 0x01	; 1
      5c:	a0 e6       	ldi	r26, 0x60	; 96
      5e:	b0 e0       	ldi	r27, 0x00	; 0
      60:	e4 e7       	ldi	r30, 0x74	; 116
      62:	fa e1       	ldi	r31, 0x1A	; 26
      64:	02 c0       	rjmp	.+4      	; 0x6a <.do_copy_data_start>

00000066 <.do_copy_data_loop>:
      66:	05 90       	lpm	r0, Z+
      68:	0d 92       	st	X+, r0

0000006a <.do_copy_data_start>:
      6a:	a2 3a       	cpi	r26, 0xA2	; 162
      6c:	b1 07       	cpc	r27, r17
      6e:	d9 f7       	brne	.-10     	; 0x66 <.do_copy_data_loop>

00000070 <__do_clear_bss>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a2 ea       	ldi	r26, 0xA2	; 162
      74:	b1 e0       	ldi	r27, 0x01	; 1
      76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
      78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
      7a:	aa 3d       	cpi	r26, 0xDA	; 218
      7c:	b1 07       	cpc	r27, r17
      7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
      80:	a6 d1       	rcall	.+844    	; 0x3ce <main>
      82:	f6 cc       	rjmp	.-1556   	; 0xfffffa70 <__eeprom_end+0xff7efa6e>

00000084 <__bad_interrupt>:
      84:	bd cf       	rjmp	.-134    	; 0x0 <__vectors>

00000086 <avr_uart_putchar>:
int avr_uart_putchar(char c, FILE *unused)
{
//	if( c == '\n' )
//		avr_uart_putchar('\r', unused);

	loop_until_bit_is_set(UCSRA, UDRE);
      86:	5d 9b       	sbis	0x0b, 5	; 11
      88:	fe cf       	rjmp	.-4      	; 0x86 <avr_uart_putchar>
	UDR = c;
      8a:	8c b9       	out	0x0c, r24	; 12
	return 0;
}
      8c:	80 e0       	ldi	r24, 0x00	; 0
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	08 95       	ret

00000092 <avr_uart_getchar>:

int avr_uart_getchar(FILE *stream)
{
	loop_until_bit_is_set(UCSRA, RXC);
      92:	5f 9b       	sbis	0x0b, 7	; 11
      94:	fe cf       	rjmp	.-4      	; 0x92 <avr_uart_getchar>
	if (UCSRA & _BV(FE))
      96:	5c 9b       	sbis	0x0b, 4	; 11
      98:	03 c0       	rjmp	.+6      	; 0xa0 <avr_uart_getchar+0xe>
      9a:	2e ef       	ldi	r18, 0xFE	; 254
      9c:	3f ef       	ldi	r19, 0xFF	; 255
      9e:	08 c0       	rjmp	.+16     	; 0xb0 <avr_uart_getchar+0x1e>
	  return _FDEV_EOF;
	if (UCSRA & _BV(DOR))
      a0:	5b 9b       	sbis	0x0b, 3	; 11
      a2:	03 c0       	rjmp	.+6      	; 0xaa <avr_uart_getchar+0x18>
      a4:	2f ef       	ldi	r18, 0xFF	; 255
      a6:	3f ef       	ldi	r19, 0xFF	; 255
      a8:	03 c0       	rjmp	.+6      	; 0xb0 <avr_uart_getchar+0x1e>
	  return _FDEV_ERR;

	return UDR;
      aa:	8c b1       	in	r24, 0x0c	; 12
      ac:	28 2f       	mov	r18, r24
      ae:	30 e0       	ldi	r19, 0x00	; 0
}
      b0:	c9 01       	movw	r24, r18
      b2:	08 95       	ret

000000b4 <avr_uart_init>:
* Returns     : None
*********************************************************************************************************
*/
void avr_uart_init(int16_t ubrr_val) {
    /* 设置波特率 */
    UBRRH = (unsigned char)(ubrr_val>>8);
      b4:	29 2f       	mov	r18, r25
      b6:	33 27       	eor	r19, r19
      b8:	27 fd       	sbrc	r18, 7
      ba:	3a 95       	dec	r19
      bc:	20 bd       	out	0x20, r18	; 32
    UBRRL = (unsigned char)ubrr_val;
      be:	89 b9       	out	0x09, r24	; 9

    /* 接收器与发送器使能 */
    UCSRB = (1<<RXEN)|(1<<TXEN);
      c0:	88 e1       	ldi	r24, 0x18	; 24
      c2:	8a b9       	out	0x0a, r24	; 10

    /* 设置帧格式: 8个数据位, 1个停止位*/
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
      c4:	86 e8       	ldi	r24, 0x86	; 134
      c6:	80 bd       	out	0x20, r24	; 32
}
      c8:	08 95       	ret

000000ca <avr_uart_putc>:
* Returns     : None
*********************************************************************************************************
*/
void avr_uart_putc(uint8_t val) {
    /* 等待发送缓冲器为空 */
    while ( !( UCSRA & (1<<UDRE)) );
      ca:	5d 9b       	sbis	0x0b, 5	; 11
      cc:	fe cf       	rjmp	.-4      	; 0xca <avr_uart_putc>

    /* 将数据放入缓冲器，发送数据 */
    UDR = val;
      ce:	8c b9       	out	0x0c, r24	; 12
}
      d0:	08 95       	ret

000000d2 <avr_uart_getc>:
* Returns     : Read data
*********************************************************************************************************
*/
uint8_t avr_uart_getc(void) {
    /*等待接收数据*/
    while ( !(UCSRA & (1<<RXC)) );
      d2:	5f 9b       	sbis	0x0b, 7	; 11
      d4:	fe cf       	rjmp	.-4      	; 0xd2 <avr_uart_getc>

    /* 从缓冲器中获取并返回数据*/
    return UDR;
      d6:	8c b1       	in	r24, 0x0c	; 12
}
      d8:	08 95       	ret

000000da <rt_reset>:
void
(*reset)(void) = 0x0000;

int8_t rt_reset(void)
{
	g_eprom_address = 0;
      da:	10 92 a8 01 	sts	0x01A8, r1
      de:	10 92 a7 01 	sts	0x01A7, r1
	reset();
      e2:	e0 91 a2 01 	lds	r30, 0x01A2
      e6:	f0 91 a3 01 	lds	r31, 0x01A3
      ea:	09 95       	icall
	return TRUE;
}
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	08 95       	ret

000000f0 <__vector_8>:
 * TIMER1 to hold time for SVR PWM
 *
 * T = delay time 500us ~ 2400us
 */
ISR( TIMER1_OVF_vect )
{
      f0:	1f 92       	push	r1
      f2:	0f 92       	push	r0
      f4:	0f b6       	in	r0, 0x3f	; 63
      f6:	0f 92       	push	r0
      f8:	11 24       	eor	r1, r1
      fa:	2f 93       	push	r18
      fc:	8f 93       	push	r24
      fe:	9f 93       	push	r25
     100:	ef 93       	push	r30
     102:	ff 93       	push	r31
	if (g_active_svr_idx >= 0 && g_active_svr_idx < 4)
     104:	80 91 a4 01 	lds	r24, 0x01A4
     108:	90 91 a5 01 	lds	r25, 0x01A5
     10c:	fc 01       	movw	r30, r24
     10e:	e4 5e       	subi	r30, 0xE4	; 228
     110:	fe 4f       	sbci	r31, 0xFE	; 254
     112:	04 97       	sbiw	r24, 0x04	; 4
     114:	68 f4       	brcc	.+26     	; 0x130 <__vector_8+0x40>
	{
		PORTC &= ~_BV(g_svr_gpios[g_active_svr_idx]);
     116:	25 b3       	in	r18, 0x15	; 21
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	00 80       	ld	r0, Z
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__vector_8+0x34>
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	0a 94       	dec	r0
     126:	e2 f7       	brpl	.-8      	; 0x120 <__vector_8+0x30>
     128:	80 95       	com	r24
     12a:	82 23       	and	r24, r18
     12c:	85 bb       	out	0x15, r24	; 21
     12e:	0c c0       	rjmp	.+24     	; 0x148 <__vector_8+0x58>
	}

	else
	{
		PORTD &= ~_BV(g_svr_gpios[g_active_svr_idx]);
     130:	22 b3       	in	r18, 0x12	; 18
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	00 80       	ld	r0, Z
     138:	02 c0       	rjmp	.+4      	; 0x13e <__vector_8+0x4e>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	0a 94       	dec	r0
     140:	e2 f7       	brpl	.-8      	; 0x13a <__vector_8+0x4a>
     142:	80 95       	com	r24
     144:	82 23       	and	r24, r18
     146:	82 bb       	out	0x12, r24	; 18
	}

	TIMSK &= ~_BV(TOIE1);
     148:	89 b7       	in	r24, 0x39	; 57
     14a:	8b 7f       	andi	r24, 0xFB	; 251
     14c:	89 bf       	out	0x39, r24	; 57
	TIFR &= ~_BV(TOV1);
     14e:	88 b7       	in	r24, 0x38	; 56
     150:	8b 7f       	andi	r24, 0xFB	; 251
     152:	88 bf       	out	0x38, r24	; 56
}
     154:	ff 91       	pop	r31
     156:	ef 91       	pop	r30
     158:	9f 91       	pop	r25
     15a:	8f 91       	pop	r24
     15c:	2f 91       	pop	r18
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <__vector_9>:

/**
 * TIMER0 to hold 2.5ms for 8 channels
 */
ISR( TIMER0_OVF_vect )
{
     168:	1f 92       	push	r1
     16a:	0f 92       	push	r0
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	11 24       	eor	r1, r1
     172:	2f 93       	push	r18
     174:	3f 93       	push	r19
     176:	4f 93       	push	r20
     178:	5f 93       	push	r21
     17a:	6f 93       	push	r22
     17c:	7f 93       	push	r23
     17e:	8f 93       	push	r24
     180:	9f 93       	push	r25
     182:	af 93       	push	r26
     184:	bf 93       	push	r27
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ef 93       	push	r30
     18c:	ff 93       	push	r31
	// reload counter
	TCNT0 = 0xB2;
     18e:	82 eb       	ldi	r24, 0xB2	; 178
     190:	82 bf       	out	0x32, r24	; 50

	g_active_svr_idx++;
     192:	40 91 a4 01 	lds	r20, 0x01A4
     196:	50 91 a5 01 	lds	r21, 0x01A5
     19a:	4f 5f       	subi	r20, 0xFF	; 255
     19c:	5f 4f       	sbci	r21, 0xFF	; 255
	g_active_svr_idx = g_active_svr_idx > 7 ? 0 : g_active_svr_idx;
     19e:	48 30       	cpi	r20, 0x08	; 8
     1a0:	51 05       	cpc	r21, r1
     1a2:	14 f0       	brlt	.+4      	; 0x1a8 <__vector_9+0x40>
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	50 e0       	ldi	r21, 0x00	; 0
     1a8:	50 93 a5 01 	sts	0x01A5, r21
     1ac:	40 93 a4 01 	sts	0x01A4, r20

	// set timer1 to set svr PWM
	if (g_runtime_svrs[g_active_svr_idx].save_position_us >= MIN_POSITION
     1b0:	fa 01       	movw	r30, r20
     1b2:	b3 e0       	ldi	r27, 0x03	; 3
     1b4:	ee 0f       	add	r30, r30
     1b6:	ff 1f       	adc	r31, r31
     1b8:	ba 95       	dec	r27
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <__vector_9+0x4c>
     1bc:	e4 52       	subi	r30, 0x24	; 36
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	c4 81       	ldd	r28, Z+4	; 0x04
     1c2:	d5 81       	ldd	r29, Z+5	; 0x05
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	c2 3c       	cpi	r28, 0xC2	; 194
     1c8:	d8 07       	cpc	r29, r24
     1ca:	0c f4       	brge	.+2      	; 0x1ce <__vector_9+0x66>
     1cc:	64 c0       	rjmp	.+200    	; 0x296 <__vector_9+0x12e>
     1ce:	fa 01       	movw	r30, r20
     1d0:	e4 5e       	subi	r30, 0xE4	; 228
     1d2:	fe 4f       	sbci	r31, 0xFE	; 254
			&& g_runtime_svrs[g_active_svr_idx].save_position_us
					>= MIN_POSITION)
	{

		// set high
		if (g_active_svr_idx >= 0 && g_active_svr_idx < 4)
     1d4:	44 30       	cpi	r20, 0x04	; 4
     1d6:	51 05       	cpc	r21, r1
     1d8:	60 f4       	brcc	.+24     	; 0x1f2 <__vector_9+0x8a>
		{
			PORTC |= _BV(g_svr_gpios[g_active_svr_idx]);
     1da:	25 b3       	in	r18, 0x15	; 21
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	00 80       	ld	r0, Z
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <__vector_9+0x80>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <__vector_9+0x7c>
     1ec:	28 2b       	or	r18, r24
     1ee:	25 bb       	out	0x15, r18	; 21
     1f0:	0b c0       	rjmp	.+22     	; 0x208 <__vector_9+0xa0>
		}

		else
		{
			PORTD |= _BV(g_svr_gpios[g_active_svr_idx]);
     1f2:	22 b3       	in	r18, 0x12	; 18
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	00 80       	ld	r0, Z
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__vector_9+0x98>
     1fc:	88 0f       	add	r24, r24
     1fe:	99 1f       	adc	r25, r25
     200:	0a 94       	dec	r0
     202:	e2 f7       	brpl	.-8      	; 0x1fc <__vector_9+0x94>
     204:	28 2b       	or	r18, r24
     206:	22 bb       	out	0x12, r18	; 18
		}

		// 中断标志清零
		TIFR &= ~_BV(TOV1);
     208:	88 b7       	in	r24, 0x38	; 56
     20a:	8b 7f       	andi	r24, 0xFB	; 251
     20c:	88 bf       	out	0x38, r24	; 56

		// 计算计数值
		TCNT1H = 0xFF - (g_runtime_svrs[g_active_svr_idx].position_us >> 8); // must be first
     20e:	fa 01       	movw	r30, r20
     210:	a3 e0       	ldi	r26, 0x03	; 3
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	aa 95       	dec	r26
     218:	e1 f7       	brne	.-8      	; 0x212 <__vector_9+0xaa>
     21a:	e4 52       	subi	r30, 0x24	; 36
     21c:	ff 4f       	sbci	r31, 0xFF	; 255
     21e:	a0 81       	ld	r26, Z
     220:	b1 81       	ldd	r27, Z+1	; 0x01
     222:	8b 2f       	mov	r24, r27
     224:	99 27       	eor	r25, r25
     226:	87 fd       	sbrc	r24, 7
     228:	9a 95       	dec	r25
     22a:	80 95       	com	r24
     22c:	8d bd       	out	0x2d, r24	; 45
		TCNT1L = 0xFF - (g_runtime_svrs[g_active_svr_idx].position_us & 0xFF);
     22e:	8a 2f       	mov	r24, r26
     230:	80 95       	com	r24
     232:	8c bd       	out	0x2c, r24	; 44

		// 中断允许
		TIMSK |= _BV(TOIE1);
     234:	89 b7       	in	r24, 0x39	; 57
     236:	84 60       	ori	r24, 0x04	; 4
     238:	89 bf       	out	0x39, r24	; 57
		sei();
     23a:	78 94       	sei

		// assign new position_us
		if (abs(g_runtime_svrs[g_active_svr_idx].save_position_us - g_runtime_svrs[g_active_svr_idx].position_us)
     23c:	fa 01       	movw	r30, r20
     23e:	63 e0       	ldi	r22, 0x03	; 3
     240:	ee 0f       	add	r30, r30
     242:	ff 1f       	adc	r31, r31
     244:	6a 95       	dec	r22
     246:	e1 f7       	brne	.-8      	; 0x240 <__vector_9+0xd8>
     248:	e4 52       	subi	r30, 0x24	; 36
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	26 81       	ldd	r18, Z+6	; 0x06
     24e:	37 81       	ldd	r19, Z+7	; 0x07
     250:	ce 01       	movw	r24, r28
     252:	8a 1b       	sub	r24, r26
     254:	9b 0b       	sbc	r25, r27
     256:	97 ff       	sbrs	r25, 7
     258:	03 c0       	rjmp	.+6      	; 0x260 <__vector_9+0xf8>
     25a:	90 95       	com	r25
     25c:	81 95       	neg	r24
     25e:	9f 4f       	sbci	r25, 0xFF	; 255
     260:	b9 01       	movw	r22, r18
     262:	37 ff       	sbrs	r19, 7
     264:	04 c0       	rjmp	.+8      	; 0x26e <__vector_9+0x106>
     266:	66 27       	eor	r22, r22
     268:	77 27       	eor	r23, r23
     26a:	62 1b       	sub	r22, r18
     26c:	73 0b       	sbc	r23, r19
     26e:	fa 01       	movw	r30, r20
     270:	43 e0       	ldi	r20, 0x03	; 3
     272:	ee 0f       	add	r30, r30
     274:	ff 1f       	adc	r31, r31
     276:	4a 95       	dec	r20
     278:	e1 f7       	brne	.-8      	; 0x272 <__vector_9+0x10a>
     27a:	68 17       	cp	r22, r24
     27c:	79 07       	cpc	r23, r25
     27e:	2c f0       	brlt	.+10     	; 0x28a <__vector_9+0x122>
				<= abs(g_runtime_svrs[g_active_svr_idx].speed))
		{
			g_runtime_svrs[g_active_svr_idx].position_us
     280:	e4 52       	subi	r30, 0x24	; 36
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	d1 83       	std	Z+1, r29	; 0x01
     286:	c0 83       	st	Z, r28
     288:	06 c0       	rjmp	.+12     	; 0x296 <__vector_9+0x12e>
					= g_runtime_svrs[g_active_svr_idx].save_position_us;
		}
		else
		{
			g_runtime_svrs[g_active_svr_idx].position_us
     28a:	e4 52       	subi	r30, 0x24	; 36
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	2a 0f       	add	r18, r26
     290:	3b 1f       	adc	r19, r27
     292:	31 83       	std	Z+1, r19	; 0x01
     294:	20 83       	st	Z, r18
					+= g_runtime_svrs[g_active_svr_idx].speed;
		}
	}

}
     296:	ff 91       	pop	r31
     298:	ef 91       	pop	r30
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	bf 91       	pop	r27
     2a0:	af 91       	pop	r26
     2a2:	9f 91       	pop	r25
     2a4:	8f 91       	pop	r24
     2a6:	7f 91       	pop	r23
     2a8:	6f 91       	pop	r22
     2aa:	5f 91       	pop	r21
     2ac:	4f 91       	pop	r20
     2ae:	3f 91       	pop	r19
     2b0:	2f 91       	pop	r18
     2b2:	0f 90       	pop	r0
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	0f 90       	pop	r0
     2b8:	1f 90       	pop	r1
     2ba:	18 95       	reti

000002bc <rt_ver>:
	return TRUE;
}

int8_t rt_ver(void)
{
	printf_P(RTL_M_ID);
     2bc:	00 d0       	rcall	.+0      	; 0x2be <rt_ver+0x2>
     2be:	80 e3       	ldi	r24, 0x30	; 48
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ed b7       	in	r30, 0x3d	; 61
     2c4:	fe b7       	in	r31, 0x3e	; 62
     2c6:	92 83       	std	Z+2, r25	; 0x02
     2c8:	81 83       	std	Z+1, r24	; 0x01
     2ca:	d7 d5       	rcall	.+2990   	; 0xe7a <printf_P>
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
	return TRUE;
}
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	08 95       	ret

000002d4 <rt_smvr>:
//{ "AT*RUN", &rt_run },
{ "W", &rt_cywt },
{ "R", &rt_cyrd }, };

int8_t rt_smvr(void)
{
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cc ed       	ldi	r28, 0xDC	; 220
     2e2:	d0 e0       	ldi	r29, 0x00	; 0
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	10 e0       	ldi	r17, 0x00	; 0
	// check parameters
	int i;
	for (i = 0; i < 8; ++i)
	{
		printf("\r\nSMVR:%d,%d,%d,%d,%d\r\n", i,
     2e8:	80 e6       	ldi	r24, 0x60	; 96
     2ea:	e8 2e       	mov	r14, r24
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	f8 2e       	mov	r15, r24
     2f0:	8d b7       	in	r24, 0x3d	; 61
     2f2:	9e b7       	in	r25, 0x3e	; 62
     2f4:	0c 97       	sbiw	r24, 0x0c	; 12
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	9e bf       	out	0x3e, r25	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	8d bf       	out	0x3d, r24	; 61
     300:	ed b7       	in	r30, 0x3d	; 61
     302:	fe b7       	in	r31, 0x3e	; 62
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	ad b7       	in	r26, 0x3d	; 61
     308:	be b7       	in	r27, 0x3e	; 62
     30a:	12 96       	adiw	r26, 0x02	; 2
     30c:	fc 92       	st	X, r15
     30e:	ee 92       	st	-X, r14
     310:	11 97       	sbiw	r26, 0x01	; 1
     312:	13 83       	std	Z+3, r17	; 0x03
     314:	02 83       	std	Z+2, r16	; 0x02
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	9d 81       	ldd	r25, Y+5	; 0x05
     31a:	95 83       	std	Z+5, r25	; 0x05
     31c:	84 83       	std	Z+4, r24	; 0x04
     31e:	88 81       	ld	r24, Y
     320:	99 81       	ldd	r25, Y+1	; 0x01
     322:	97 83       	std	Z+7, r25	; 0x07
     324:	86 83       	std	Z+6, r24	; 0x06
     326:	8a 81       	ldd	r24, Y+2	; 0x02
     328:	9b 81       	ldd	r25, Y+3	; 0x03
     32a:	91 87       	std	Z+9, r25	; 0x09
     32c:	80 87       	std	Z+8, r24	; 0x08
     32e:	8e 81       	ldd	r24, Y+6	; 0x06
     330:	9f 81       	ldd	r25, Y+7	; 0x07
     332:	93 87       	std	Z+11, r25	; 0x0b
     334:	82 87       	std	Z+10, r24	; 0x0a
     336:	8f d5       	rcall	.+2846   	; 0xe56 <printf>

int8_t rt_smvr(void)
{
	// check parameters
	int i;
	for (i = 0; i < 8; ++i)
     338:	0f 5f       	subi	r16, 0xFF	; 255
     33a:	1f 4f       	sbci	r17, 0xFF	; 255
     33c:	28 96       	adiw	r28, 0x08	; 8
     33e:	8d b7       	in	r24, 0x3d	; 61
     340:	9e b7       	in	r25, 0x3e	; 62
     342:	0c 96       	adiw	r24, 0x0c	; 12
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	9e bf       	out	0x3e, r25	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	8d bf       	out	0x3d, r24	; 61
     34e:	08 30       	cpi	r16, 0x08	; 8
     350:	11 05       	cpc	r17, r1
     352:	71 f6       	brne	.-100    	; 0x2f0 <rt_smvr+0x1c>
				g_runtime_svrs[i].position_us,
				g_runtime_svrs[i].hold_time_count, g_runtime_svrs[i].speed);
	}

	return TRUE;
}
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	08 95       	ret

00000364 <rtcmd_main_handle>:

/**
 * AT-Command main handle
 */
void rtcmd_main_handle(void)
{
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
	const char* ERROR_STR = "\r\nERROR\r\n";
	const char* OK_STR = "\r\nOK\r\n";
	int i;
	for (i = 0; i < SIZEOF(g_cmmd_handles); ++i)
	{
		if (0 == strcmp(g_cmmd_handles[i].cmmd, g_user_rtcmmd.cmmd))
     370:	e0 90 a9 01 	lds	r14, 0x01A9
     374:	f0 90 aa 01 	lds	r15, 0x01AA
     378:	06 e5       	ldi	r16, 0x56	; 86
     37a:	11 e0       	ldi	r17, 0x01	; 1
     37c:	c0 e0       	ldi	r28, 0x00	; 0
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	f8 01       	movw	r30, r16
     382:	80 81       	ld	r24, Z
     384:	91 81       	ldd	r25, Z+1	; 0x01
     386:	b7 01       	movw	r22, r14
     388:	14 d5       	rcall	.+2600   	; 0xdb2 <strcmp>
     38a:	0c 5f       	subi	r16, 0xFC	; 252
     38c:	1f 4f       	sbci	r17, 0xFF	; 255
     38e:	00 97       	sbiw	r24, 0x00	; 0
     390:	81 f4       	brne	.+32     	; 0x3b2 <rtcmd_main_handle+0x4e>
		{
			if (g_cmmd_handles[i].cmmd_handle)
     392:	cc 0f       	add	r28, r28
     394:	dd 1f       	adc	r29, r29
     396:	cc 0f       	add	r28, r28
     398:	dd 1f       	adc	r29, r29
     39a:	ca 5a       	subi	r28, 0xAA	; 170
     39c:	de 4f       	sbci	r29, 0xFE	; 254
     39e:	ea 81       	ldd	r30, Y+2	; 0x02
     3a0:	fb 81       	ldd	r31, Y+3	; 0x03
     3a2:	30 97       	sbiw	r30, 0x00	; 0
     3a4:	69 f0       	breq	.+26     	; 0x3c0 <rtcmd_main_handle+0x5c>
			{
				if (g_cmmd_handles[i].cmmd_handle())
     3a6:	09 95       	icall
     3a8:	88 23       	and	r24, r24
     3aa:	39 f0       	breq	.+14     	; 0x3ba <rtcmd_main_handle+0x56>
					printf(OK_STR);
     3ac:	88 e7       	ldi	r24, 0x78	; 120
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	06 c0       	rjmp	.+12     	; 0x3be <rtcmd_main_handle+0x5a>
void rtcmd_main_handle(void)
{
	const char* ERROR_STR = "\r\nERROR\r\n";
	const char* OK_STR = "\r\nOK\r\n";
	int i;
	for (i = 0; i < SIZEOF(g_cmmd_handles); ++i)
     3b2:	21 96       	adiw	r28, 0x01	; 1
     3b4:	c8 30       	cpi	r28, 0x08	; 8
     3b6:	d1 05       	cpc	r29, r1
     3b8:	19 f7       	brne	.-58     	; 0x380 <rtcmd_main_handle+0x1c>
		}
	}

	if (i >= SIZEOF(g_cmmd_handles))
	{
		printf(ERROR_STR);
     3ba:	8e e7       	ldi	r24, 0x7E	; 126
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	80 d5       	rcall	.+2816   	; 0xec0 <puts>
	}
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	08 95       	ret

000003ce <main>:
{
	stdout = &mystdout;
}

int main(void)
{
     3ce:	4f 92       	push	r4
     3d0:	5f 92       	push	r5
     3d2:	6f 92       	push	r6
     3d4:	7f 92       	push	r7
     3d6:	8f 92       	push	r8
     3d8:	9f 92       	push	r9
     3da:	af 92       	push	r10
     3dc:	bf 92       	push	r11
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	c4 56       	subi	r28, 0x64	; 100
     3f4:	d0 40       	sbci	r29, 0x00	; 0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61

	char rcv_buf[100] = { 0 };
     400:	fe 01       	movw	r30, r28
     402:	31 96       	adiw	r30, 0x01	; 1
     404:	84 e6       	ldi	r24, 0x64	; 100
     406:	df 01       	movw	r26, r30
     408:	1d 92       	st	X+, r1
     40a:	8a 95       	dec	r24
     40c:	e9 f7       	brne	.-6      	; 0x408 <main+0x3a>
	int rcv_char = 0;
	int16_t rcv_buf_end = 0;
	int8_t cmd_is_busy = 0;
	g_active_svr_idx = -1;
     40e:	8f ef       	ldi	r24, 0xFF	; 255
     410:	9f ef       	ldi	r25, 0xFF	; 255
     412:	90 93 a5 01 	sts	0x01A5, r25
     416:	80 93 a4 01 	sts	0x01A4, r24
 */
FILE mystdout =
FDEV_SETUP_STREAM(avr_uart_putchar, avr_uart_getchar, _FDEV_SETUP_WRITE);
static void init_c_language(void)
{
	stdout = &mystdout;
     41a:	8e ec       	ldi	r24, 0xCE	; 206
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	90 93 d7 01 	sts	0x01D7, r25
     422:	80 93 d6 01 	sts	0x01D6, r24
	/*
	 *	Initialize AVR MCU device
	 */

	// Disable interrupt
	cli();
     426:	f8 94       	cli
 * Initialize SVR Motor PWM IO Pins
 */
static void InitSVRGPIO(void)
{
	// OUTPUT
	DDRC |= _BV(SVR1) | _BV(SVR2) | _BV(SVR3) | _BV(SVR4);
     428:	84 b3       	in	r24, 0x14	; 20
     42a:	8f 60       	ori	r24, 0x0F	; 15
     42c:	84 bb       	out	0x14, r24	; 20
	DDRD |= _BV(SVR5) | _BV(SVR6) | _BV(SVR7) | _BV(SVR8);
     42e:	81 b3       	in	r24, 0x11	; 17
     430:	80 6f       	ori	r24, 0xF0	; 240
     432:	81 bb       	out	0x11, r24	; 17

	// enable upload R
	PORTC = _BV(PC4); // i2c SCL
     434:	80 e1       	ldi	r24, 0x10	; 16
     436:	85 bb       	out	0x15, r24	; 21
	PORTC = _BV(PC5); // i2c SDA
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	85 bb       	out	0x15, r24	; 21

	//avr_ee24xx_init();
	TWBR = 8;
     43c:	88 e0       	ldi	r24, 0x08	; 8
     43e:	80 b9       	out	0x00, r24	; 0
	TWCR|=1<<TWEN;
     440:	86 b7       	in	r24, 0x36	; 54
     442:	84 60       	ori	r24, 0x04	; 4
     444:	86 bf       	out	0x36, r24	; 54
 */
static void InitTimer(void)
{

	// TIMER0 预分频 ck/256
	TCCR0 = _BV(CS02);
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	83 bf       	out	0x33, r24	; 51
	TIMSK |= _BV(TOIE0);
     44a:	89 b7       	in	r24, 0x39	; 57
     44c:	81 60       	ori	r24, 0x01	; 1
     44e:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0xB2;
     450:	82 eb       	ldi	r24, 0xB2	; 178
     452:	82 bf       	out	0x32, r24	; 50

	// TIMER1, clkI/O/8
	TCCR1B |= _BV(CS11);
     454:	8e b5       	in	r24, 0x2e	; 46
     456:	82 60       	ori	r24, 0x02	; 2
     458:	8e bd       	out	0x2e, r24	; 46

	// Initialize Timer for generating PWM signal
	InitTimer();

	// Initialize UART register and set band rate for online debugging
	eeprom_busy_wait();
     45a:	e1 99       	sbic	0x1c, 1	; 28
     45c:	fe cf       	rjmp	.-4      	; 0x45a <main+0x8c>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     45e:	e1 99       	sbic	0x1c, 1	; 28
     460:	fe cf       	rjmp	.-4      	; 0x45e <main+0x90>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	9f bb       	out	0x1f, r25	; 31
     468:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     46a:	e0 9a       	sbi	0x1c, 0	; 28
     46c:	9d b3       	in	r25, 0x1d	; 29
	baud_ubrr_temp = eeprom_read_byte(&g_eprom_baud_ubrr);

	if (baud_ubrr_temp == 255 || baud_ubrr_temp == 0)
     46e:	89 2f       	mov	r24, r25
     470:	81 50       	subi	r24, 0x01	; 1
     472:	8e 3f       	cpi	r24, 0xFE	; 254
     474:	18 f0       	brcs	.+6      	; 0x47c <__stack+0x1d>
	{
		avr_uart_init(25);
     476:	89 e1       	ldi	r24, 0x19	; 25
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 c0       	rjmp	.+4      	; 0x480 <__stack+0x21>
	}
	else
	{
		avr_uart_init(baud_ubrr_temp);
     47c:	89 2f       	mov	r24, r25
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	19 de       	rcall	.-974    	; 0xb4 <avr_uart_init>
	}

	eeprom_busy_wait();
     482:	e1 99       	sbic	0x1c, 1	; 28
     484:	fe cf       	rjmp	.-4      	; 0x482 <__stack+0x23>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     486:	e1 99       	sbic	0x1c, 1	; 28
     488:	fe cf       	rjmp	.-4      	; 0x486 <__stack+0x27>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	9f bb       	out	0x1f, r25	; 31
     490:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     492:	e0 9a       	sbi	0x1c, 0	; 28
     494:	8d b3       	in	r24, 0x1d	; 29
	g_startup_run_pg = eeprom_read_byte(&g_eprom_auto_run);
     496:	80 93 a6 01 	sts	0x01A6, r24
	// enable watch dog, 128K CLK
	//wdt_enable(3);

	// Enable interrupt
	sei();
     49a:	78 94       	sei

	init_c_language();

	init_board();

	printf_P(RTL_M_CMDREADY);
     49c:	00 d0       	rcall	.+0      	; 0x49e <__stack+0x3f>
     49e:	86 e2       	ldi	r24, 0x26	; 38
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	ed b7       	in	r30, 0x3d	; 61
     4a4:	fe b7       	in	r31, 0x3e	; 62
     4a6:	92 83       	std	Z+2, r25	; 0x02
     4a8:	81 83       	std	Z+1, r24	; 0x01
     4aa:	e7 d4       	rcall	.+2510   	; 0xe7a <printf_P>
     4ac:	ee 24       	eor	r14, r14
     4ae:	ff 24       	eor	r15, r15
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
			putchar(rcv_char);
			if (rcv_char != '\r')
			{
				if (rcv_buf_end == 100)
					rcv_buf_end = 0;
				rcv_buf[rcv_buf_end++] = rcv_char;
     4b4:	5e 01       	movw	r10, r28
     4b6:	08 94       	sec
     4b8:	a1 1c       	adc	r10, r1
     4ba:	b1 1c       	adc	r11, r1
			{
				cmd_is_busy = TRUE;

				rcv_buf[rcv_buf_end] = '\0';
				rcv_buf_end = 0;
				printf("%s",rcv_buf);
     4bc:	27 e8       	ldi	r18, 0x87	; 135
     4be:	42 2e       	mov	r4, r18
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	52 2e       	mov	r5, r18
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	69 2e       	mov	r6, r25
     4c8:	71 2c       	mov	r7, r1
     4ca:	6c 0e       	add	r6, r28
     4cc:	7d 1e       	adc	r7, r29
						*p++ = '\0';
						g_user_rtcmmd.params[g_user_rtcmmd.param_count++]
								= buf_ptr;
						buf_ptr = p;
					}
					else if (*p == '\0')
     4ce:	89 ea       	ldi	r24, 0xA9	; 169
     4d0:	88 2e       	mov	r8, r24
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	98 2e       	mov	r9, r24

				// execute user command
				rtcmd_main_handle();

				// clear user at command buf.
				memset(&g_user_rtcmmd, 0, sizeof(g_user_rtcmmd));
     4d6:	0b e2       	ldi	r16, 0x2B	; 43
     4d8:	c0 2e       	mov	r12, r16

			// feed watch dog
			//wdt_reset();

			// receive a char data
			rcv_char = avr_uart_getc();
     4da:	fb dd       	rcall	.-1034   	; 0xd2 <avr_uart_getc>
     4dc:	d8 2e       	mov	r13, r24
     4de:	08 2f       	mov	r16, r24
     4e0:	10 e0       	ldi	r17, 0x00	; 0
			//rcv_char = getchar();
			if (EOF == rcv_char || cmd_is_busy)
			{
				continue;
			}
			putchar(rcv_char);
     4e2:	60 91 d6 01 	lds	r22, 0x01D6
     4e6:	70 91 d7 01 	lds	r23, 0x01D7
     4ea:	c8 01       	movw	r24, r16
     4ec:	88 d4       	rcall	.+2320   	; 0xdfe <fputc>
			if (rcv_char != '\r')
     4ee:	0d 30       	cpi	r16, 0x0D	; 13
     4f0:	11 05       	cpc	r17, r1
     4f2:	71 f0       	breq	.+28     	; 0x510 <__stack+0xb1>
			{
				if (rcv_buf_end == 100)
     4f4:	f4 e6       	ldi	r31, 0x64	; 100
     4f6:	ef 16       	cp	r14, r31
     4f8:	f1 04       	cpc	r15, r1
     4fa:	11 f4       	brne	.+4      	; 0x500 <__stack+0xa1>
     4fc:	ee 24       	eor	r14, r14
     4fe:	ff 24       	eor	r15, r15
					rcv_buf_end = 0;
				rcv_buf[rcv_buf_end++] = rcv_char;
     500:	f5 01       	movw	r30, r10
     502:	ee 0d       	add	r30, r14
     504:	ff 1d       	adc	r31, r15
     506:	d0 82       	st	Z, r13
     508:	08 94       	sec
     50a:	e1 1c       	adc	r14, r1
     50c:	f1 1c       	adc	r15, r1
     50e:	e5 cf       	rjmp	.-54     	; 0x4da <__stack+0x7b>
			}
			else
			{
				cmd_is_busy = TRUE;

				rcv_buf[rcv_buf_end] = '\0';
     510:	ea 0c       	add	r14, r10
     512:	fb 1c       	adc	r15, r11
     514:	d7 01       	movw	r26, r14
     516:	1c 92       	st	X, r1
				rcv_buf_end = 0;
				printf("%s",rcv_buf);
     518:	00 d0       	rcall	.+0      	; 0x51a <__stack+0xbb>
     51a:	00 d0       	rcall	.+0      	; 0x51c <__stack+0xbd>
     51c:	ed b7       	in	r30, 0x3d	; 61
     51e:	fe b7       	in	r31, 0x3e	; 62
     520:	52 82       	std	Z+2, r5	; 0x02
     522:	41 82       	std	Z+1, r4	; 0x01
     524:	b4 82       	std	Z+4, r11	; 0x04
     526:	a3 82       	std	Z+3, r10	; 0x03
     528:	96 d4       	rcall	.+2348   	; 0xe56 <printf>
     52a:	60 91 a9 01 	lds	r22, 0x01A9
     52e:	70 91 aa 01 	lds	r23, 0x01AA
     532:	00 91 ab 01 	lds	r16, 0x01AB
     536:	d5 01       	movw	r26, r10
     538:	a3 01       	movw	r20, r6
     53a:	95 01       	movw	r18, r10
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0a c0       	rjmp	.+20     	; 0x55a <__stack+0xfb>
     546:	f2 2f       	mov	r31, r18
     548:	e3 2f       	mov	r30, r19
     54a:	9b 01       	movw	r18, r22
     54c:	11 96       	adiw	r26, 0x01	; 1
     54e:	4f 5f       	subi	r20, 0xFF	; 255
     550:	5f 4f       	sbci	r21, 0xFF	; 255
     552:	b9 01       	movw	r22, r18
     554:	8f 2f       	mov	r24, r31
     556:	9e 2f       	mov	r25, r30
     558:	9c 01       	movw	r18, r24
				char* p = rcv_buf;
				char* buf_ptr = rcv_buf;

				while (TRUE)
				{
					if (*p == '=')
     55a:	8c 91       	ld	r24, X
     55c:	8d 33       	cpi	r24, 0x3D	; 61
     55e:	21 f4       	brne	.+8      	; 0x568 <__stack+0x109>
					{
						*p++ = '\0';
     560:	1c 92       	st	X, r1
     562:	f4 2f       	mov	r31, r20
     564:	e5 2f       	mov	r30, r21
     566:	f2 cf       	rjmp	.-28     	; 0x54c <__stack+0xed>
						g_user_rtcmmd.cmmd = buf_ptr;
						buf_ptr = p;
					}
					else if (*p == ',')
     568:	8c 32       	cpi	r24, 0x2C	; 44
     56a:	79 f4       	brne	.+30     	; 0x58a <__stack+0x12b>
					{
						*p++ = '\0';
     56c:	1c 92       	st	X, r1
						g_user_rtcmmd.params[g_user_rtcmmd.param_count++]
     56e:	e0 2f       	mov	r30, r16
     570:	ff 27       	eor	r31, r31
     572:	e7 fd       	sbrc	r30, 7
     574:	f0 95       	com	r31
     576:	ee 0f       	add	r30, r30
     578:	ff 1f       	adc	r31, r31
     57a:	e7 55       	subi	r30, 0x57	; 87
     57c:	fe 4f       	sbci	r31, 0xFE	; 254
     57e:	34 83       	std	Z+4, r19	; 0x04
     580:	23 83       	std	Z+3, r18	; 0x03
     582:	0f 5f       	subi	r16, 0xFF	; 255
     584:	f4 2f       	mov	r31, r20
     586:	e5 2f       	mov	r30, r21
     588:	e0 cf       	rjmp	.-64     	; 0x54a <__stack+0xeb>
								= buf_ptr;
						buf_ptr = p;
					}
					else if (*p == '\0')
     58a:	88 23       	and	r24, r24
     58c:	e1 f6       	brne	.-72     	; 0x546 <__stack+0xe7>
     58e:	60 93 a9 01 	sts	0x01A9, r22
     592:	f4 01       	movw	r30, r8
     594:	71 83       	std	Z+1, r23	; 0x01
     596:	00 93 ab 01 	sts	0x01AB, r16
					{
						if (buf_ptr != p)
     59a:	2a 17       	cp	r18, r26
     59c:	3b 07       	cpc	r19, r27
     59e:	a1 f0       	breq	.+40     	; 0x5c8 <__stack+0x169>
						{
							if (NULL == g_user_rtcmmd.cmmd)
     5a0:	67 2b       	or	r22, r23
     5a2:	29 f4       	brne	.+10     	; 0x5ae <__stack+0x14f>
							{
								g_user_rtcmmd.cmmd = buf_ptr;
     5a4:	30 93 aa 01 	sts	0x01AA, r19
     5a8:	20 93 a9 01 	sts	0x01A9, r18
     5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <__stack+0x169>
							}
							else
							{
								g_user_rtcmmd.params[g_user_rtcmmd.param_count++]
     5ae:	e0 2f       	mov	r30, r16
     5b0:	ff 27       	eor	r31, r31
     5b2:	e7 fd       	sbrc	r30, 7
     5b4:	f0 95       	com	r31
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	e7 55       	subi	r30, 0x57	; 87
     5bc:	fe 4f       	sbci	r31, 0xFE	; 254
     5be:	34 83       	std	Z+4, r19	; 0x04
     5c0:	23 83       	std	Z+3, r18	; 0x03
     5c2:	0f 5f       	subi	r16, 0xFF	; 255
     5c4:	00 93 ab 01 	sts	0x01AB, r16
						p++;
					}
				}

				// execute user command
				rtcmd_main_handle();
     5c8:	cd de       	rcall	.-614    	; 0x364 <rtcmd_main_handle>

				// clear user at command buf.
				memset(&g_user_rtcmmd, 0, sizeof(g_user_rtcmmd));
     5ca:	d4 01       	movw	r26, r8
     5cc:	ec 2d       	mov	r30, r12
     5ce:	1d 92       	st	X+, r1
     5d0:	ea 95       	dec	r30
     5d2:	e9 f7       	brne	.-6      	; 0x5ce <__stack+0x16f>
     5d4:	ee 24       	eor	r14, r14
     5d6:	ff 24       	eor	r15, r15
     5d8:	80 cf       	rjmp	.-256    	; 0x4da <__stack+0x7b>

000005da <rt_cyrd>:

	return ret;
}

int8_t rt_cyrd(void)
{
     5da:	8f 92       	push	r8
     5dc:	9f 92       	push	r9
     5de:	af 92       	push	r10
     5e0:	bf 92       	push	r11
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	68 97       	sbiw	r28, 0x18	; 24
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
//	int8_t len = atoi(g_user_rtcmmd.params[1]);
//	if (len < 0 || len > 8)
//		return FALSE;
//	printf("len=%d\r", len);

	TWBR = 8;
     602:	98 e0       	ldi	r25, 0x08	; 8
     604:	90 b9       	out	0x00, r25	; 0

	int8_t i = 0;
	int8_t len = 24;
	uint8_t temp[24] = {0};
     606:	88 e1       	ldi	r24, 0x18	; 24
     608:	7e 01       	movw	r14, r28
     60a:	08 94       	sec
     60c:	e1 1c       	adc	r14, r1
     60e:	f1 1c       	adc	r15, r1
     610:	d7 01       	movw	r26, r14
     612:	e8 2f       	mov	r30, r24
     614:	1d 92       	st	X+, r1
     616:	ea 95       	dec	r30
     618:	e9 f7       	brne	.-6      	; 0x614 <rt_cyrd+0x3a>
//		}
//		printf("\r\n");
//		return TRUE;
//	}

	TWBR = 8;
     61a:	90 b9       	out	0x00, r25	; 0
	memset(temp, 0, sizeof(temp));
     61c:	d7 01       	movw	r26, r14
     61e:	1d 92       	st	X+, r1
     620:	8a 95       	dec	r24
     622:	e9 f7       	brne	.-6      	; 0x61e <rt_cyrd+0x44>
	int8_t ret = avr_cy2239x_read_buffer(0x40, len, (uint8_t*) &temp[0]);
     624:	80 e4       	ldi	r24, 0x40	; 64
     626:	68 e1       	ldi	r22, 0x18	; 24
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	a7 01       	movw	r20, r14
     62c:	ed d2       	rcall	.+1498   	; 0xc08 <avr_cy2239x_read_buffer>
     62e:	18 2f       	mov	r17, r24
        printf("S2,ret=%d\r", ret);
     630:	00 d0       	rcall	.+0      	; 0x632 <rt_cyrd+0x58>
     632:	00 d0       	rcall	.+0      	; 0x634 <rt_cyrd+0x5a>
     634:	8a e8       	ldi	r24, 0x8A	; 138
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	ed b7       	in	r30, 0x3d	; 61
     63a:	fe b7       	in	r31, 0x3e	; 62
     63c:	92 83       	std	Z+2, r25	; 0x02
     63e:	81 83       	std	Z+1, r24	; 0x01
     640:	81 2f       	mov	r24, r17
     642:	99 27       	eor	r25, r25
     644:	87 fd       	sbrc	r24, 7
     646:	90 95       	com	r25
     648:	94 83       	std	Z+4, r25	; 0x04
     64a:	83 83       	std	Z+3, r24	; 0x03
     64c:	04 d4       	rcall	.+2056   	; 0xe56 <printf>
        if (ret == TRUE)
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	11 30       	cpi	r17, 0x01	; 1
     658:	11 f0       	breq	.+4      	; 0x65e <rt_cyrd+0x84>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	48 c0       	rjmp	.+144    	; 0x6ee <rt_cyrd+0x114>
        {
                printf("\r\n*EER:");
     65e:	00 d0       	rcall	.+0      	; 0x660 <rt_cyrd+0x86>
     660:	85 e9       	ldi	r24, 0x95	; 149
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	ad b7       	in	r26, 0x3d	; 61
     666:	be b7       	in	r27, 0x3e	; 62
     668:	12 96       	adiw	r26, 0x02	; 2
     66a:	9c 93       	st	X, r25
     66c:	8e 93       	st	-X, r24
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	f2 d3       	rcall	.+2020   	; 0xe56 <printf>
     672:	87 01       	movw	r16, r14
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
                for (i = 0; i < len; ++i)
                {
                        if (i != len - 1)
                                printf("%d,", temp[i]);
                        else
                                printf("%d", temp[i]);
     678:	51 ea       	ldi	r21, 0xA1	; 161
     67a:	85 2e       	mov	r8, r21
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	95 2e       	mov	r9, r21
        {
                printf("\r\n*EER:");
                for (i = 0; i < len; ++i)
                {
                        if (i != len - 1)
                                printf("%d,", temp[i]);
     680:	4d e9       	ldi	r20, 0x9D	; 157
     682:	a4 2e       	mov	r10, r20
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	b4 2e       	mov	r11, r20
	int8_t ret = avr_cy2239x_read_buffer(0x40, len, (uint8_t*) &temp[0]);
        printf("S2,ret=%d\r", ret);
        if (ret == TRUE)
        {
                printf("\r\n*EER:");
                for (i = 0; i < len; ++i)
     688:	39 e1       	ldi	r19, 0x19	; 25
     68a:	c3 2e       	mov	r12, r19
     68c:	d1 2c       	mov	r13, r1
     68e:	cc 0e       	add	r12, r28
     690:	dd 1e       	adc	r13, r29
                {
                        if (i != len - 1)
     692:	80 2f       	mov	r24, r16
     694:	8e 19       	sub	r24, r14
     696:	87 31       	cpi	r24, 0x17	; 23
     698:	71 f0       	breq	.+28     	; 0x6b6 <rt_cyrd+0xdc>
                                printf("%d,", temp[i]);
     69a:	00 d0       	rcall	.+0      	; 0x69c <rt_cyrd+0xc2>
     69c:	00 d0       	rcall	.+0      	; 0x69e <rt_cyrd+0xc4>
     69e:	ed b7       	in	r30, 0x3d	; 61
     6a0:	fe b7       	in	r31, 0x3e	; 62
     6a2:	31 96       	adiw	r30, 0x01	; 1
     6a4:	ad b7       	in	r26, 0x3d	; 61
     6a6:	be b7       	in	r27, 0x3e	; 62
     6a8:	12 96       	adiw	r26, 0x02	; 2
     6aa:	bc 92       	st	X, r11
     6ac:	ae 92       	st	-X, r10
     6ae:	11 97       	sbiw	r26, 0x01	; 1
     6b0:	d8 01       	movw	r26, r16
     6b2:	8c 91       	ld	r24, X
     6b4:	0c c0       	rjmp	.+24     	; 0x6ce <rt_cyrd+0xf4>
                        else
                                printf("%d", temp[i]);
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <rt_cyrd+0xde>
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <rt_cyrd+0xe0>
     6ba:	ed b7       	in	r30, 0x3d	; 61
     6bc:	fe b7       	in	r31, 0x3e	; 62
     6be:	31 96       	adiw	r30, 0x01	; 1
     6c0:	ad b7       	in	r26, 0x3d	; 61
     6c2:	be b7       	in	r27, 0x3e	; 62
     6c4:	12 96       	adiw	r26, 0x02	; 2
     6c6:	9c 92       	st	X, r9
     6c8:	8e 92       	st	-X, r8
     6ca:	11 97       	sbiw	r26, 0x01	; 1
     6cc:	88 8d       	ldd	r24, Y+24	; 0x18
     6ce:	82 83       	std	Z+2, r24	; 0x02
     6d0:	13 82       	std	Z+3, r1	; 0x03
     6d2:	c1 d3       	rcall	.+1922   	; 0xe56 <printf>
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 5f       	subi	r16, 0xFF	; 255
     6de:	1f 4f       	sbci	r17, 0xFF	; 255
	int8_t ret = avr_cy2239x_read_buffer(0x40, len, (uint8_t*) &temp[0]);
        printf("S2,ret=%d\r", ret);
        if (ret == TRUE)
        {
                printf("\r\n*EER:");
                for (i = 0; i < len; ++i)
     6e0:	0c 15       	cp	r16, r12
     6e2:	1d 05       	cpc	r17, r13
     6e4:	b1 f6       	brne	.-84     	; 0x692 <rt_cyrd+0xb8>
                        if (i != len - 1)
                                printf("%d,", temp[i]);
                        else
                                printf("%d", temp[i]);
                }
                printf("\r\n");
     6e6:	84 ea       	ldi	r24, 0xA4	; 164
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	ea d3       	rcall	.+2004   	; 0xec0 <puts>
     6ec:	81 e0       	ldi	r24, 0x01	; 1
                return TRUE;
        }

	return FALSE;
}
     6ee:	68 96       	adiw	r28, 0x18	; 24
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	cf 91       	pop	r28
     6fc:	df 91       	pop	r29
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	bf 90       	pop	r11
     70c:	af 90       	pop	r10
     70e:	9f 90       	pop	r9
     710:	8f 90       	pop	r8
     712:	08 95       	ret

00000714 <rt_cywt>:

#define S0		PC4	
#define S1 		PC5
#define S2 		PC3
int8_t rt_cywt(void)
{
     714:	1f 93       	push	r17
     716:	df 93       	push	r29
     718:	cf 93       	push	r28
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	ac 97       	sbiw	r28, 0x2c	; 44
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
        int ret = FALSE;
        {
            uint8_t temp[] = {0x00,0x00,0x05,0x05,0x01,
							  0x00,0x04,0x50,0x55,0x00,
							  0x00,0x00,0x00,0x00,0x00,
							  0xAA,0x00,0x00,0xE9,0x08};
     72a:	de 01       	movw	r26, r28
     72c:	11 96       	adiw	r26, 0x01	; 1
     72e:	ee e8       	ldi	r30, 0x8E	; 142
     730:	f1 e0       	ldi	r31, 0x01	; 1
     732:	84 e1       	ldi	r24, 0x14	; 20
     734:	01 90       	ld	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	81 50       	subi	r24, 0x01	; 1
     73a:	e1 f7       	brne	.-8      	; 0x734 <rt_cywt+0x20>

            ret = avr_cy2239x_write_buffer(0x08, SIZEOF(temp), (uint8_t*) &temp[0]);
     73c:	88 e0       	ldi	r24, 0x08	; 8
     73e:	64 e1       	ldi	r22, 0x14	; 20
     740:	ae 01       	movw	r20, r28
     742:	4f 5f       	subi	r20, 0xFF	; 255
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	b6 d2       	rcall	.+1388   	; 0xcb4 <avr_cy2239x_write_buffer>
            printf("ret=%d\r", ret);
     748:	00 d0       	rcall	.+0      	; 0x74a <rt_cywt+0x36>
     74a:	00 d0       	rcall	.+0      	; 0x74c <rt_cywt+0x38>
     74c:	26 ea       	ldi	r18, 0xA6	; 166
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	ad b7       	in	r26, 0x3d	; 61
     752:	be b7       	in	r27, 0x3e	; 62
     754:	12 96       	adiw	r26, 0x02	; 2
     756:	3c 93       	st	X, r19
     758:	2e 93       	st	-X, r18
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	14 96       	adiw	r26, 0x04	; 4
     75e:	9c 93       	st	X, r25
     760:	8e 93       	st	-X, r24
     762:	13 97       	sbiw	r26, 0x03	; 3
     764:	78 d3       	rcall	.+1776   	; 0xe56 <printf>
        }

        {
            uint8_t temp[] = {0x35,0x92,0xE5,0x35,0x92,0xE5,0x35,0x92,0xE5,0x35,0x92,0xE5,0x35,0x92,0xE5,0x35,0x92,0xE5,0x35,0x92,0xE5,0x35,0x92,0xE5};
     766:	de 01       	movw	r26, r28
     768:	55 96       	adiw	r26, 0x15	; 21
     76a:	e6 e7       	ldi	r30, 0x76	; 118
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	88 e1       	ldi	r24, 0x18	; 24
     770:	01 90       	ld	r0, Z+
     772:	0d 92       	st	X+, r0
     774:	81 50       	subi	r24, 0x01	; 1
     776:	e1 f7       	brne	.-8      	; 0x770 <rt_cywt+0x5c>
            ret = avr_cy2239x_write_buffer(0x40, SIZEOF(temp), (uint8_t*) &temp[0]);
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	80 e4       	ldi	r24, 0x40	; 64
     782:	68 e1       	ldi	r22, 0x18	; 24
     784:	ae 01       	movw	r20, r28
     786:	4b 5e       	subi	r20, 0xEB	; 235
     788:	5f 4f       	sbci	r21, 0xFF	; 255
     78a:	94 d2       	rcall	.+1320   	; 0xcb4 <avr_cy2239x_write_buffer>
     78c:	18 2f       	mov	r17, r24
            printf("ret=%d\r", ret);
     78e:	00 d0       	rcall	.+0      	; 0x790 <rt_cywt+0x7c>
     790:	00 d0       	rcall	.+0      	; 0x792 <rt_cywt+0x7e>
     792:	ed b7       	in	r30, 0x3d	; 61
     794:	fe b7       	in	r31, 0x3e	; 62
     796:	31 96       	adiw	r30, 0x01	; 1
     798:	26 ea       	ldi	r18, 0xA6	; 166
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	ad b7       	in	r26, 0x3d	; 61
     79e:	be b7       	in	r27, 0x3e	; 62
     7a0:	12 96       	adiw	r26, 0x02	; 2
     7a2:	3c 93       	st	X, r19
     7a4:	2e 93       	st	-X, r18
     7a6:	11 97       	sbiw	r26, 0x01	; 1
     7a8:	82 83       	std	Z+2, r24	; 0x02
     7aa:	93 83       	std	Z+3, r25	; 0x03
     7ac:	54 d3       	rcall	.+1704   	; 0xe56 <printf>
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
        }

	return ret;
}
     7b6:	81 2f       	mov	r24, r17
     7b8:	ac 96       	adiw	r28, 0x2c	; 44
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	cf 91       	pop	r28
     7c6:	df 91       	pop	r29
     7c8:	1f 91       	pop	r17
     7ca:	08 95       	ret

000007cc <rt_radv>:
	printf_P(RTL_M_ID);
	return TRUE;
}

int8_t rt_radv(void)
{
     7cc:	0f 93       	push	r16
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29

	// check parameters
	if (g_user_rtcmmd.param_count < 1)
     7d2:	80 91 ab 01 	lds	r24, 0x01AB
     7d6:	18 16       	cp	r1, r24
     7d8:	9c f5       	brge	.+102    	; 0x840 <rt_radv+0x74>
	{
		return FALSE;
	}

	int8_t channel = atoi(g_user_rtcmmd.params[0]);
     7da:	80 91 ac 01 	lds	r24, 0x01AC
     7de:	90 91 ad 01 	lds	r25, 0x01AD
     7e2:	a4 d2       	rcall	.+1352   	; 0xd2c <atoi>
     7e4:	08 2f       	mov	r16, r24
	int16_t adc_value = 0;

	if (channel >= 0 && channel <= 7)
     7e6:	88 30       	cpi	r24, 0x08	; 8
     7e8:	58 f5       	brcc	.+86     	; 0x840 <rt_radv+0x74>
	{

		if (avr_adc_open(AVR_ADC_AREF_SRC_INNER2_5V, channel))
     7ea:	83 e0       	ldi	r24, 0x03	; 3
     7ec:	60 2f       	mov	r22, r16
     7ee:	73 d1       	rcall	.+742    	; 0xad6 <avr_adc_open>
     7f0:	88 23       	and	r24, r24
     7f2:	31 f1       	breq	.+76     	; 0x840 <rt_radv+0x74>
		{

			adc_value = avr_adc_read(channel);
     7f4:	80 2f       	mov	r24, r16
     7f6:	84 d1       	rcall	.+776    	; 0xb00 <avr_adc_read>
     7f8:	ec 01       	movw	r28, r24
			avr_adc_close();
     7fa:	80 d1       	rcall	.+768    	; 0xafc <avr_adc_close>

			printf("\r\n*RADV:%d,%d\r\n", channel, adc_value);
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <rt_radv+0x32>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <rt_radv+0x34>
     800:	00 d0       	rcall	.+0      	; 0x802 <rt_radv+0x36>
     802:	ed b7       	in	r30, 0x3d	; 61
     804:	fe b7       	in	r31, 0x3e	; 62
     806:	31 96       	adiw	r30, 0x01	; 1
     808:	8e ea       	ldi	r24, 0xAE	; 174
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	ad b7       	in	r26, 0x3d	; 61
     80e:	be b7       	in	r27, 0x3e	; 62
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	9c 93       	st	X, r25
     814:	8e 93       	st	-X, r24
     816:	11 97       	sbiw	r26, 0x01	; 1
     818:	80 2f       	mov	r24, r16
     81a:	99 27       	eor	r25, r25
     81c:	87 fd       	sbrc	r24, 7
     81e:	90 95       	com	r25
     820:	93 83       	std	Z+3, r25	; 0x03
     822:	82 83       	std	Z+2, r24	; 0x02
     824:	d5 83       	std	Z+5, r29	; 0x05
     826:	c4 83       	std	Z+4, r28	; 0x04
     828:	16 d3       	rcall	.+1580   	; 0xe56 <printf>
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	2d b7       	in	r18, 0x3d	; 61
     82e:	3e b7       	in	r19, 0x3e	; 62
     830:	2a 5f       	subi	r18, 0xFA	; 250
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	3e bf       	out	0x3e, r19	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	2d bf       	out	0x3d, r18	; 61
     83e:	01 c0       	rjmp	.+2      	; 0x842 <rt_radv+0x76>
			return TRUE;
     840:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FALSE;
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <rt_sbr>:
 * Default baud rate is 115200 bauds
 */
int8_t rt_sbr(void)
{
	// check parameters
	if (g_user_rtcmmd.param_count < 1)
     84a:	80 91 ab 01 	lds	r24, 0x01AB
     84e:	18 16       	cp	r1, r24
     850:	0c f0       	brlt	.+2      	; 0x854 <rt_sbr+0xa>
     852:	62 c0       	rjmp	.+196    	; 0x918 <rt_sbr+0xce>
	{
		return FALSE;
	}

	uint16_t baud_rate = atol(g_user_rtcmmd.params[0]);
     854:	80 91 ac 01 	lds	r24, 0x01AC
     858:	90 91 ad 01 	lds	r25, 0x01AD
     85c:	84 d2       	rcall	.+1288   	; 0xd66 <atol>
	uint8_t baud_ubrr = 0;
	switch (baud_rate)
     85e:	2b e4       	ldi	r18, 0x4B	; 75
     860:	60 30       	cpi	r22, 0x00	; 0
     862:	72 07       	cpc	r23, r18
     864:	11 f1       	breq	.+68     	; 0x8aa <rt_sbr+0x60>
     866:	ab e4       	ldi	r26, 0x4B	; 75
     868:	61 30       	cpi	r22, 0x01	; 1
     86a:	7a 07       	cpc	r23, r26
     86c:	68 f4       	brcc	.+26     	; 0x888 <rt_sbr+0x3e>
     86e:	b2 e1       	ldi	r27, 0x12	; 18
     870:	60 3c       	cpi	r22, 0xC0	; 192
     872:	7b 07       	cpc	r23, r27
     874:	b1 f0       	breq	.+44     	; 0x8a2 <rt_sbr+0x58>
     876:	25 e2       	ldi	r18, 0x25	; 37
     878:	60 38       	cpi	r22, 0x80	; 128
     87a:	72 07       	cpc	r23, r18
     87c:	a1 f0       	breq	.+40     	; 0x8a6 <rt_sbr+0x5c>
     87e:	60 56       	subi	r22, 0x60	; 96
     880:	79 40       	sbci	r23, 0x09	; 9
     882:	09 f0       	breq	.+2      	; 0x886 <rt_sbr+0x3c>
     884:	49 c0       	rjmp	.+146    	; 0x918 <rt_sbr+0xce>
     886:	4a c0       	rjmp	.+148    	; 0x91c <rt_sbr+0xd2>
     888:	ba e7       	ldi	r27, 0x7A	; 122
     88a:	62 31       	cpi	r22, 0x12	; 18
     88c:	7b 07       	cpc	r23, r27
     88e:	89 f0       	breq	.+34     	; 0x8b2 <rt_sbr+0x68>
     890:	26 e9       	ldi	r18, 0x96	; 150
     892:	60 30       	cpi	r22, 0x00	; 0
     894:	72 07       	cpc	r23, r18
     896:	79 f0       	breq	.+30     	; 0x8b6 <rt_sbr+0x6c>
     898:	60 58       	subi	r22, 0x80	; 128
     89a:	70 47       	sbci	r23, 0x70	; 112
     89c:	09 f0       	breq	.+2      	; 0x8a0 <rt_sbr+0x56>
     89e:	3c c0       	rjmp	.+120    	; 0x918 <rt_sbr+0xce>
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <rt_sbr+0x64>
     8a2:	27 e6       	ldi	r18, 0x67	; 103
     8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <rt_sbr+0x6e>
     8a6:	23 e3       	ldi	r18, 0x33	; 51
     8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <rt_sbr+0x6e>
	case 4800:
		baud_ubrr = 103;
		break;
	case 9600:
		baud_ubrr = 51;
		break;
     8aa:	29 e1       	ldi	r18, 0x19	; 25
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <rt_sbr+0x6e>
	case 19200: // default band rate
		baud_ubrr = 25;
		break;
     8ae:	20 e1       	ldi	r18, 0x10	; 16
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <rt_sbr+0x6e>
	case 28800:
		baud_ubrr = 16;
		break;
     8b2:	2f e0       	ldi	r18, 0x0F	; 15
     8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <rt_sbr+0x6e>
	case 31250:
		baud_ubrr = 15;
		break;
     8b6:	2c e0       	ldi	r18, 0x0C	; 12
	}

	if (baud_ubrr)
	{
		uint8_t baud_ubrr_temp = 0;
		eeprom_busy_wait();
     8b8:	e1 99       	sbic	0x1c, 1	; 28
     8ba:	fe cf       	rjmp	.-4      	; 0x8b8 <rt_sbr+0x6e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     8bc:	e1 99       	sbic	0x1c, 1	; 28
     8be:	fe cf       	rjmp	.-4      	; 0x8bc <rt_sbr+0x72>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	9f bb       	out	0x1f, r25	; 31
     8c6:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
     8c8:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	e2 9a       	sbi	0x1c, 2	; 28
     8d0:	e1 9a       	sbi	0x1c, 1	; 28
     8d2:	0f be       	out	0x3f, r0	; 63
		eeprom_write_byte(&g_eprom_baud_ubrr, baud_ubrr);
		eeprom_busy_wait();
     8d4:	e1 99       	sbic	0x1c, 1	; 28
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <rt_sbr+0x8a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     8d8:	e1 99       	sbic	0x1c, 1	; 28
     8da:	fe cf       	rjmp	.-4      	; 0x8d8 <rt_sbr+0x8e>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
     8dc:	9f bb       	out	0x1f, r25	; 31
     8de:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
     8e0:	e0 9a       	sbi	0x1c, 0	; 28
     8e2:	8d b3       	in	r24, 0x1d	; 29
		baud_ubrr_temp = eeprom_read_byte(&g_eprom_baud_ubrr);

		// double verify save value
		if (baud_ubrr_temp == baud_ubrr)
     8e4:	82 17       	cp	r24, r18
     8e6:	11 f0       	breq	.+4      	; 0x8ec <rt_sbr+0xa2>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	08 95       	ret
		{
			printf("\r\n*SBR:%d\r\n", baud_ubrr);
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <rt_sbr+0xa4>
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <rt_sbr+0xa6>
     8f0:	ed b7       	in	r30, 0x3d	; 61
     8f2:	fe b7       	in	r31, 0x3e	; 62
     8f4:	31 96       	adiw	r30, 0x01	; 1
     8f6:	8e eb       	ldi	r24, 0xBE	; 190
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	ad b7       	in	r26, 0x3d	; 61
     8fc:	be b7       	in	r27, 0x3e	; 62
     8fe:	12 96       	adiw	r26, 0x02	; 2
     900:	9c 93       	st	X, r25
     902:	8e 93       	st	-X, r24
     904:	11 97       	sbiw	r26, 0x01	; 1
     906:	22 83       	std	Z+2, r18	; 0x02
     908:	13 82       	std	Z+3, r1	; 0x03
     90a:	a5 d2       	rcall	.+1354   	; 0xe56 <printf>
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	08 95       	ret
     918:	80 e0       	ldi	r24, 0x00	; 0

		return TRUE;
	}

	return FALSE;
}
     91a:	08 95       	ret
		baud_ubrr_temp = eeprom_read_byte(&g_eprom_baud_ubrr);

		// double verify save value
		if (baud_ubrr_temp == baud_ubrr)
		{
			printf("\r\n*SBR:%d\r\n", baud_ubrr);
     91c:	2f ec       	ldi	r18, 0xCF	; 207
     91e:	cc cf       	rjmp	.-104    	; 0x8b8 <rt_sbr+0x6e>

00000920 <rt_smv>:

	return TRUE;
}

int8_t rt_smv(void)
{
     920:	4f 92       	push	r4
     922:	5f 92       	push	r5
     924:	6f 92       	push	r6
     926:	7f 92       	push	r7
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	df 93       	push	r29
     93e:	cf 93       	push	r28
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	c2 54       	subi	r28, 0x42	; 66
     946:	d0 40       	sbci	r29, 0x00	; 0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61

	// check parameters
	if (g_user_rtcmmd.param_count <= 0)
     952:	80 91 ab 01 	lds	r24, 0x01AB
     956:	18 16       	cp	r1, r24
     958:	0c f0       	brlt	.+2      	; 0x95c <rt_smv+0x3c>
     95a:	a4 c0       	rjmp	.+328    	; 0xaa4 <rt_smv+0x184>
		return FALSE;
	if (g_user_rtcmmd.param_count % 3 != 0)
     95c:	63 e0       	ldi	r22, 0x03	; 3
     95e:	19 d8       	rcall	.-4046   	; 0xfffff992 <__eeprom_end+0xff7ef990>
     960:	99 23       	and	r25, r25
     962:	09 f0       	breq	.+2      	; 0x966 <rt_smv+0x46>
     964:	9f c0       	rjmp	.+318    	; 0xaa4 <rt_smv+0x184>
		return FALSE;

	struct SVR_PRO temp_action[8];
	memcpy(&temp_action, &g_runtime_svrs, sizeof(g_runtime_svrs));
     966:	de 01       	movw	r26, r28
     968:	13 96       	adiw	r26, 0x03	; 3
     96a:	ec ed       	ldi	r30, 0xDC	; 220
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 e4       	ldi	r24, 0x40	; 64
     970:	01 90       	ld	r0, Z+
     972:	0d 92       	st	X+, r0
     974:	81 50       	subi	r24, 0x01	; 1
     976:	e1 f7       	brne	.-8      	; 0x970 <rt_smv+0x50>

	int i;
	int j = 0;
     978:	1a 82       	std	Y+2, r1	; 0x02
     97a:	19 82       	std	Y+1, r1	; 0x01
     97c:	ec ea       	ldi	r30, 0xAC	; 172
     97e:	ae 2e       	mov	r10, r30
     980:	e1 e0       	ldi	r30, 0x01	; 1
     982:	be 2e       	mov	r11, r30
     984:	88 24       	eor	r8, r8
     986:	99 24       	eor	r9, r9

	for (i = 0; i < g_user_rtcmmd.param_count; i += 3)
	{

		// read pin number
		sscanf(g_user_rtcmmd.params[i], "P%d", &j);
     988:	7a ec       	ldi	r23, 0xCA	; 202
     98a:	47 2e       	mov	r4, r23
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	57 2e       	mov	r5, r23
     990:	3e 01       	movw	r6, r28
     992:	08 94       	sec
     994:	61 1c       	adc	r6, r1
     996:	71 1c       	adc	r7, r1
     998:	71 c0       	rjmp	.+226    	; 0xa7c <rt_smv+0x15c>
     99a:	00 d0       	rcall	.+0      	; 0x99c <rt_smv+0x7c>
     99c:	00 d0       	rcall	.+0      	; 0x99e <rt_smv+0x7e>
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <rt_smv+0x80>
     9a0:	ed b7       	in	r30, 0x3d	; 61
     9a2:	fe b7       	in	r31, 0x3e	; 62
     9a4:	31 96       	adiw	r30, 0x01	; 1
     9a6:	d5 01       	movw	r26, r10
     9a8:	8d 91       	ld	r24, X+
     9aa:	9c 91       	ld	r25, X
     9ac:	ad b7       	in	r26, 0x3d	; 61
     9ae:	be b7       	in	r27, 0x3e	; 62
     9b0:	12 96       	adiw	r26, 0x02	; 2
     9b2:	9c 93       	st	X, r25
     9b4:	8e 93       	st	-X, r24
     9b6:	11 97       	sbiw	r26, 0x01	; 1
     9b8:	53 82       	std	Z+3, r5	; 0x03
     9ba:	42 82       	std	Z+2, r4	; 0x02
     9bc:	75 82       	std	Z+5, r7	; 0x05
     9be:	64 82       	std	Z+4, r6	; 0x04
     9c0:	b4 d2       	rcall	.+1384   	; 0xf2a <sscanf>
		// check pin number
		if (j < 0 || j > 7)
     9c2:	09 81       	ldd	r16, Y+1	; 0x01
     9c4:	1a 81       	ldd	r17, Y+2	; 0x02
     9c6:	ed b7       	in	r30, 0x3d	; 61
     9c8:	fe b7       	in	r31, 0x3e	; 62
     9ca:	36 96       	adiw	r30, 0x06	; 6
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	fe bf       	out	0x3e, r31	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	ed bf       	out	0x3d, r30	; 61
     9d6:	08 30       	cpi	r16, 0x08	; 8
     9d8:	11 05       	cpc	r17, r1
     9da:	08 f0       	brcs	.+2      	; 0x9de <rt_smv+0xbe>
     9dc:	63 c0       	rjmp	.+198    	; 0xaa4 <rt_smv+0x184>
			return FALSE;

		// read position & hold time
		temp_action[j].save_position_us = atol(g_user_rtcmmd.params[i + 1]);
     9de:	d5 01       	movw	r26, r10
     9e0:	12 96       	adiw	r26, 0x02	; 2
     9e2:	8d 91       	ld	r24, X+
     9e4:	9c 91       	ld	r25, X
     9e6:	13 97       	sbiw	r26, 0x03	; 3
     9e8:	be d1       	rcall	.+892    	; 0xd66 <atol>
     9ea:	6b 01       	movw	r12, r22
     9ec:	7c 01       	movw	r14, r24
     9ee:	63 e0       	ldi	r22, 0x03	; 3
     9f0:	00 0f       	add	r16, r16
     9f2:	11 1f       	adc	r17, r17
     9f4:	6a 95       	dec	r22
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <rt_smv+0xd0>
     9f8:	06 0d       	add	r16, r6
     9fa:	17 1d       	adc	r17, r7
     9fc:	f8 01       	movw	r30, r16
     9fe:	d7 82       	std	Z+7, r13	; 0x07
     a00:	c6 82       	std	Z+6, r12	; 0x06
		temp_action[j].speed = atol(g_user_rtcmmd.params[i + 2]);
     a02:	d5 01       	movw	r26, r10
     a04:	14 96       	adiw	r26, 0x04	; 4
     a06:	8d 91       	ld	r24, X+
     a08:	9c 91       	ld	r25, X
     a0a:	15 97       	sbiw	r26, 0x05	; 5
     a0c:	ac d1       	rcall	.+856    	; 0xd66 <atol>
     a0e:	9b 01       	movw	r18, r22
     a10:	ac 01       	movw	r20, r24
     a12:	d8 01       	movw	r26, r16
     a14:	19 96       	adiw	r26, 0x09	; 9
     a16:	7c 93       	st	X, r23
     a18:	6e 93       	st	-X, r22
     a1a:	18 97       	sbiw	r26, 0x08	; 8

		// check data
		if (temp_action[j].save_position_us < MIN_POSITION
     a1c:	b6 01       	movw	r22, r12
     a1e:	c6 01       	movw	r24, r12
     a20:	82 5c       	subi	r24, 0xC2	; 194
     a22:	91 40       	sbci	r25, 0x01	; 1
     a24:	8f 59       	subi	r24, 0x9F	; 159
     a26:	97 40       	sbci	r25, 0x07	; 7
     a28:	e8 f5       	brcc	.+122    	; 0xaa4 <rt_smv+0x184>
				|| temp_action[j].save_position_us > MAX_POSITION)
			return FALSE;

		// calculate speed
		if (temp_action[j].position_us >= MIN_POSITION)
     a2a:	d8 01       	movw	r26, r16
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	8d 91       	ld	r24, X+
     a30:	9c 91       	ld	r25, X
     a32:	13 97       	sbiw	r26, 0x03	; 3
     a34:	b1 e0       	ldi	r27, 0x01	; 1
     a36:	82 3c       	cpi	r24, 0xC2	; 194
     a38:	9b 07       	cpc	r25, r27
     a3a:	ac f0       	brlt	.+42     	; 0xa66 <rt_smv+0x146>
		{
			if (temp_action[j].speed == 0)
     a3c:	23 2b       	or	r18, r19
     a3e:	31 f4       	brne	.+12     	; 0xa4c <rt_smv+0x12c>
			{
				temp_action[j].speed = (temp_action[j].save_position_us
     a40:	68 1b       	sub	r22, r24
     a42:	79 0b       	sbc	r23, r25
     a44:	f8 01       	movw	r30, r16
     a46:	71 87       	std	Z+9, r23	; 0x09
     a48:	60 87       	std	Z+8, r22	; 0x08
     a4a:	10 c0       	rjmp	.+32     	; 0xa6c <rt_smv+0x14c>
						- temp_action[j].position_us);
			}
			else
			{
				if (temp_action[j].save_position_us
     a4c:	c8 16       	cp	r12, r24
     a4e:	d9 06       	cpc	r13, r25
     a50:	6c f4       	brge	.+26     	; 0xa6c <rt_smv+0x14c>
						< temp_action[j].position_us)
				{
					temp_action[j].speed = -temp_action[j].speed;
     a52:	88 27       	eor	r24, r24
     a54:	99 27       	eor	r25, r25
     a56:	82 1b       	sub	r24, r18
     a58:	93 0b       	sbc	r25, r19
     a5a:	d8 01       	movw	r26, r16
     a5c:	19 96       	adiw	r26, 0x09	; 9
     a5e:	9c 93       	st	X, r25
     a60:	8e 93       	st	-X, r24
     a62:	18 97       	sbiw	r26, 0x08	; 8
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <rt_smv+0x14c>
				}
			}
		}
		else
		{
			temp_action[j].position_us = temp_action[j].save_position_us;
     a66:	f8 01       	movw	r30, r16
     a68:	d3 82       	std	Z+3, r13	; 0x03
     a6a:	c2 82       	std	Z+2, r12	; 0x02
	memcpy(&temp_action, &g_runtime_svrs, sizeof(g_runtime_svrs));

	int i;
	int j = 0;

	for (i = 0; i < g_user_rtcmmd.param_count; i += 3)
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	88 0e       	add	r8, r24
     a72:	99 1e       	adc	r9, r25
     a74:	a6 e0       	ldi	r26, 0x06	; 6
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	aa 0e       	add	r10, r26
     a7a:	bb 1e       	adc	r11, r27
     a7c:	80 91 ab 01 	lds	r24, 0x01AB
     a80:	99 27       	eor	r25, r25
     a82:	87 fd       	sbrc	r24, 7
     a84:	90 95       	com	r25
     a86:	88 16       	cp	r8, r24
     a88:	99 06       	cpc	r9, r25
     a8a:	0c f4       	brge	.+2      	; 0xa8e <rt_smv+0x16e>
     a8c:	86 cf       	rjmp	.-244    	; 0x99a <rt_smv+0x7a>
			temp_action[j].position_us = temp_action[j].save_position_us;
		}

	}

	memcpy(&g_runtime_svrs, &temp_action, sizeof(temp_action));
     a8e:	ac ed       	ldi	r26, 0xDC	; 220
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	fe 01       	movw	r30, r28
     a94:	33 96       	adiw	r30, 0x03	; 3
     a96:	80 e4       	ldi	r24, 0x40	; 64
     a98:	01 90       	ld	r0, Z+
     a9a:	0d 92       	st	X+, r0
     a9c:	81 50       	subi	r24, 0x01	; 1
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <rt_smv+0x178>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <rt_smv+0x186>

	return TRUE;
     aa4:	80 e0       	ldi	r24, 0x00	; 0
}
     aa6:	ce 5b       	subi	r28, 0xBE	; 190
     aa8:	df 4f       	sbci	r29, 0xFF	; 255
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
     ab4:	cf 91       	pop	r28
     ab6:	df 91       	pop	r29
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	cf 90       	pop	r12
     ac4:	bf 90       	pop	r11
     ac6:	af 90       	pop	r10
     ac8:	9f 90       	pop	r9
     aca:	8f 90       	pop	r8
     acc:	7f 90       	pop	r7
     ace:	6f 90       	pop	r6
     ad0:	5f 90       	pop	r5
     ad2:	4f 90       	pop	r4
     ad4:	08 95       	ret

00000ad6 <avr_adc_open>:
// 右对齐方式读取
int8_t avr_adc_open(int8_t aref, int8_t channel){

	uint8_t admux = 0;

	switch(aref){
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	31 f0       	breq	.+12     	; 0xae6 <avr_adc_open+0x10>
     ada:	83 30       	cpi	r24, 0x03	; 3
     adc:	41 f0       	breq	.+16     	; 0xaee <avr_adc_open+0x18>
     ade:	88 23       	and	r24, r24
     ae0:	21 f0       	breq	.+8      	; 0xaea <avr_adc_open+0x14>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	08 95       	ret
     ae6:	80 e4       	ldi	r24, 0x40	; 64
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <avr_adc_open+0x1a>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <avr_adc_open+0x1a>
     aee:	80 ec       	ldi	r24, 0xC0	; 192
		break;
	default:
		return FALSE;
	}

	admux |= channel;
     af0:	86 2b       	or	r24, r22

	ADMUX = admux;
     af2:	87 b9       	out	0x07, r24	; 7

	ADCSRA = _BV(ADEN);	//使能 ADC，单次转换模式
     af4:	80 e8       	ldi	r24, 0x80	; 128
     af6:	86 b9       	out	0x06, r24	; 6
     af8:	81 e0       	ldi	r24, 0x01	; 1

	return TRUE;
}
     afa:	08 95       	ret

00000afc <avr_adc_close>:

void avr_adc_close(void){
	ADCSRA = 0;	//关闭 ADC
     afc:	16 b8       	out	0x06, r1	; 6
}
     afe:	08 95       	ret

00000b00 <avr_adc_read>:

uint16_t avr_adc_read(uint8_t channel){
     b00:	df 93       	push	r29
     b02:	cf 93       	push	r28
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	2a 97       	sbiw	r28, 0x0a	; 10
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
	uint16_t ret = 0;
	int i = 0;

	uint16_t vals[AVR_ADC_AREF_SRC_COVERT_COUNT] = {0};
     b14:	fe 01       	movw	r30, r28
     b16:	31 96       	adiw	r30, 0x01	; 1
     b18:	8a e0       	ldi	r24, 0x0A	; 10
     b1a:	df 01       	movw	r26, r30
     b1c:	1d 92       	st	X+, r1
     b1e:	8a 95       	dec	r24
     b20:	e9 f7       	brne	.-6      	; 0xb1c <avr_adc_read+0x1c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b22:	6c e3       	ldi	r22, 0x3C	; 60

	for(i=0; i<AVR_ADC_AREF_SRC_COVERT_COUNT; ++i){
     b24:	ae 01       	movw	r20, r28
     b26:	45 5f       	subi	r20, 0xF5	; 245
     b28:	5f 4f       	sbci	r21, 0xFF	; 255
		// start first convert
		ADCSRA |= _BV(ADSC);
     b2a:	36 9a       	sbi	0x06, 6	; 6
     b2c:	86 2f       	mov	r24, r22
     b2e:	8a 95       	dec	r24
     b30:	f1 f7       	brne	.-4      	; 0xb2e <avr_adc_read+0x2e>
		_delay_loop_1(60);

		while( ADCSRA & _BV(ADSC) ) _delay_loop_1(60);
     b32:	36 99       	sbic	0x06, 6	; 6
     b34:	fb cf       	rjmp	.-10     	; 0xb2c <avr_adc_read+0x2c>
		vals[i] = ADCL;
     b36:	84 b1       	in	r24, 0x04	; 4
		vals[i] |= (ADCH<<8);
     b38:	25 b1       	in	r18, 0x05	; 5
     b3a:	32 2f       	mov	r19, r18
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	82 2b       	or	r24, r18
     b42:	93 2b       	or	r25, r19
     b44:	81 93       	st	Z+, r24
     b46:	91 93       	st	Z+, r25
	uint16_t ret = 0;
	int i = 0;

	uint16_t vals[AVR_ADC_AREF_SRC_COVERT_COUNT] = {0};

	for(i=0; i<AVR_ADC_AREF_SRC_COVERT_COUNT; ++i){
     b48:	e4 17       	cp	r30, r20
     b4a:	f5 07       	cpc	r31, r21
     b4c:	71 f7       	brne	.-36     	; 0xb2a <avr_adc_read+0x2a>
		while( ADCSRA & _BV(ADSC) ) _delay_loop_1(60);
		vals[i] = ADCL;
		vals[i] |= (ADCH<<8);
	}

	ret = avr_math_maverage((uint16_t*)&vals[0], (uint16_t*)&vals[AVR_ADC_AREF_SRC_COVERT_COUNT - 1]);
     b4e:	ce 01       	movw	r24, r28
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	be 01       	movw	r22, r28
     b54:	67 5f       	subi	r22, 0xF7	; 247
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	09 d0       	rcall	.+18     	; 0xb6c <avr_math_maverage>

	return ret;
}
     b5a:	2a 96       	adiw	r28, 0x0a	; 10
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <avr_math_maverage>:
 * moving average, it will remove one max and one min value and compute the avrage value
 * @param vals	data vector
 * @param len	data vector length
 * @return	avrage value
 */
uint16_t avr_math_maverage(uint16_t* start, uint16_t* stop){
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	dc 01       	movw	r26, r24
     b76:	8b 01       	movw	r16, r22
    if ( start == 0 || stop == 0 ) return 0;
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	d1 f1       	breq	.+116    	; 0xbf0 <avr_math_maverage+0x84>
     b7c:	61 15       	cp	r22, r1
     b7e:	71 05       	cpc	r23, r1
     b80:	b9 f1       	breq	.+110    	; 0xbf0 <avr_math_maverage+0x84>
	uint16_t sum = 0;
	uint16_t max_value, min_value;
	uint16_t* p = start;
	uint16_t len = 0;

	max_value = min_value = *p;
     b82:	4d 91       	ld	r20, X+
     b84:	5c 91       	ld	r21, X
     b86:	11 97       	sbiw	r26, 0x01	; 1
     b88:	ea 01       	movw	r28, r20
     b8a:	fc 01       	movw	r30, r24
     b8c:	0b c0       	rjmp	.+22     	; 0xba4 <avr_math_maverage+0x38>
	while(p != stop){
		if( *p > max_value ){
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	c8 17       	cp	r28, r24
     b94:	d9 07       	cpc	r29, r25
     b96:	08 f4       	brcc	.+2      	; 0xb9a <avr_math_maverage+0x2e>
     b98:	ec 01       	movw	r28, r24
     b9a:	84 17       	cp	r24, r20
     b9c:	95 07       	cpc	r25, r21
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <avr_math_maverage+0x36>
     ba0:	ac 01       	movw	r20, r24
			max_value = *p;
		}
		if( *p < min_value){
			min_value = *p;
		}
		p++;
     ba2:	32 96       	adiw	r30, 0x02	; 2
	uint16_t max_value, min_value;
	uint16_t* p = start;
	uint16_t len = 0;

	max_value = min_value = *p;
	while(p != stop){
     ba4:	e0 17       	cp	r30, r16
     ba6:	f1 07       	cpc	r31, r17
     ba8:	91 f7       	brne	.-28     	; 0xb8e <avr_math_maverage+0x22>
     baa:	fd 01       	movw	r30, r26
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	17 c0       	rjmp	.+46     	; 0xbe4 <avr_math_maverage+0x78>
		p++;
	}

	p = start;
	while( p != stop ){
		if(*p == max_value){
     bb6:	20 81       	ld	r18, Z
     bb8:	31 81       	ldd	r19, Z+1	; 0x01
     bba:	2c 17       	cp	r18, r28
     bbc:	3d 07       	cpc	r19, r29
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <avr_math_maverage+0x5a>
     bc0:	c0 e0       	ldi	r28, 0x00	; 0
     bc2:	d0 e0       	ldi	r29, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <avr_math_maverage+0x62>
			max_value = 0;
		}else{
			sum += *p;
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
			len++;
     bca:	6f 5f       	subi	r22, 0xFF	; 255
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
		}

		if(*p == min_value){
     bce:	24 17       	cp	r18, r20
     bd0:	35 07       	cpc	r19, r21
     bd2:	19 f4       	brne	.+6      	; 0xbda <avr_math_maverage+0x6e>
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <avr_math_maverage+0x76>
			min_value = 0;
		}else{
			sum += *p;
     bda:	82 0f       	add	r24, r18
     bdc:	93 1f       	adc	r25, r19
			len++;
     bde:	6f 5f       	subi	r22, 0xFF	; 255
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
		}

		p++;
     be2:	32 96       	adiw	r30, 0x02	; 2
		}
		p++;
	}

	p = start;
	while( p != stop ){
     be4:	e0 17       	cp	r30, r16
     be6:	f1 07       	cpc	r31, r17
     be8:	31 f7       	brne	.-52     	; 0xbb6 <avr_math_maverage+0x4a>
		}

		p++;
	}

	return (sum / len);
     bea:	e0 d6       	rcall	.+3520   	; 0x19ac <__udivmodhi4>
     bec:	9b 01       	movw	r18, r22
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <avr_math_maverage+0x88>
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
}
     bf4:	c9 01       	movw	r24, r18
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <avr_cy2239x_init>:
void avr_cy2239x_init(void)
{
	/* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
#if defined(TWPS0)
	/* has prescaler (mega128 & newer) */
	TWSR = 0;
     c00:	11 b8       	out	0x01, r1	; 1
#endif

#if F_CPU < 3600000UL
	TWBR = 10; /* smallest TWBR value, see note [5] */
#else
	TWBR = (F_CPU / 100000UL - 16) / 2;
     c02:	80 e2       	ldi	r24, 0x20	; 32
     c04:	80 b9       	out	0x00, r24	; 0
#endif
}
     c06:	08 95       	ret

00000c08 <avr_cy2239x_read_buffer>:
;

int avr_cy2239x_read_buffer(uint8_t addr, int len, uint8_t *buf)
{
     c08:	98 2f       	mov	r25, r24
     c0a:	fa 01       	movw	r30, r20
	TWI_BUS_START(); // start
     c0c:	84 ea       	ldi	r24, 0xA4	; 164
     c0e:	86 bf       	out	0x36, r24	; 54
	TWI_BUS_WAIT();
     c10:	06 b6       	in	r0, 0x36	; 54
     c12:	07 fe       	sbrs	r0, 7
     c14:	fd cf       	rjmp	.-6      	; 0xc10 <avr_cy2239x_read_buffer+0x8>

	TWI_BUS_WRITE_BYTE(TWI_SLA_ADDR_CY2293X | TW_WRITE); // control byte
     c16:	82 ed       	ldi	r24, 0xD2	; 210
     c18:	83 b9       	out	0x03, r24	; 3
     c1a:	84 e8       	ldi	r24, 0x84	; 132
     c1c:	86 bf       	out	0x36, r24	; 54
	TWI_BUS_WAIT();
     c1e:	06 b6       	in	r0, 0x36	; 54
     c20:	07 fe       	sbrs	r0, 7
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <avr_cy2239x_read_buffer+0x16>
	if (TWI_BUS_STATUS != TW_MT_SLA_ACK)
     c24:	81 b1       	in	r24, 0x01	; 1
     c26:	88 7f       	andi	r24, 0xF8	; 248
     c28:	88 31       	cpi	r24, 0x18	; 24
     c2a:	19 f0       	breq	.+6      	; 0xc32 <avr_cy2239x_read_buffer+0x2a>
     c2c:	2f ef       	ldi	r18, 0xFF	; 255
     c2e:	3f ef       	ldi	r19, 0xFF	; 255
     c30:	3f c0       	rjmp	.+126    	; 0xcb0 <avr_cy2239x_read_buffer+0xa8>
		return -1; // ACK

	TWI_BUS_WRITE_BYTE(addr & 0xFF); // address byte
     c32:	93 b9       	out	0x03, r25	; 3
     c34:	84 e8       	ldi	r24, 0x84	; 132
     c36:	86 bf       	out	0x36, r24	; 54
	TWI_BUS_WAIT();
     c38:	06 b6       	in	r0, 0x36	; 54
     c3a:	07 fe       	sbrs	r0, 7
     c3c:	fd cf       	rjmp	.-6      	; 0xc38 <avr_cy2239x_read_buffer+0x30>
	if (TWI_BUS_STATUS != TW_MT_DATA_ACK)
     c3e:	81 b1       	in	r24, 0x01	; 1
     c40:	88 7f       	andi	r24, 0xF8	; 248
     c42:	88 32       	cpi	r24, 0x28	; 40
     c44:	19 f0       	breq	.+6      	; 0xc4c <avr_cy2239x_read_buffer+0x44>
     c46:	2d ef       	ldi	r18, 0xFD	; 253
     c48:	3f ef       	ldi	r19, 0xFF	; 255
     c4a:	32 c0       	rjmp	.+100    	; 0xcb0 <avr_cy2239x_read_buffer+0xa8>
		return -3; // ACK

	TWI_BUS_START(); // start
     c4c:	84 ea       	ldi	r24, 0xA4	; 164
     c4e:	86 bf       	out	0x36, r24	; 54
	TWI_BUS_WAIT();
     c50:	06 b6       	in	r0, 0x36	; 54
     c52:	07 fe       	sbrs	r0, 7
     c54:	fd cf       	rjmp	.-6      	; 0xc50 <avr_cy2239x_read_buffer+0x48>

	TWI_BUS_WRITE_BYTE(TWI_SLA_ADDR_CY2293X | TW_READ); // control byte
     c56:	83 ed       	ldi	r24, 0xD3	; 211
     c58:	83 b9       	out	0x03, r24	; 3
     c5a:	84 e8       	ldi	r24, 0x84	; 132
     c5c:	86 bf       	out	0x36, r24	; 54
	TWI_BUS_WAIT();
     c5e:	06 b6       	in	r0, 0x36	; 54
     c60:	07 fe       	sbrs	r0, 7
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <avr_cy2239x_read_buffer+0x56>
	if (TWI_BUS_STATUS != TW_MR_SLA_ACK)
     c64:	81 b1       	in	r24, 0x01	; 1
     c66:	88 7f       	andi	r24, 0xF8	; 248
     c68:	80 34       	cpi	r24, 0x40	; 64
     c6a:	19 f0       	breq	.+6      	; 0xc72 <avr_cy2239x_read_buffer+0x6a>
     c6c:	2c ef       	ldi	r18, 0xFC	; 252
     c6e:	3f ef       	ldi	r19, 0xFF	; 255
     c70:	1f c0       	rjmp	.+62     	; 0xcb0 <avr_cy2239x_read_buffer+0xa8>
		return -4; // ACK

	TWI_BUS_START_READ();
     c72:	84 e8       	ldi	r24, 0x84	; 132
     c74:	86 bf       	out	0x36, r24	; 54
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0

	int i;
	for (i = 0; i < len; ++i)
	{
		if (i == len - 1)
     c7a:	ab 01       	movw	r20, r22
     c7c:	41 50       	subi	r20, 0x01	; 1
     c7e:	50 40       	sbci	r21, 0x00	; 0
     c80:	10 c0       	rjmp	.+32     	; 0xca2 <avr_cy2239x_read_buffer+0x9a>
     c82:	24 17       	cp	r18, r20
     c84:	35 07       	cpc	r19, r21
     c86:	19 f4       	brne	.+6      	; 0xc8e <avr_cy2239x_read_buffer+0x86>
			TWI_BUS_SET_NACK(); // send NACK
     c88:	86 b7       	in	r24, 0x36	; 54
     c8a:	8f 7b       	andi	r24, 0xBF	; 191
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <avr_cy2239x_read_buffer+0x8a>
		else
			TWI_BUS_SET_ACK(); // send ACK
     c8e:	86 b7       	in	r24, 0x36	; 54
     c90:	80 64       	ori	r24, 0x40	; 64
     c92:	86 bf       	out	0x36, r24	; 54

		TWI_BUS_WAIT();
     c94:	06 b6       	in	r0, 0x36	; 54
     c96:	07 fe       	sbrs	r0, 7
     c98:	fd cf       	rjmp	.-6      	; 0xc94 <avr_cy2239x_read_buffer+0x8c>
		*buf = TWDR;
     c9a:	83 b1       	in	r24, 0x03	; 3
     c9c:	81 93       	st	Z+, r24
		return -4; // ACK

	TWI_BUS_START_READ();

	int i;
	for (i = 0; i < len; ++i)
     c9e:	2f 5f       	subi	r18, 0xFF	; 255
     ca0:	3f 4f       	sbci	r19, 0xFF	; 255
     ca2:	26 17       	cp	r18, r22
     ca4:	37 07       	cpc	r19, r23
     ca6:	6c f3       	brlt	.-38     	; 0xc82 <avr_cy2239x_read_buffer+0x7a>
		*buf = TWDR;
		//printf("%x",*buf);
		buf++;
	}

	TWI_BUS_STOP();
     ca8:	84 e9       	ldi	r24, 0x94	; 148
     caa:	86 bf       	out	0x36, r24	; 54
     cac:	21 e0       	ldi	r18, 0x01	; 1
     cae:	30 e0       	ldi	r19, 0x00	; 0

	return TRUE;
}
     cb0:	c9 01       	movw	r24, r18
     cb2:	08 95       	ret

00000cb4 <avr_cy2239x_write_buffer>:

int avr_cy2239x_write_buffer(uint8_t addr, uint8_t len, uint8_t* buf)
{
     cb4:	98 2f       	mov	r25, r24
	TWI_BUS_START(); // start
     cb6:	84 ea       	ldi	r24, 0xA4	; 164
     cb8:	86 bf       	out	0x36, r24	; 54
	TWI_BUS_WAIT();
     cba:	06 b6       	in	r0, 0x36	; 54
     cbc:	07 fe       	sbrs	r0, 7
     cbe:	fd cf       	rjmp	.-6      	; 0xcba <avr_cy2239x_write_buffer+0x6>

	TWI_BUS_WRITE_BYTE(TWI_SLA_ADDR_CY2293X | TW_WRITE); // control byte
     cc0:	82 ed       	ldi	r24, 0xD2	; 210
     cc2:	83 b9       	out	0x03, r24	; 3
     cc4:	84 e8       	ldi	r24, 0x84	; 132
     cc6:	86 bf       	out	0x36, r24	; 54
	TWI_BUS_WAIT();
     cc8:	06 b6       	in	r0, 0x36	; 54
     cca:	07 fe       	sbrs	r0, 7
     ccc:	fd cf       	rjmp	.-6      	; 0xcc8 <avr_cy2239x_write_buffer+0x14>
	if (TWI_BUS_STATUS != TW_MT_SLA_ACK)
     cce:	81 b1       	in	r24, 0x01	; 1
     cd0:	88 7f       	andi	r24, 0xF8	; 248
     cd2:	88 31       	cpi	r24, 0x18	; 24
     cd4:	19 f0       	breq	.+6      	; 0xcdc <avr_cy2239x_write_buffer+0x28>
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	26 c0       	rjmp	.+76     	; 0xd28 <avr_cy2239x_write_buffer+0x74>
		return -1; // ACK

	TWI_BUS_WRITE_BYTE(addr & 0xFF); // address low byte
     cdc:	93 b9       	out	0x03, r25	; 3
     cde:	84 e8       	ldi	r24, 0x84	; 132
     ce0:	86 bf       	out	0x36, r24	; 54
	TWI_BUS_WAIT();
     ce2:	06 b6       	in	r0, 0x36	; 54
     ce4:	07 fe       	sbrs	r0, 7
     ce6:	fd cf       	rjmp	.-6      	; 0xce2 <avr_cy2239x_write_buffer+0x2e>
	if (TWI_BUS_STATUS != TW_MT_DATA_ACK)
     ce8:	81 b1       	in	r24, 0x01	; 1
     cea:	88 7f       	andi	r24, 0xF8	; 248
     cec:	88 32       	cpi	r24, 0x28	; 40
     cee:	19 f0       	breq	.+6      	; 0xcf6 <avr_cy2239x_write_buffer+0x42>
     cf0:	2d ef       	ldi	r18, 0xFD	; 253
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	19 c0       	rjmp	.+50     	; 0xd28 <avr_cy2239x_write_buffer+0x74>
     cf6:	fa 01       	movw	r30, r20

	uint8_t i;
	for (i = 0; i < len; ++i)
	{
		//printf("%x",*buf);
		TWI_BUS_WRITE_BYTE(*buf);
     cf8:	94 e8       	ldi	r25, 0x84	; 132
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <avr_cy2239x_write_buffer+0x64>
     cfc:	80 81       	ld	r24, Z
     cfe:	83 b9       	out	0x03, r24	; 3
     d00:	96 bf       	out	0x36, r25	; 54
		TWI_BUS_WAIT();
     d02:	06 b6       	in	r0, 0x36	; 54
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <avr_cy2239x_write_buffer+0x4e>
		if (TWI_BUS_STATUS != TW_MT_DATA_ACK)
     d08:	81 b1       	in	r24, 0x01	; 1
     d0a:	88 7f       	andi	r24, 0xF8	; 248
     d0c:	88 32       	cpi	r24, 0x28	; 40
     d0e:	19 f0       	breq	.+6      	; 0xd16 <avr_cy2239x_write_buffer+0x62>
     d10:	2c ef       	ldi	r18, 0xFC	; 252
     d12:	3f ef       	ldi	r19, 0xFF	; 255
     d14:	09 c0       	rjmp	.+18     	; 0xd28 <avr_cy2239x_write_buffer+0x74>
			return -4; // ACK
		buf++;
     d16:	31 96       	adiw	r30, 0x01	; 1
	TWI_BUS_WAIT();
	if (TWI_BUS_STATUS != TW_MT_DATA_ACK)
		return -3; // ACK

	uint8_t i;
	for (i = 0; i < len; ++i)
     d18:	8e 2f       	mov	r24, r30
     d1a:	84 1b       	sub	r24, r20
     d1c:	86 17       	cp	r24, r22
     d1e:	70 f3       	brcs	.-36     	; 0xcfc <avr_cy2239x_write_buffer+0x48>
		if (TWI_BUS_STATUS != TW_MT_DATA_ACK)
			return -4; // ACK
		buf++;
	}

	TWI_BUS_STOP();
     d20:	84 e9       	ldi	r24, 0x94	; 148
     d22:	86 bf       	out	0x36, r24	; 54
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	30 e0       	ldi	r19, 0x00	; 0

	return TRUE;
}
     d28:	c9 01       	movw	r24, r18
     d2a:	08 95       	ret

00000d2c <atoi>:
     d2c:	fc 01       	movw	r30, r24
     d2e:	88 27       	eor	r24, r24
     d30:	99 27       	eor	r25, r25
     d32:	e8 94       	clt
     d34:	21 91       	ld	r18, Z+
     d36:	20 32       	cpi	r18, 0x20	; 32
     d38:	e9 f3       	breq	.-6      	; 0xd34 <atoi+0x8>
     d3a:	29 30       	cpi	r18, 0x09	; 9
     d3c:	10 f0       	brcs	.+4      	; 0xd42 <atoi+0x16>
     d3e:	2e 30       	cpi	r18, 0x0E	; 14
     d40:	c8 f3       	brcs	.-14     	; 0xd34 <atoi+0x8>
     d42:	2b 32       	cpi	r18, 0x2B	; 43
     d44:	39 f0       	breq	.+14     	; 0xd54 <atoi+0x28>
     d46:	2d 32       	cpi	r18, 0x2D	; 45
     d48:	31 f4       	brne	.+12     	; 0xd56 <atoi+0x2a>
     d4a:	68 94       	set
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <atoi+0x28>
     d4e:	4f d0       	rcall	.+158    	; 0xdee <__mulhi_const_10>
     d50:	82 0f       	add	r24, r18
     d52:	91 1d       	adc	r25, r1
     d54:	21 91       	ld	r18, Z+
     d56:	20 53       	subi	r18, 0x30	; 48
     d58:	2a 30       	cpi	r18, 0x0A	; 10
     d5a:	c8 f3       	brcs	.-14     	; 0xd4e <atoi+0x22>
     d5c:	1e f4       	brtc	.+6      	; 0xd64 <atoi+0x38>
     d5e:	90 95       	com	r25
     d60:	81 95       	neg	r24
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	08 95       	ret

00000d66 <atol>:
     d66:	1f 93       	push	r17
     d68:	fc 01       	movw	r30, r24
     d6a:	99 27       	eor	r25, r25
     d6c:	88 27       	eor	r24, r24
     d6e:	bc 01       	movw	r22, r24
     d70:	e8 94       	clt
     d72:	11 91       	ld	r17, Z+
     d74:	10 32       	cpi	r17, 0x20	; 32
     d76:	e9 f3       	breq	.-6      	; 0xd72 <atol+0xc>
     d78:	19 30       	cpi	r17, 0x09	; 9
     d7a:	10 f0       	brcs	.+4      	; 0xd80 <atol+0x1a>
     d7c:	1e 30       	cpi	r17, 0x0E	; 14
     d7e:	c8 f3       	brcs	.-14     	; 0xd72 <atol+0xc>
     d80:	1b 32       	cpi	r17, 0x2B	; 43
     d82:	49 f0       	breq	.+18     	; 0xd96 <atol+0x30>
     d84:	1d 32       	cpi	r17, 0x2D	; 45
     d86:	41 f4       	brne	.+16     	; 0xd98 <atol+0x32>
     d88:	68 94       	set
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <atol+0x30>
     d8c:	1b d0       	rcall	.+54     	; 0xdc4 <__mulsi_const_10>
     d8e:	61 0f       	add	r22, r17
     d90:	71 1d       	adc	r23, r1
     d92:	81 1d       	adc	r24, r1
     d94:	91 1d       	adc	r25, r1
     d96:	11 91       	ld	r17, Z+
     d98:	10 53       	subi	r17, 0x30	; 48
     d9a:	1a 30       	cpi	r17, 0x0A	; 10
     d9c:	b8 f3       	brcs	.-18     	; 0xd8c <atol+0x26>
     d9e:	3e f4       	brtc	.+14     	; 0xdae <atol+0x48>
     da0:	90 95       	com	r25
     da2:	80 95       	com	r24
     da4:	70 95       	com	r23
     da6:	61 95       	neg	r22
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	8f 4f       	sbci	r24, 0xFF	; 255
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	1f 91       	pop	r17
     db0:	08 95       	ret

00000db2 <strcmp>:
     db2:	fb 01       	movw	r30, r22
     db4:	dc 01       	movw	r26, r24
     db6:	8d 91       	ld	r24, X+
     db8:	01 90       	ld	r0, Z+
     dba:	80 19       	sub	r24, r0
     dbc:	01 10       	cpse	r0, r1
     dbe:	d9 f3       	breq	.-10     	; 0xdb6 <strcmp+0x4>
     dc0:	99 0b       	sbc	r25, r25
     dc2:	08 95       	ret

00000dc4 <__mulsi_const_10>:
     dc4:	59 2f       	mov	r21, r25
     dc6:	48 2f       	mov	r20, r24
     dc8:	37 2f       	mov	r19, r23
     dca:	26 2f       	mov	r18, r22
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	66 0f       	add	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	88 1f       	adc	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	62 0f       	add	r22, r18
     dde:	73 1f       	adc	r23, r19
     de0:	84 1f       	adc	r24, r20
     de2:	95 1f       	adc	r25, r21
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	08 95       	ret

00000dee <__mulhi_const_10>:
     dee:	7a e0       	ldi	r23, 0x0A	; 10
     df0:	97 9f       	mul	r25, r23
     df2:	90 2d       	mov	r25, r0
     df4:	87 9f       	mul	r24, r23
     df6:	80 2d       	mov	r24, r0
     df8:	91 0d       	add	r25, r1
     dfa:	11 24       	eor	r1, r1
     dfc:	08 95       	ret

00000dfe <fputc>:
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	8c 01       	movw	r16, r24
     e08:	eb 01       	movw	r28, r22
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	81 ff       	sbrs	r24, 1
     e0e:	1b c0       	rjmp	.+54     	; 0xe46 <fputc+0x48>
     e10:	82 ff       	sbrs	r24, 2
     e12:	0d c0       	rjmp	.+26     	; 0xe2e <fputc+0x30>
     e14:	2e 81       	ldd	r18, Y+6	; 0x06
     e16:	3f 81       	ldd	r19, Y+7	; 0x07
     e18:	8c 81       	ldd	r24, Y+4	; 0x04
     e1a:	9d 81       	ldd	r25, Y+5	; 0x05
     e1c:	28 17       	cp	r18, r24
     e1e:	39 07       	cpc	r19, r25
     e20:	64 f4       	brge	.+24     	; 0xe3a <fputc+0x3c>
     e22:	e8 81       	ld	r30, Y
     e24:	f9 81       	ldd	r31, Y+1	; 0x01
     e26:	01 93       	st	Z+, r16
     e28:	f9 83       	std	Y+1, r31	; 0x01
     e2a:	e8 83       	st	Y, r30
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <fputc+0x3c>
     e2e:	e8 85       	ldd	r30, Y+8	; 0x08
     e30:	f9 85       	ldd	r31, Y+9	; 0x09
     e32:	80 2f       	mov	r24, r16
     e34:	09 95       	icall
     e36:	89 2b       	or	r24, r25
     e38:	31 f4       	brne	.+12     	; 0xe46 <fputc+0x48>
     e3a:	8e 81       	ldd	r24, Y+6	; 0x06
     e3c:	9f 81       	ldd	r25, Y+7	; 0x07
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	9f 83       	std	Y+7, r25	; 0x07
     e42:	8e 83       	std	Y+6, r24	; 0x06
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <fputc+0x4c>
     e46:	0f ef       	ldi	r16, 0xFF	; 255
     e48:	1f ef       	ldi	r17, 0xFF	; 255
     e4a:	c8 01       	movw	r24, r16
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	08 95       	ret

00000e56 <printf>:
     e56:	a0 e0       	ldi	r26, 0x00	; 0
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e0 e3       	ldi	r30, 0x30	; 48
     e5c:	f7 e0       	ldi	r31, 0x07	; 7
     e5e:	e1 c5       	rjmp	.+3010   	; 0x1a22 <__prologue_saves__+0x20>
     e60:	fe 01       	movw	r30, r28
     e62:	35 96       	adiw	r30, 0x05	; 5
     e64:	61 91       	ld	r22, Z+
     e66:	71 91       	ld	r23, Z+
     e68:	80 91 d6 01 	lds	r24, 0x01D6
     e6c:	90 91 d7 01 	lds	r25, 0x01D7
     e70:	af 01       	movw	r20, r30
     e72:	72 d0       	rcall	.+228    	; 0xf58 <vfprintf>
     e74:	20 96       	adiw	r28, 0x00	; 0
     e76:	e2 e0       	ldi	r30, 0x02	; 2
     e78:	f0 c5       	rjmp	.+3040   	; 0x1a5a <__epilogue_restores__+0x20>

00000e7a <printf_P>:
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e2 e4       	ldi	r30, 0x42	; 66
     e80:	f7 e0       	ldi	r31, 0x07	; 7
     e82:	cf c5       	rjmp	.+2974   	; 0x1a22 <__prologue_saves__+0x20>
     e84:	fe 01       	movw	r30, r28
     e86:	35 96       	adiw	r30, 0x05	; 5
     e88:	61 91       	ld	r22, Z+
     e8a:	71 91       	ld	r23, Z+
     e8c:	a0 91 d6 01 	lds	r26, 0x01D6
     e90:	b0 91 d7 01 	lds	r27, 0x01D7
     e94:	13 96       	adiw	r26, 0x03	; 3
     e96:	8c 91       	ld	r24, X
     e98:	13 97       	sbiw	r26, 0x03	; 3
     e9a:	88 60       	ori	r24, 0x08	; 8
     e9c:	13 96       	adiw	r26, 0x03	; 3
     e9e:	8c 93       	st	X, r24
     ea0:	80 91 d6 01 	lds	r24, 0x01D6
     ea4:	90 91 d7 01 	lds	r25, 0x01D7
     ea8:	af 01       	movw	r20, r30
     eaa:	56 d0       	rcall	.+172    	; 0xf58 <vfprintf>
     eac:	e0 91 d6 01 	lds	r30, 0x01D6
     eb0:	f0 91 d7 01 	lds	r31, 0x01D7
     eb4:	23 81       	ldd	r18, Z+3	; 0x03
     eb6:	27 7f       	andi	r18, 0xF7	; 247
     eb8:	23 83       	std	Z+3, r18	; 0x03
     eba:	20 96       	adiw	r28, 0x00	; 0
     ebc:	e2 e0       	ldi	r30, 0x02	; 2
     ebe:	cd c5       	rjmp	.+2970   	; 0x1a5a <__epilogue_restores__+0x20>

00000ec0 <puts>:
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	8c 01       	movw	r16, r24
     eca:	e0 91 d6 01 	lds	r30, 0x01D6
     ece:	f0 91 d7 01 	lds	r31, 0x01D7
     ed2:	83 81       	ldd	r24, Z+3	; 0x03
     ed4:	81 ff       	sbrs	r24, 1
     ed6:	21 c0       	rjmp	.+66     	; 0xf1a <puts+0x5a>
     ed8:	c0 e0       	ldi	r28, 0x00	; 0
     eda:	d0 e0       	ldi	r29, 0x00	; 0
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <puts+0x38>
     ede:	e0 91 d6 01 	lds	r30, 0x01D6
     ee2:	f0 91 d7 01 	lds	r31, 0x01D7
     ee6:	20 85       	ldd	r18, Z+8	; 0x08
     ee8:	31 85       	ldd	r19, Z+9	; 0x09
     eea:	bf 01       	movw	r22, r30
     eec:	f9 01       	movw	r30, r18
     eee:	09 95       	icall
     ef0:	89 2b       	or	r24, r25
     ef2:	11 f0       	breq	.+4      	; 0xef8 <puts+0x38>
     ef4:	cf ef       	ldi	r28, 0xFF	; 255
     ef6:	df ef       	ldi	r29, 0xFF	; 255
     ef8:	f8 01       	movw	r30, r16
     efa:	81 91       	ld	r24, Z+
     efc:	8f 01       	movw	r16, r30
     efe:	88 23       	and	r24, r24
     f00:	71 f7       	brne	.-36     	; 0xede <puts+0x1e>
     f02:	e0 91 d6 01 	lds	r30, 0x01D6
     f06:	f0 91 d7 01 	lds	r31, 0x01D7
     f0a:	20 85       	ldd	r18, Z+8	; 0x08
     f0c:	31 85       	ldd	r19, Z+9	; 0x09
     f0e:	8a e0       	ldi	r24, 0x0A	; 10
     f10:	bf 01       	movw	r22, r30
     f12:	f9 01       	movw	r30, r18
     f14:	09 95       	icall
     f16:	89 2b       	or	r24, r25
     f18:	11 f0       	breq	.+4      	; 0xf1e <puts+0x5e>
     f1a:	cf ef       	ldi	r28, 0xFF	; 255
     f1c:	df ef       	ldi	r29, 0xFF	; 255
     f1e:	ce 01       	movw	r24, r28
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <sscanf>:
     f2a:	ae e0       	ldi	r26, 0x0E	; 14
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ea e9       	ldi	r30, 0x9A	; 154
     f30:	f7 e0       	ldi	r31, 0x07	; 7
     f32:	77 c5       	rjmp	.+2798   	; 0x1a22 <__prologue_saves__+0x20>
     f34:	85 e0       	ldi	r24, 0x05	; 5
     f36:	8c 83       	std	Y+4, r24	; 0x04
     f38:	8b 89       	ldd	r24, Y+19	; 0x13
     f3a:	9c 89       	ldd	r25, Y+20	; 0x14
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	9e 01       	movw	r18, r28
     f42:	29 5e       	subi	r18, 0xE9	; 233
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	6d 89       	ldd	r22, Y+21	; 0x15
     f4c:	7e 89       	ldd	r23, Y+22	; 0x16
     f4e:	a9 01       	movw	r20, r18
     f50:	44 d3       	rcall	.+1672   	; 0x15da <vfscanf>
     f52:	2e 96       	adiw	r28, 0x0e	; 14
     f54:	e2 e0       	ldi	r30, 0x02	; 2
     f56:	81 c5       	rjmp	.+2818   	; 0x1a5a <__epilogue_restores__+0x20>

00000f58 <vfprintf>:
     f58:	ab e0       	ldi	r26, 0x0B	; 11
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e1 eb       	ldi	r30, 0xB1	; 177
     f5e:	f7 e0       	ldi	r31, 0x07	; 7
     f60:	50 c5       	rjmp	.+2720   	; 0x1a02 <__prologue_saves__>
     f62:	3c 01       	movw	r6, r24
     f64:	2b 01       	movw	r4, r22
     f66:	5a 01       	movw	r10, r20
     f68:	fc 01       	movw	r30, r24
     f6a:	17 82       	std	Z+7, r1	; 0x07
     f6c:	16 82       	std	Z+6, r1	; 0x06
     f6e:	83 81       	ldd	r24, Z+3	; 0x03
     f70:	81 fd       	sbrc	r24, 1
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <vfprintf+0x22>
     f74:	6f ef       	ldi	r22, 0xFF	; 255
     f76:	7f ef       	ldi	r23, 0xFF	; 255
     f78:	b9 c1       	rjmp	.+882    	; 0x12ec <vfprintf+0x394>
     f7a:	9a e0       	ldi	r25, 0x0A	; 10
     f7c:	89 2e       	mov	r8, r25
     f7e:	1e 01       	movw	r2, r28
     f80:	08 94       	sec
     f82:	21 1c       	adc	r2, r1
     f84:	31 1c       	adc	r3, r1
     f86:	f3 01       	movw	r30, r6
     f88:	23 81       	ldd	r18, Z+3	; 0x03
     f8a:	f2 01       	movw	r30, r4
     f8c:	23 fd       	sbrc	r18, 3
     f8e:	85 91       	lpm	r24, Z+
     f90:	23 ff       	sbrs	r18, 3
     f92:	81 91       	ld	r24, Z+
     f94:	2f 01       	movw	r4, r30
     f96:	88 23       	and	r24, r24
     f98:	09 f4       	brne	.+2      	; 0xf9c <vfprintf+0x44>
     f9a:	a5 c1       	rjmp	.+842    	; 0x12e6 <vfprintf+0x38e>
     f9c:	85 32       	cpi	r24, 0x25	; 37
     f9e:	39 f4       	brne	.+14     	; 0xfae <vfprintf+0x56>
     fa0:	23 fd       	sbrc	r18, 3
     fa2:	85 91       	lpm	r24, Z+
     fa4:	23 ff       	sbrs	r18, 3
     fa6:	81 91       	ld	r24, Z+
     fa8:	2f 01       	movw	r4, r30
     faa:	85 32       	cpi	r24, 0x25	; 37
     fac:	21 f4       	brne	.+8      	; 0xfb6 <vfprintf+0x5e>
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	b3 01       	movw	r22, r6
     fb2:	25 df       	rcall	.-438    	; 0xdfe <fputc>
     fb4:	e8 cf       	rjmp	.-48     	; 0xf86 <vfprintf+0x2e>
     fb6:	98 2f       	mov	r25, r24
     fb8:	ff 24       	eor	r15, r15
     fba:	ee 24       	eor	r14, r14
     fbc:	99 24       	eor	r9, r9
     fbe:	ff e1       	ldi	r31, 0x1F	; 31
     fc0:	ff 15       	cp	r31, r15
     fc2:	d0 f0       	brcs	.+52     	; 0xff8 <vfprintf+0xa0>
     fc4:	9b 32       	cpi	r25, 0x2B	; 43
     fc6:	69 f0       	breq	.+26     	; 0xfe2 <vfprintf+0x8a>
     fc8:	9c 32       	cpi	r25, 0x2C	; 44
     fca:	28 f4       	brcc	.+10     	; 0xfd6 <vfprintf+0x7e>
     fcc:	90 32       	cpi	r25, 0x20	; 32
     fce:	59 f0       	breq	.+22     	; 0xfe6 <vfprintf+0x8e>
     fd0:	93 32       	cpi	r25, 0x23	; 35
     fd2:	91 f4       	brne	.+36     	; 0xff8 <vfprintf+0xa0>
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <vfprintf+0x9a>
     fd6:	9d 32       	cpi	r25, 0x2D	; 45
     fd8:	49 f0       	breq	.+18     	; 0xfec <vfprintf+0x94>
     fda:	90 33       	cpi	r25, 0x30	; 48
     fdc:	69 f4       	brne	.+26     	; 0xff8 <vfprintf+0xa0>
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	24 c0       	rjmp	.+72     	; 0x102a <vfprintf+0xd2>
     fe2:	52 e0       	ldi	r21, 0x02	; 2
     fe4:	f5 2a       	or	r15, r21
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	f8 2a       	or	r15, r24
     fea:	28 c0       	rjmp	.+80     	; 0x103c <vfprintf+0xe4>
     fec:	98 e0       	ldi	r25, 0x08	; 8
     fee:	f9 2a       	or	r15, r25
     ff0:	25 c0       	rjmp	.+74     	; 0x103c <vfprintf+0xe4>
     ff2:	e0 e1       	ldi	r30, 0x10	; 16
     ff4:	fe 2a       	or	r15, r30
     ff6:	22 c0       	rjmp	.+68     	; 0x103c <vfprintf+0xe4>
     ff8:	f7 fc       	sbrc	r15, 7
     ffa:	29 c0       	rjmp	.+82     	; 0x104e <vfprintf+0xf6>
     ffc:	89 2f       	mov	r24, r25
     ffe:	80 53       	subi	r24, 0x30	; 48
    1000:	8a 30       	cpi	r24, 0x0A	; 10
    1002:	70 f4       	brcc	.+28     	; 0x1020 <vfprintf+0xc8>
    1004:	f6 fe       	sbrs	r15, 6
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <vfprintf+0xba>
    1008:	98 9c       	mul	r9, r8
    100a:	90 2c       	mov	r9, r0
    100c:	11 24       	eor	r1, r1
    100e:	98 0e       	add	r9, r24
    1010:	15 c0       	rjmp	.+42     	; 0x103c <vfprintf+0xe4>
    1012:	e8 9c       	mul	r14, r8
    1014:	e0 2c       	mov	r14, r0
    1016:	11 24       	eor	r1, r1
    1018:	e8 0e       	add	r14, r24
    101a:	f0 e2       	ldi	r31, 0x20	; 32
    101c:	ff 2a       	or	r15, r31
    101e:	0e c0       	rjmp	.+28     	; 0x103c <vfprintf+0xe4>
    1020:	9e 32       	cpi	r25, 0x2E	; 46
    1022:	29 f4       	brne	.+10     	; 0x102e <vfprintf+0xd6>
    1024:	f6 fc       	sbrc	r15, 6
    1026:	5f c1       	rjmp	.+702    	; 0x12e6 <vfprintf+0x38e>
    1028:	40 e4       	ldi	r20, 0x40	; 64
    102a:	f4 2a       	or	r15, r20
    102c:	07 c0       	rjmp	.+14     	; 0x103c <vfprintf+0xe4>
    102e:	9c 36       	cpi	r25, 0x6C	; 108
    1030:	19 f4       	brne	.+6      	; 0x1038 <vfprintf+0xe0>
    1032:	50 e8       	ldi	r21, 0x80	; 128
    1034:	f5 2a       	or	r15, r21
    1036:	02 c0       	rjmp	.+4      	; 0x103c <vfprintf+0xe4>
    1038:	98 36       	cpi	r25, 0x68	; 104
    103a:	49 f4       	brne	.+18     	; 0x104e <vfprintf+0xf6>
    103c:	f2 01       	movw	r30, r4
    103e:	23 fd       	sbrc	r18, 3
    1040:	95 91       	lpm	r25, Z+
    1042:	23 ff       	sbrs	r18, 3
    1044:	91 91       	ld	r25, Z+
    1046:	2f 01       	movw	r4, r30
    1048:	99 23       	and	r25, r25
    104a:	09 f0       	breq	.+2      	; 0x104e <vfprintf+0xf6>
    104c:	b8 cf       	rjmp	.-144    	; 0xfbe <vfprintf+0x66>
    104e:	89 2f       	mov	r24, r25
    1050:	85 54       	subi	r24, 0x45	; 69
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	18 f0       	brcs	.+6      	; 0x105c <vfprintf+0x104>
    1056:	80 52       	subi	r24, 0x20	; 32
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	38 f4       	brcc	.+14     	; 0x106a <vfprintf+0x112>
    105c:	44 e0       	ldi	r20, 0x04	; 4
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	a4 0e       	add	r10, r20
    1062:	b5 1e       	adc	r11, r21
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	59 83       	std	Y+1, r21	; 0x01
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <vfprintf+0x130>
    106a:	93 36       	cpi	r25, 0x63	; 99
    106c:	31 f0       	breq	.+12     	; 0x107a <vfprintf+0x122>
    106e:	93 37       	cpi	r25, 0x73	; 115
    1070:	79 f0       	breq	.+30     	; 0x1090 <vfprintf+0x138>
    1072:	93 35       	cpi	r25, 0x53	; 83
    1074:	09 f0       	breq	.+2      	; 0x1078 <vfprintf+0x120>
    1076:	52 c0       	rjmp	.+164    	; 0x111c <vfprintf+0x1c4>
    1078:	1f c0       	rjmp	.+62     	; 0x10b8 <vfprintf+0x160>
    107a:	f5 01       	movw	r30, r10
    107c:	80 81       	ld	r24, Z
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	42 e0       	ldi	r20, 0x02	; 2
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	a4 0e       	add	r10, r20
    1086:	b5 1e       	adc	r11, r21
    1088:	61 01       	movw	r12, r2
    108a:	01 e0       	ldi	r16, 0x01	; 1
    108c:	10 e0       	ldi	r17, 0x00	; 0
    108e:	11 c0       	rjmp	.+34     	; 0x10b2 <vfprintf+0x15a>
    1090:	f5 01       	movw	r30, r10
    1092:	c0 80       	ld	r12, Z
    1094:	d1 80       	ldd	r13, Z+1	; 0x01
    1096:	f6 fc       	sbrc	r15, 6
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <vfprintf+0x148>
    109a:	6f ef       	ldi	r22, 0xFF	; 255
    109c:	7f ef       	ldi	r23, 0xFF	; 255
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x14c>
    10a0:	69 2d       	mov	r22, r9
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	42 e0       	ldi	r20, 0x02	; 2
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	a4 0e       	add	r10, r20
    10aa:	b5 1e       	adc	r11, r21
    10ac:	c6 01       	movw	r24, r12
    10ae:	ac d3       	rcall	.+1880   	; 0x1808 <strnlen>
    10b0:	8c 01       	movw	r16, r24
    10b2:	5f e7       	ldi	r21, 0x7F	; 127
    10b4:	f5 22       	and	r15, r21
    10b6:	13 c0       	rjmp	.+38     	; 0x10de <vfprintf+0x186>
    10b8:	f5 01       	movw	r30, r10
    10ba:	c0 80       	ld	r12, Z
    10bc:	d1 80       	ldd	r13, Z+1	; 0x01
    10be:	f6 fc       	sbrc	r15, 6
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <vfprintf+0x170>
    10c2:	6f ef       	ldi	r22, 0xFF	; 255
    10c4:	7f ef       	ldi	r23, 0xFF	; 255
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <vfprintf+0x174>
    10c8:	69 2d       	mov	r22, r9
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	42 e0       	ldi	r20, 0x02	; 2
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	a4 0e       	add	r10, r20
    10d2:	b5 1e       	adc	r11, r21
    10d4:	c6 01       	movw	r24, r12
    10d6:	8d d3       	rcall	.+1818   	; 0x17f2 <strnlen_P>
    10d8:	8c 01       	movw	r16, r24
    10da:	50 e8       	ldi	r21, 0x80	; 128
    10dc:	f5 2a       	or	r15, r21
    10de:	f3 fe       	sbrs	r15, 3
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0x196>
    10e2:	18 c0       	rjmp	.+48     	; 0x1114 <vfprintf+0x1bc>
    10e4:	80 e2       	ldi	r24, 0x20	; 32
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	b3 01       	movw	r22, r6
    10ea:	89 de       	rcall	.-750    	; 0xdfe <fputc>
    10ec:	ea 94       	dec	r14
    10ee:	8e 2d       	mov	r24, r14
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	08 17       	cp	r16, r24
    10f4:	19 07       	cpc	r17, r25
    10f6:	b0 f3       	brcs	.-20     	; 0x10e4 <vfprintf+0x18c>
    10f8:	0d c0       	rjmp	.+26     	; 0x1114 <vfprintf+0x1bc>
    10fa:	f6 01       	movw	r30, r12
    10fc:	f7 fc       	sbrc	r15, 7
    10fe:	85 91       	lpm	r24, Z+
    1100:	f7 fe       	sbrs	r15, 7
    1102:	81 91       	ld	r24, Z+
    1104:	6f 01       	movw	r12, r30
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	b3 01       	movw	r22, r6
    110a:	79 de       	rcall	.-782    	; 0xdfe <fputc>
    110c:	e1 10       	cpse	r14, r1
    110e:	ea 94       	dec	r14
    1110:	01 50       	subi	r16, 0x01	; 1
    1112:	10 40       	sbci	r17, 0x00	; 0
    1114:	01 15       	cp	r16, r1
    1116:	11 05       	cpc	r17, r1
    1118:	81 f7       	brne	.-32     	; 0x10fa <vfprintf+0x1a2>
    111a:	e2 c0       	rjmp	.+452    	; 0x12e0 <vfprintf+0x388>
    111c:	94 36       	cpi	r25, 0x64	; 100
    111e:	11 f0       	breq	.+4      	; 0x1124 <vfprintf+0x1cc>
    1120:	99 36       	cpi	r25, 0x69	; 105
    1122:	61 f5       	brne	.+88     	; 0x117c <vfprintf+0x224>
    1124:	f7 fe       	sbrs	r15, 7
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <vfprintf+0x1e0>
    1128:	f5 01       	movw	r30, r10
    112a:	20 81       	ld	r18, Z
    112c:	31 81       	ldd	r19, Z+1	; 0x01
    112e:	42 81       	ldd	r20, Z+2	; 0x02
    1130:	53 81       	ldd	r21, Z+3	; 0x03
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0a c0       	rjmp	.+20     	; 0x114c <vfprintf+0x1f4>
    1138:	f5 01       	movw	r30, r10
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	9c 01       	movw	r18, r24
    1140:	44 27       	eor	r20, r20
    1142:	37 fd       	sbrc	r19, 7
    1144:	40 95       	com	r20
    1146:	54 2f       	mov	r21, r20
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a8 0e       	add	r10, r24
    114e:	b9 1e       	adc	r11, r25
    1150:	9f e6       	ldi	r25, 0x6F	; 111
    1152:	f9 22       	and	r15, r25
    1154:	57 ff       	sbrs	r21, 7
    1156:	09 c0       	rjmp	.+18     	; 0x116a <vfprintf+0x212>
    1158:	50 95       	com	r21
    115a:	40 95       	com	r20
    115c:	30 95       	com	r19
    115e:	21 95       	neg	r18
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	4f 4f       	sbci	r20, 0xFF	; 255
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	e0 e8       	ldi	r30, 0x80	; 128
    1168:	fe 2a       	or	r15, r30
    116a:	ca 01       	movw	r24, r20
    116c:	b9 01       	movw	r22, r18
    116e:	a1 01       	movw	r20, r2
    1170:	2a e0       	ldi	r18, 0x0A	; 10
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	b0 d3       	rcall	.+1888   	; 0x18d6 <__ultoa_invert>
    1176:	d8 2e       	mov	r13, r24
    1178:	d2 18       	sub	r13, r2
    117a:	3f c0       	rjmp	.+126    	; 0x11fa <vfprintf+0x2a2>
    117c:	95 37       	cpi	r25, 0x75	; 117
    117e:	29 f4       	brne	.+10     	; 0x118a <vfprintf+0x232>
    1180:	1f 2d       	mov	r17, r15
    1182:	1f 7e       	andi	r17, 0xEF	; 239
    1184:	2a e0       	ldi	r18, 0x0A	; 10
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	1d c0       	rjmp	.+58     	; 0x11c4 <vfprintf+0x26c>
    118a:	1f 2d       	mov	r17, r15
    118c:	19 7f       	andi	r17, 0xF9	; 249
    118e:	9f 36       	cpi	r25, 0x6F	; 111
    1190:	61 f0       	breq	.+24     	; 0x11aa <vfprintf+0x252>
    1192:	90 37       	cpi	r25, 0x70	; 112
    1194:	20 f4       	brcc	.+8      	; 0x119e <vfprintf+0x246>
    1196:	98 35       	cpi	r25, 0x58	; 88
    1198:	09 f0       	breq	.+2      	; 0x119c <vfprintf+0x244>
    119a:	a5 c0       	rjmp	.+330    	; 0x12e6 <vfprintf+0x38e>
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <vfprintf+0x264>
    119e:	90 37       	cpi	r25, 0x70	; 112
    11a0:	39 f0       	breq	.+14     	; 0x11b0 <vfprintf+0x258>
    11a2:	98 37       	cpi	r25, 0x78	; 120
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <vfprintf+0x250>
    11a6:	9f c0       	rjmp	.+318    	; 0x12e6 <vfprintf+0x38e>
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <vfprintf+0x25a>
    11aa:	28 e0       	ldi	r18, 0x08	; 8
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	0a c0       	rjmp	.+20     	; 0x11c4 <vfprintf+0x26c>
    11b0:	10 61       	ori	r17, 0x10	; 16
    11b2:	14 fd       	sbrc	r17, 4
    11b4:	14 60       	ori	r17, 0x04	; 4
    11b6:	20 e1       	ldi	r18, 0x10	; 16
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <vfprintf+0x26c>
    11bc:	14 fd       	sbrc	r17, 4
    11be:	16 60       	ori	r17, 0x06	; 6
    11c0:	20 e1       	ldi	r18, 0x10	; 16
    11c2:	32 e0       	ldi	r19, 0x02	; 2
    11c4:	17 ff       	sbrs	r17, 7
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <vfprintf+0x280>
    11c8:	f5 01       	movw	r30, r10
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	44 e0       	ldi	r20, 0x04	; 4
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	08 c0       	rjmp	.+16     	; 0x11e8 <vfprintf+0x290>
    11d8:	f5 01       	movw	r30, r10
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	bc 01       	movw	r22, r24
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	42 e0       	ldi	r20, 0x02	; 2
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	a4 0e       	add	r10, r20
    11ea:	b5 1e       	adc	r11, r21
    11ec:	a1 01       	movw	r20, r2
    11ee:	73 d3       	rcall	.+1766   	; 0x18d6 <__ultoa_invert>
    11f0:	d8 2e       	mov	r13, r24
    11f2:	d2 18       	sub	r13, r2
    11f4:	8f e7       	ldi	r24, 0x7F	; 127
    11f6:	f8 2e       	mov	r15, r24
    11f8:	f1 22       	and	r15, r17
    11fa:	f6 fe       	sbrs	r15, 6
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <vfprintf+0x2bc>
    11fe:	5e ef       	ldi	r21, 0xFE	; 254
    1200:	f5 22       	and	r15, r21
    1202:	d9 14       	cp	r13, r9
    1204:	38 f4       	brcc	.+14     	; 0x1214 <vfprintf+0x2bc>
    1206:	f4 fe       	sbrs	r15, 4
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <vfprintf+0x2c0>
    120a:	f2 fc       	sbrc	r15, 2
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <vfprintf+0x2c0>
    120e:	8f ee       	ldi	r24, 0xEF	; 239
    1210:	f8 22       	and	r15, r24
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <vfprintf+0x2c0>
    1214:	1d 2d       	mov	r17, r13
    1216:	01 c0       	rjmp	.+2      	; 0x121a <vfprintf+0x2c2>
    1218:	19 2d       	mov	r17, r9
    121a:	f4 fe       	sbrs	r15, 4
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <vfprintf+0x2e0>
    121e:	fe 01       	movw	r30, r28
    1220:	ed 0d       	add	r30, r13
    1222:	f1 1d       	adc	r31, r1
    1224:	80 81       	ld	r24, Z
    1226:	80 33       	cpi	r24, 0x30	; 48
    1228:	19 f4       	brne	.+6      	; 0x1230 <vfprintf+0x2d8>
    122a:	99 ee       	ldi	r25, 0xE9	; 233
    122c:	f9 22       	and	r15, r25
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <vfprintf+0x2e8>
    1230:	1f 5f       	subi	r17, 0xFF	; 255
    1232:	f2 fe       	sbrs	r15, 2
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <vfprintf+0x2e8>
    1236:	03 c0       	rjmp	.+6      	; 0x123e <vfprintf+0x2e6>
    1238:	8f 2d       	mov	r24, r15
    123a:	86 78       	andi	r24, 0x86	; 134
    123c:	09 f0       	breq	.+2      	; 0x1240 <vfprintf+0x2e8>
    123e:	1f 5f       	subi	r17, 0xFF	; 255
    1240:	0f 2d       	mov	r16, r15
    1242:	f3 fc       	sbrc	r15, 3
    1244:	13 c0       	rjmp	.+38     	; 0x126c <vfprintf+0x314>
    1246:	f0 fe       	sbrs	r15, 0
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <vfprintf+0x30e>
    124a:	1e 15       	cp	r17, r14
    124c:	10 f0       	brcs	.+4      	; 0x1252 <vfprintf+0x2fa>
    124e:	9d 2c       	mov	r9, r13
    1250:	0a c0       	rjmp	.+20     	; 0x1266 <vfprintf+0x30e>
    1252:	9d 2c       	mov	r9, r13
    1254:	9e 0c       	add	r9, r14
    1256:	91 1a       	sub	r9, r17
    1258:	1e 2d       	mov	r17, r14
    125a:	05 c0       	rjmp	.+10     	; 0x1266 <vfprintf+0x30e>
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	b3 01       	movw	r22, r6
    1262:	cd dd       	rcall	.-1126   	; 0xdfe <fputc>
    1264:	1f 5f       	subi	r17, 0xFF	; 255
    1266:	1e 15       	cp	r17, r14
    1268:	c8 f3       	brcs	.-14     	; 0x125c <vfprintf+0x304>
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <vfprintf+0x31c>
    126c:	1e 15       	cp	r17, r14
    126e:	10 f4       	brcc	.+4      	; 0x1274 <vfprintf+0x31c>
    1270:	e1 1a       	sub	r14, r17
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <vfprintf+0x31e>
    1274:	ee 24       	eor	r14, r14
    1276:	04 ff       	sbrs	r16, 4
    1278:	0e c0       	rjmp	.+28     	; 0x1296 <vfprintf+0x33e>
    127a:	80 e3       	ldi	r24, 0x30	; 48
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	b3 01       	movw	r22, r6
    1280:	be dd       	rcall	.-1156   	; 0xdfe <fputc>
    1282:	02 ff       	sbrs	r16, 2
    1284:	1b c0       	rjmp	.+54     	; 0x12bc <vfprintf+0x364>
    1286:	01 fd       	sbrc	r16, 1
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <vfprintf+0x338>
    128a:	88 e7       	ldi	r24, 0x78	; 120
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <vfprintf+0x354>
    1290:	88 e5       	ldi	r24, 0x58	; 88
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0b c0       	rjmp	.+22     	; 0x12ac <vfprintf+0x354>
    1296:	80 2f       	mov	r24, r16
    1298:	86 78       	andi	r24, 0x86	; 134
    129a:	81 f0       	breq	.+32     	; 0x12bc <vfprintf+0x364>
    129c:	01 ff       	sbrs	r16, 1
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x34c>
    12a0:	8b e2       	ldi	r24, 0x2B	; 43
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <vfprintf+0x34e>
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	f7 fc       	sbrc	r15, 7
    12a8:	8d e2       	ldi	r24, 0x2D	; 45
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	b3 01       	movw	r22, r6
    12ae:	a7 dd       	rcall	.-1202   	; 0xdfe <fputc>
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <vfprintf+0x364>
    12b2:	80 e3       	ldi	r24, 0x30	; 48
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	b3 01       	movw	r22, r6
    12b8:	a2 dd       	rcall	.-1212   	; 0xdfe <fputc>
    12ba:	9a 94       	dec	r9
    12bc:	d9 14       	cp	r13, r9
    12be:	c8 f3       	brcs	.-14     	; 0x12b2 <vfprintf+0x35a>
    12c0:	da 94       	dec	r13
    12c2:	f1 01       	movw	r30, r2
    12c4:	ed 0d       	add	r30, r13
    12c6:	f1 1d       	adc	r31, r1
    12c8:	80 81       	ld	r24, Z
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	b3 01       	movw	r22, r6
    12ce:	97 dd       	rcall	.-1234   	; 0xdfe <fputc>
    12d0:	dd 20       	and	r13, r13
    12d2:	b1 f7       	brne	.-20     	; 0x12c0 <vfprintf+0x368>
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <vfprintf+0x388>
    12d6:	80 e2       	ldi	r24, 0x20	; 32
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	b3 01       	movw	r22, r6
    12dc:	90 dd       	rcall	.-1248   	; 0xdfe <fputc>
    12de:	ea 94       	dec	r14
    12e0:	ee 20       	and	r14, r14
    12e2:	c9 f7       	brne	.-14     	; 0x12d6 <vfprintf+0x37e>
    12e4:	50 ce       	rjmp	.-864    	; 0xf86 <vfprintf+0x2e>
    12e6:	f3 01       	movw	r30, r6
    12e8:	66 81       	ldd	r22, Z+6	; 0x06
    12ea:	77 81       	ldd	r23, Z+7	; 0x07
    12ec:	cb 01       	movw	r24, r22
    12ee:	2b 96       	adiw	r28, 0x0b	; 11
    12f0:	e2 e1       	ldi	r30, 0x12	; 18
    12f2:	a3 c3       	rjmp	.+1862   	; 0x1a3a <__epilogue_restores__>

000012f4 <putval>:
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 fd       	sbrc	r18, 0
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <putval+0x16>
    12fa:	23 fd       	sbrc	r18, 3
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <putval+0x14>
    12fe:	22 ff       	sbrs	r18, 2
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <putval+0x12>
    1302:	73 83       	std	Z+3, r23	; 0x03
    1304:	62 83       	std	Z+2, r22	; 0x02
    1306:	51 83       	std	Z+1, r21	; 0x01
    1308:	40 83       	st	Z, r20
    130a:	08 95       	ret

0000130c <mulacc>:
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	44 ff       	sbrs	r20, 4
    1316:	02 c0       	rjmp	.+4      	; 0x131c <mulacc+0x10>
    1318:	33 e0       	ldi	r19, 0x03	; 3
    131a:	11 c0       	rjmp	.+34     	; 0x133e <mulacc+0x32>
    131c:	46 ff       	sbrs	r20, 6
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <mulacc+0x18>
    1320:	34 e0       	ldi	r19, 0x04	; 4
    1322:	0d c0       	rjmp	.+26     	; 0x133e <mulacc+0x32>
    1324:	db 01       	movw	r26, r22
    1326:	fc 01       	movw	r30, r24
    1328:	aa 0f       	add	r26, r26
    132a:	bb 1f       	adc	r27, r27
    132c:	ee 1f       	adc	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	10 94       	com	r1
    1332:	d1 f7       	brne	.-12     	; 0x1328 <mulacc+0x1c>
    1334:	6a 0f       	add	r22, r26
    1336:	7b 1f       	adc	r23, r27
    1338:	8e 1f       	adc	r24, r30
    133a:	9f 1f       	adc	r25, r31
    133c:	31 e0       	ldi	r19, 0x01	; 1
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	31 50       	subi	r19, 0x01	; 1
    1348:	d1 f7       	brne	.-12     	; 0x133e <mulacc+0x32>
    134a:	7b 01       	movw	r14, r22
    134c:	8c 01       	movw	r16, r24
    134e:	e2 0e       	add	r14, r18
    1350:	f1 1c       	adc	r15, r1
    1352:	01 1d       	adc	r16, r1
    1354:	11 1d       	adc	r17, r1
    1356:	a8 01       	movw	r20, r16
    1358:	97 01       	movw	r18, r14
    135a:	b7 01       	movw	r22, r14
    135c:	ca 01       	movw	r24, r20
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	08 95       	ret

00001368 <skip_spaces>:
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	8c 01       	movw	r16, r24
    1372:	c8 01       	movw	r24, r16
    1374:	54 d2       	rcall	.+1192   	; 0x181e <fgetc>
    1376:	ec 01       	movw	r28, r24
    1378:	97 fd       	sbrc	r25, 7
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <skip_spaces+0x20>
    137c:	37 d3       	rcall	.+1646   	; 0x19ec <isspace>
    137e:	89 2b       	or	r24, r25
    1380:	c1 f7       	brne	.-16     	; 0x1372 <skip_spaces+0xa>
    1382:	ce 01       	movw	r24, r28
    1384:	b8 01       	movw	r22, r16
    1386:	8d d2       	rcall	.+1306   	; 0x18a2 <ungetc>
    1388:	ce 01       	movw	r24, r28
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <conv_int>:
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef ec       	ldi	r30, 0xCF	; 207
    139a:	f9 e0       	ldi	r31, 0x09	; 9
    139c:	3a c3       	rjmp	.+1652   	; 0x1a12 <__prologue_saves__+0x10>
    139e:	ec 01       	movw	r28, r24
    13a0:	c6 2e       	mov	r12, r22
    13a2:	5a 01       	movw	r10, r20
    13a4:	12 2f       	mov	r17, r18
    13a6:	3b d2       	rcall	.+1142   	; 0x181e <fgetc>
    13a8:	ac 01       	movw	r20, r24
    13aa:	8b 32       	cpi	r24, 0x2B	; 43
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <conv_int+0x20>
    13ae:	8d 32       	cpi	r24, 0x2D	; 45
    13b0:	49 f4       	brne	.+18     	; 0x13c4 <conv_int+0x30>
    13b2:	10 68       	ori	r17, 0x80	; 128
    13b4:	ca 94       	dec	r12
    13b6:	09 f4       	brne	.+2      	; 0x13ba <conv_int+0x26>
    13b8:	66 c0       	rjmp	.+204    	; 0x1486 <conv_int+0xf2>
    13ba:	ce 01       	movw	r24, r28
    13bc:	30 d2       	rcall	.+1120   	; 0x181e <fgetc>
    13be:	ac 01       	movw	r20, r24
    13c0:	97 fd       	sbrc	r25, 7
    13c2:	61 c0       	rjmp	.+194    	; 0x1486 <conv_int+0xf2>
    13c4:	6d ef       	ldi	r22, 0xFD	; 253
    13c6:	d6 2e       	mov	r13, r22
    13c8:	d1 22       	and	r13, r17
    13ca:	8d 2d       	mov	r24, r13
    13cc:	80 73       	andi	r24, 0x30	; 48
    13ce:	f1 f4       	brne	.+60     	; 0x140c <conv_int+0x78>
    13d0:	40 33       	cpi	r20, 0x30	; 48
    13d2:	e1 f4       	brne	.+56     	; 0x140c <conv_int+0x78>
    13d4:	ca 94       	dec	r12
    13d6:	09 f4       	brne	.+2      	; 0x13da <conv_int+0x46>
    13d8:	42 c0       	rjmp	.+132    	; 0x145e <conv_int+0xca>
    13da:	ce 01       	movw	r24, r28
    13dc:	20 d2       	rcall	.+1088   	; 0x181e <fgetc>
    13de:	ac 01       	movw	r20, r24
    13e0:	97 fd       	sbrc	r25, 7
    13e2:	3d c0       	rjmp	.+122    	; 0x145e <conv_int+0xca>
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	d8 2a       	or	r13, r24
    13e8:	48 37       	cpi	r20, 0x78	; 120
    13ea:	11 f0       	breq	.+4      	; 0x13f0 <conv_int+0x5c>
    13ec:	48 35       	cpi	r20, 0x58	; 88
    13ee:	51 f4       	brne	.+20     	; 0x1404 <conv_int+0x70>
    13f0:	80 e4       	ldi	r24, 0x40	; 64
    13f2:	d8 2a       	or	r13, r24
    13f4:	ca 94       	dec	r12
    13f6:	99 f1       	breq	.+102    	; 0x145e <conv_int+0xca>
    13f8:	ce 01       	movw	r24, r28
    13fa:	11 d2       	rcall	.+1058   	; 0x181e <fgetc>
    13fc:	ac 01       	movw	r20, r24
    13fe:	99 23       	and	r25, r25
    1400:	2c f4       	brge	.+10     	; 0x140c <conv_int+0x78>
    1402:	2d c0       	rjmp	.+90     	; 0x145e <conv_int+0xca>
    1404:	d6 fc       	sbrc	r13, 6
    1406:	02 c0       	rjmp	.+4      	; 0x140c <conv_int+0x78>
    1408:	80 e1       	ldi	r24, 0x10	; 16
    140a:	d8 2a       	or	r13, r24
    140c:	ee 24       	eor	r14, r14
    140e:	ff 24       	eor	r15, r15
    1410:	87 01       	movw	r16, r14
    1412:	24 2f       	mov	r18, r20
    1414:	20 53       	subi	r18, 0x30	; 48
    1416:	28 30       	cpi	r18, 0x08	; 8
    1418:	80 f0       	brcs	.+32     	; 0x143a <conv_int+0xa6>
    141a:	d4 fc       	sbrc	r13, 4
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <conv_int+0x9c>
    141e:	2a 30       	cpi	r18, 0x0A	; 10
    1420:	60 f0       	brcs	.+24     	; 0x143a <conv_int+0xa6>
    1422:	d6 fe       	sbrs	r13, 6
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <conv_int+0x9c>
    1426:	2f 7d       	andi	r18, 0xDF	; 223
    1428:	82 2f       	mov	r24, r18
    142a:	81 51       	subi	r24, 0x11	; 17
    142c:	86 30       	cpi	r24, 0x06	; 6
    142e:	20 f0       	brcs	.+8      	; 0x1438 <conv_int+0xa4>
    1430:	ca 01       	movw	r24, r20
    1432:	be 01       	movw	r22, r28
    1434:	36 d2       	rcall	.+1132   	; 0x18a2 <ungetc>
    1436:	10 c0       	rjmp	.+32     	; 0x1458 <conv_int+0xc4>
    1438:	27 50       	subi	r18, 0x07	; 7
    143a:	c8 01       	movw	r24, r16
    143c:	b7 01       	movw	r22, r14
    143e:	4d 2d       	mov	r20, r13
    1440:	65 df       	rcall	.-310    	; 0x130c <mulacc>
    1442:	7b 01       	movw	r14, r22
    1444:	8c 01       	movw	r16, r24
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	d8 2a       	or	r13, r24
    144a:	ca 94       	dec	r12
    144c:	59 f0       	breq	.+22     	; 0x1464 <conv_int+0xd0>
    144e:	ce 01       	movw	r24, r28
    1450:	e6 d1       	rcall	.+972    	; 0x181e <fgetc>
    1452:	ac 01       	movw	r20, r24
    1454:	97 ff       	sbrs	r25, 7
    1456:	dd cf       	rjmp	.-70     	; 0x1412 <conv_int+0x7e>
    1458:	d1 fc       	sbrc	r13, 1
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <conv_int+0xd0>
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <conv_int+0xf2>
    145e:	ee 24       	eor	r14, r14
    1460:	ff 24       	eor	r15, r15
    1462:	87 01       	movw	r16, r14
    1464:	d7 fe       	sbrs	r13, 7
    1466:	08 c0       	rjmp	.+16     	; 0x1478 <conv_int+0xe4>
    1468:	10 95       	com	r17
    146a:	00 95       	com	r16
    146c:	f0 94       	com	r15
    146e:	e0 94       	com	r14
    1470:	e1 1c       	adc	r14, r1
    1472:	f1 1c       	adc	r15, r1
    1474:	01 1d       	adc	r16, r1
    1476:	11 1d       	adc	r17, r1
    1478:	c5 01       	movw	r24, r10
    147a:	b8 01       	movw	r22, r16
    147c:	a7 01       	movw	r20, r14
    147e:	2d 2d       	mov	r18, r13
    1480:	39 df       	rcall	.-398    	; 0x12f4 <putval>
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <conv_int+0xf4>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	ea e0       	ldi	r30, 0x0A	; 10
    148e:	dd c2       	rjmp	.+1466   	; 0x1a4a <__epilogue_restores__+0x10>

00001490 <conv_brk>:
    1490:	a0 e2       	ldi	r26, 0x20	; 32
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ed e4       	ldi	r30, 0x4D	; 77
    1496:	fa e0       	ldi	r31, 0x0A	; 10
    1498:	b8 c2       	rjmp	.+1392   	; 0x1a0a <__prologue_saves__+0x8>
    149a:	6c 01       	movw	r12, r24
    149c:	a6 2e       	mov	r10, r22
    149e:	8a 01       	movw	r16, r20
    14a0:	79 01       	movw	r14, r18
    14a2:	fe 01       	movw	r30, r28
    14a4:	31 96       	adiw	r30, 0x01	; 1
    14a6:	80 e2       	ldi	r24, 0x20	; 32
    14a8:	df 01       	movw	r26, r30
    14aa:	1d 92       	st	X+, r1
    14ac:	8a 95       	dec	r24
    14ae:	e9 f7       	brne	.-6      	; 0x14aa <conv_brk+0x1a>
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	4f 01       	movw	r8, r30
    14bc:	a1 e0       	ldi	r26, 0x01	; 1
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	f6 01       	movw	r30, r12
    14c2:	83 81       	ldd	r24, Z+3	; 0x03
    14c4:	f7 01       	movw	r30, r14
    14c6:	83 fd       	sbrc	r24, 3
    14c8:	25 91       	lpm	r18, Z+
    14ca:	83 ff       	sbrs	r24, 3
    14cc:	21 91       	ld	r18, Z+
    14ce:	7f 01       	movw	r14, r30
    14d0:	22 23       	and	r18, r18
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <conv_brk+0x46>
    14d4:	7c c0       	rjmp	.+248    	; 0x15ce <conv_brk+0x13e>
    14d6:	2e 35       	cpi	r18, 0x5E	; 94
    14d8:	19 f4       	brne	.+6      	; 0x14e0 <conv_brk+0x50>
    14da:	41 15       	cp	r20, r1
    14dc:	51 05       	cpc	r21, r1
    14de:	69 f1       	breq	.+90     	; 0x153a <conv_brk+0xaa>
    14e0:	87 2f       	mov	r24, r23
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	84 17       	cp	r24, r20
    14e6:	95 07       	cpc	r25, r21
    14e8:	44 f4       	brge	.+16     	; 0x14fa <conv_brk+0x6a>
    14ea:	2d 35       	cpi	r18, 0x5D	; 93
    14ec:	51 f1       	breq	.+84     	; 0x1542 <conv_brk+0xb2>
    14ee:	2d 32       	cpi	r18, 0x2D	; 45
    14f0:	21 f4       	brne	.+8      	; 0x14fa <conv_brk+0x6a>
    14f2:	33 23       	and	r19, r19
    14f4:	29 f4       	brne	.+10     	; 0x1500 <conv_brk+0x70>
    14f6:	31 e0       	ldi	r19, 0x01	; 1
    14f8:	21 c0       	rjmp	.+66     	; 0x153c <conv_brk+0xac>
    14fa:	33 23       	and	r19, r19
    14fc:	09 f4       	brne	.+2      	; 0x1500 <conv_brk+0x70>
    14fe:	62 2f       	mov	r22, r18
    1500:	32 2f       	mov	r19, r18
    1502:	83 2f       	mov	r24, r19
    1504:	86 95       	lsr	r24
    1506:	86 95       	lsr	r24
    1508:	86 95       	lsr	r24
    150a:	f4 01       	movw	r30, r8
    150c:	e8 0f       	add	r30, r24
    150e:	f1 1d       	adc	r31, r1
    1510:	83 2f       	mov	r24, r19
    1512:	87 70       	andi	r24, 0x07	; 7
    1514:	3d 01       	movw	r6, r26
    1516:	02 c0       	rjmp	.+4      	; 0x151c <conv_brk+0x8c>
    1518:	66 0c       	add	r6, r6
    151a:	77 1c       	adc	r7, r7
    151c:	8a 95       	dec	r24
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <conv_brk+0x88>
    1520:	20 81       	ld	r18, Z
    1522:	26 29       	or	r18, r6
    1524:	20 83       	st	Z, r18
    1526:	36 17       	cp	r19, r22
    1528:	11 f4       	brne	.+4      	; 0x152e <conv_brk+0x9e>
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	07 c0       	rjmp	.+14     	; 0x153c <conv_brk+0xac>
    152e:	36 17       	cp	r19, r22
    1530:	10 f4       	brcc	.+4      	; 0x1536 <conv_brk+0xa6>
    1532:	3f 5f       	subi	r19, 0xFF	; 255
    1534:	e6 cf       	rjmp	.-52     	; 0x1502 <conv_brk+0x72>
    1536:	31 50       	subi	r19, 0x01	; 1
    1538:	e4 cf       	rjmp	.-56     	; 0x1502 <conv_brk+0x72>
    153a:	71 e0       	ldi	r23, 0x01	; 1
    153c:	4f 5f       	subi	r20, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	bf cf       	rjmp	.-130    	; 0x14c0 <conv_brk+0x30>
    1542:	33 23       	and	r19, r19
    1544:	19 f0       	breq	.+6      	; 0x154c <conv_brk+0xbc>
    1546:	8e 81       	ldd	r24, Y+6	; 0x06
    1548:	80 62       	ori	r24, 0x20	; 32
    154a:	8e 83       	std	Y+6, r24	; 0x06
    154c:	77 23       	and	r23, r23
    154e:	59 f0       	breq	.+22     	; 0x1566 <conv_brk+0xd6>
    1550:	fe 01       	movw	r30, r28
    1552:	31 96       	adiw	r30, 0x01	; 1
    1554:	9e 01       	movw	r18, r28
    1556:	2f 5d       	subi	r18, 0xDF	; 223
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	80 95       	com	r24
    155e:	81 93       	st	Z+, r24
    1560:	e2 17       	cp	r30, r18
    1562:	f3 07       	cpc	r31, r19
    1564:	d1 f7       	brne	.-12     	; 0x155a <conv_brk+0xca>
    1566:	bb 24       	eor	r11, r11
    1568:	b3 94       	inc	r11
    156a:	4e 01       	movw	r8, r28
    156c:	08 94       	sec
    156e:	81 1c       	adc	r8, r1
    1570:	91 1c       	adc	r9, r1
    1572:	c6 01       	movw	r24, r12
    1574:	54 d1       	rcall	.+680    	; 0x181e <fgetc>
    1576:	ac 01       	movw	r20, r24
    1578:	97 fd       	sbrc	r25, 7
    157a:	21 c0       	rjmp	.+66     	; 0x15be <conv_brk+0x12e>
    157c:	86 95       	lsr	r24
    157e:	86 95       	lsr	r24
    1580:	86 95       	lsr	r24
    1582:	f4 01       	movw	r30, r8
    1584:	e8 0f       	add	r30, r24
    1586:	f1 1d       	adc	r31, r1
    1588:	80 81       	ld	r24, Z
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9a 01       	movw	r18, r20
    158e:	27 70       	andi	r18, 0x07	; 7
    1590:	30 70       	andi	r19, 0x00	; 0
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <conv_brk+0x108>
    1594:	95 95       	asr	r25
    1596:	87 95       	ror	r24
    1598:	2a 95       	dec	r18
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <conv_brk+0x104>
    159c:	80 fd       	sbrc	r24, 0
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <conv_brk+0x118>
    15a0:	ca 01       	movw	r24, r20
    15a2:	b6 01       	movw	r22, r12
    15a4:	7e d1       	rcall	.+764    	; 0x18a2 <ungetc>
    15a6:	0b c0       	rjmp	.+22     	; 0x15be <conv_brk+0x12e>
    15a8:	01 15       	cp	r16, r1
    15aa:	11 05       	cpc	r17, r1
    15ac:	19 f0       	breq	.+6      	; 0x15b4 <conv_brk+0x124>
    15ae:	d8 01       	movw	r26, r16
    15b0:	4d 93       	st	X+, r20
    15b2:	8d 01       	movw	r16, r26
    15b4:	aa 94       	dec	r10
    15b6:	bb 24       	eor	r11, r11
    15b8:	aa 20       	and	r10, r10
    15ba:	d9 f6       	brne	.-74     	; 0x1572 <conv_brk+0xe2>
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <conv_brk+0x132>
    15be:	bb 20       	and	r11, r11
    15c0:	31 f4       	brne	.+12     	; 0x15ce <conv_brk+0x13e>
    15c2:	01 15       	cp	r16, r1
    15c4:	11 05       	cpc	r17, r1
    15c6:	29 f0       	breq	.+10     	; 0x15d2 <conv_brk+0x142>
    15c8:	f8 01       	movw	r30, r16
    15ca:	10 82       	st	Z, r1
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <conv_brk+0x142>
    15ce:	ee 24       	eor	r14, r14
    15d0:	ff 24       	eor	r15, r15
    15d2:	c7 01       	movw	r24, r14
    15d4:	a0 96       	adiw	r28, 0x20	; 32
    15d6:	ee e0       	ldi	r30, 0x0E	; 14
    15d8:	34 c2       	rjmp	.+1128   	; 0x1a42 <__epilogue_restores__+0x8>

000015da <vfscanf>:
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e2 ef       	ldi	r30, 0xF2	; 242
    15e0:	fa e0       	ldi	r31, 0x0A	; 10
    15e2:	13 c2       	rjmp	.+1062   	; 0x1a0a <__prologue_saves__+0x8>
    15e4:	5c 01       	movw	r10, r24
    15e6:	6b 01       	movw	r12, r22
    15e8:	3a 01       	movw	r6, r20
    15ea:	fc 01       	movw	r30, r24
    15ec:	17 82       	std	Z+7, r1	; 0x07
    15ee:	16 82       	std	Z+6, r1	; 0x06
    15f0:	88 24       	eor	r8, r8
    15f2:	dc c0       	rjmp	.+440    	; 0x17ac <vfscanf+0x1d2>
    15f4:	81 2f       	mov	r24, r17
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	f9 d1       	rcall	.+1010   	; 0x19ec <isspace>
    15fa:	89 2b       	or	r24, r25
    15fc:	19 f0       	breq	.+6      	; 0x1604 <vfscanf+0x2a>
    15fe:	c5 01       	movw	r24, r10
    1600:	b3 de       	rcall	.-666    	; 0x1368 <skip_spaces>
    1602:	d4 c0       	rjmp	.+424    	; 0x17ac <vfscanf+0x1d2>
    1604:	15 32       	cpi	r17, 0x25	; 37
    1606:	49 f4       	brne	.+18     	; 0x161a <vfscanf+0x40>
    1608:	f6 01       	movw	r30, r12
    160a:	f3 fc       	sbrc	r15, 3
    160c:	65 91       	lpm	r22, Z+
    160e:	f3 fe       	sbrs	r15, 3
    1610:	61 91       	ld	r22, Z+
    1612:	6f 01       	movw	r12, r30
    1614:	65 32       	cpi	r22, 0x25	; 37
    1616:	59 f4       	brne	.+22     	; 0x162e <vfscanf+0x54>
    1618:	15 e2       	ldi	r17, 0x25	; 37
    161a:	c5 01       	movw	r24, r10
    161c:	00 d1       	rcall	.+512    	; 0x181e <fgetc>
    161e:	97 fd       	sbrc	r25, 7
    1620:	d1 c0       	rjmp	.+418    	; 0x17c4 <vfscanf+0x1ea>
    1622:	18 17       	cp	r17, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <vfscanf+0x4e>
    1626:	c2 c0       	rjmp	.+388    	; 0x17ac <vfscanf+0x1d2>
    1628:	b5 01       	movw	r22, r10
    162a:	3b d1       	rcall	.+630    	; 0x18a2 <ungetc>
    162c:	d0 c0       	rjmp	.+416    	; 0x17ce <vfscanf+0x1f4>
    162e:	6a 32       	cpi	r22, 0x2A	; 42
    1630:	19 f0       	breq	.+6      	; 0x1638 <vfscanf+0x5e>
    1632:	16 2f       	mov	r17, r22
    1634:	00 e0       	ldi	r16, 0x00	; 0
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <vfscanf+0x6a>
    1638:	f3 fc       	sbrc	r15, 3
    163a:	15 91       	lpm	r17, Z+
    163c:	f3 fe       	sbrs	r15, 3
    163e:	11 91       	ld	r17, Z+
    1640:	6f 01       	movw	r12, r30
    1642:	01 e0       	ldi	r16, 0x01	; 1
    1644:	99 24       	eor	r9, r9
    1646:	0e c0       	rjmp	.+28     	; 0x1664 <vfscanf+0x8a>
    1648:	02 60       	ori	r16, 0x02	; 2
    164a:	69 2d       	mov	r22, r9
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	40 e2       	ldi	r20, 0x20	; 32
    1654:	5b de       	rcall	.-842    	; 0x130c <mulacc>
    1656:	96 2e       	mov	r9, r22
    1658:	f6 01       	movw	r30, r12
    165a:	f3 fc       	sbrc	r15, 3
    165c:	15 91       	lpm	r17, Z+
    165e:	f3 fe       	sbrs	r15, 3
    1660:	11 91       	ld	r17, Z+
    1662:	6f 01       	movw	r12, r30
    1664:	21 2f       	mov	r18, r17
    1666:	20 53       	subi	r18, 0x30	; 48
    1668:	2a 30       	cpi	r18, 0x0A	; 10
    166a:	70 f3       	brcs	.-36     	; 0x1648 <vfscanf+0x6e>
    166c:	01 fd       	sbrc	r16, 1
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfscanf+0x9c>
    1670:	99 24       	eor	r9, r9
    1672:	9a 94       	dec	r9
    1674:	03 c0       	rjmp	.+6      	; 0x167c <vfscanf+0xa2>
    1676:	99 20       	and	r9, r9
    1678:	09 f4       	brne	.+2      	; 0x167c <vfscanf+0xa2>
    167a:	a9 c0       	rjmp	.+338    	; 0x17ce <vfscanf+0x1f4>
    167c:	18 36       	cpi	r17, 0x68	; 104
    167e:	21 f0       	breq	.+8      	; 0x1688 <vfscanf+0xae>
    1680:	1c 36       	cpi	r17, 0x6C	; 108
    1682:	99 f4       	brne	.+38     	; 0x16aa <vfscanf+0xd0>
    1684:	f6 01       	movw	r30, r12
    1686:	0b c0       	rjmp	.+22     	; 0x169e <vfscanf+0xc4>
    1688:	f6 01       	movw	r30, r12
    168a:	f3 fc       	sbrc	r15, 3
    168c:	65 91       	lpm	r22, Z+
    168e:	f3 fe       	sbrs	r15, 3
    1690:	61 91       	ld	r22, Z+
    1692:	68 36       	cpi	r22, 0x68	; 104
    1694:	19 f0       	breq	.+6      	; 0x169c <vfscanf+0xc2>
    1696:	6f 01       	movw	r12, r30
    1698:	16 2f       	mov	r17, r22
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <vfscanf+0xd0>
    169c:	08 60       	ori	r16, 0x08	; 8
    169e:	04 60       	ori	r16, 0x04	; 4
    16a0:	f3 fc       	sbrc	r15, 3
    16a2:	15 91       	lpm	r17, Z+
    16a4:	f3 fe       	sbrs	r15, 3
    16a6:	11 91       	ld	r17, Z+
    16a8:	6f 01       	movw	r12, r30
    16aa:	11 23       	and	r17, r17
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <vfscanf+0xd6>
    16ae:	8f c0       	rjmp	.+286    	; 0x17ce <vfscanf+0x1f4>
    16b0:	81 e4       	ldi	r24, 0x41	; 65
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	61 2f       	mov	r22, r17
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	91 d0       	rcall	.+290    	; 0x17dc <strchr_P>
    16ba:	89 2b       	or	r24, r25
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <vfscanf+0xe6>
    16be:	87 c0       	rjmp	.+270    	; 0x17ce <vfscanf+0x1f4>
    16c0:	80 2f       	mov	r24, r16
    16c2:	00 ff       	sbrs	r16, 0
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <vfscanf+0xf2>
    16c6:	ee 24       	eor	r14, r14
    16c8:	ff 24       	eor	r15, r15
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <vfscanf+0x100>
    16cc:	f3 01       	movw	r30, r6
    16ce:	e0 80       	ld	r14, Z
    16d0:	f1 80       	ldd	r15, Z+1	; 0x01
    16d2:	22 e0       	ldi	r18, 0x02	; 2
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	62 0e       	add	r6, r18
    16d8:	73 1e       	adc	r7, r19
    16da:	1e 36       	cpi	r17, 0x6E	; 110
    16dc:	49 f4       	brne	.+18     	; 0x16f0 <vfscanf+0x116>
    16de:	f5 01       	movw	r30, r10
    16e0:	46 81       	ldd	r20, Z+6	; 0x06
    16e2:	57 81       	ldd	r21, Z+7	; 0x07
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	c7 01       	movw	r24, r14
    16ea:	20 2f       	mov	r18, r16
    16ec:	03 de       	rcall	.-1018   	; 0x12f4 <putval>
    16ee:	5e c0       	rjmp	.+188    	; 0x17ac <vfscanf+0x1d2>
    16f0:	13 36       	cpi	r17, 0x63	; 99
    16f2:	89 f4       	brne	.+34     	; 0x1716 <vfscanf+0x13c>
    16f4:	81 fd       	sbrc	r24, 1
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfscanf+0x122>
    16f8:	99 24       	eor	r9, r9
    16fa:	93 94       	inc	r9
    16fc:	c5 01       	movw	r24, r10
    16fe:	8f d0       	rcall	.+286    	; 0x181e <fgetc>
    1700:	97 fd       	sbrc	r25, 7
    1702:	60 c0       	rjmp	.+192    	; 0x17c4 <vfscanf+0x1ea>
    1704:	e1 14       	cp	r14, r1
    1706:	f1 04       	cpc	r15, r1
    1708:	19 f0       	breq	.+6      	; 0x1710 <vfscanf+0x136>
    170a:	f7 01       	movw	r30, r14
    170c:	81 93       	st	Z+, r24
    170e:	7f 01       	movw	r14, r30
    1710:	9a 94       	dec	r9
    1712:	a1 f7       	brne	.-24     	; 0x16fc <vfscanf+0x122>
    1714:	49 c0       	rjmp	.+146    	; 0x17a8 <vfscanf+0x1ce>
    1716:	1b 35       	cpi	r17, 0x5B	; 91
    1718:	51 f4       	brne	.+20     	; 0x172e <vfscanf+0x154>
    171a:	c5 01       	movw	r24, r10
    171c:	69 2d       	mov	r22, r9
    171e:	a7 01       	movw	r20, r14
    1720:	96 01       	movw	r18, r12
    1722:	b6 de       	rcall	.-660    	; 0x1490 <conv_brk>
    1724:	6c 01       	movw	r12, r24
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	09 f0       	breq	.+2      	; 0x172c <vfscanf+0x152>
    172a:	3e c0       	rjmp	.+124    	; 0x17a8 <vfscanf+0x1ce>
    172c:	38 c0       	rjmp	.+112    	; 0x179e <vfscanf+0x1c4>
    172e:	c5 01       	movw	r24, r10
    1730:	1b de       	rcall	.-970    	; 0x1368 <skip_spaces>
    1732:	97 fd       	sbrc	r25, 7
    1734:	47 c0       	rjmp	.+142    	; 0x17c4 <vfscanf+0x1ea>
    1736:	1f 36       	cpi	r17, 0x6F	; 111
    1738:	41 f1       	breq	.+80     	; 0x178a <vfscanf+0x1b0>
    173a:	10 37       	cpi	r17, 0x70	; 112
    173c:	28 f4       	brcc	.+10     	; 0x1748 <vfscanf+0x16e>
    173e:	14 36       	cpi	r17, 0x64	; 100
    1740:	11 f1       	breq	.+68     	; 0x1786 <vfscanf+0x1ac>
    1742:	19 36       	cpi	r17, 0x69	; 105
    1744:	21 f5       	brne	.+72     	; 0x178e <vfscanf+0x1b4>
    1746:	24 c0       	rjmp	.+72     	; 0x1790 <vfscanf+0x1b6>
    1748:	13 37       	cpi	r17, 0x73	; 115
    174a:	19 f0       	breq	.+6      	; 0x1752 <vfscanf+0x178>
    174c:	15 37       	cpi	r17, 0x75	; 117
    174e:	f9 f4       	brne	.+62     	; 0x178e <vfscanf+0x1b4>
    1750:	1a c0       	rjmp	.+52     	; 0x1786 <vfscanf+0x1ac>
    1752:	c5 01       	movw	r24, r10
    1754:	64 d0       	rcall	.+200    	; 0x181e <fgetc>
    1756:	ec 01       	movw	r28, r24
    1758:	97 fd       	sbrc	r25, 7
    175a:	0f c0       	rjmp	.+30     	; 0x177a <vfscanf+0x1a0>
    175c:	47 d1       	rcall	.+654    	; 0x19ec <isspace>
    175e:	89 2b       	or	r24, r25
    1760:	21 f0       	breq	.+8      	; 0x176a <vfscanf+0x190>
    1762:	ce 01       	movw	r24, r28
    1764:	b5 01       	movw	r22, r10
    1766:	9d d0       	rcall	.+314    	; 0x18a2 <ungetc>
    1768:	08 c0       	rjmp	.+16     	; 0x177a <vfscanf+0x1a0>
    176a:	e1 14       	cp	r14, r1
    176c:	f1 04       	cpc	r15, r1
    176e:	19 f0       	breq	.+6      	; 0x1776 <vfscanf+0x19c>
    1770:	f7 01       	movw	r30, r14
    1772:	c1 93       	st	Z+, r28
    1774:	7f 01       	movw	r14, r30
    1776:	9a 94       	dec	r9
    1778:	61 f7       	brne	.-40     	; 0x1752 <vfscanf+0x178>
    177a:	e1 14       	cp	r14, r1
    177c:	f1 04       	cpc	r15, r1
    177e:	a1 f0       	breq	.+40     	; 0x17a8 <vfscanf+0x1ce>
    1780:	f7 01       	movw	r30, r14
    1782:	10 82       	st	Z, r1
    1784:	11 c0       	rjmp	.+34     	; 0x17a8 <vfscanf+0x1ce>
    1786:	00 62       	ori	r16, 0x20	; 32
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <vfscanf+0x1b6>
    178a:	00 61       	ori	r16, 0x10	; 16
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <vfscanf+0x1b6>
    178e:	00 64       	ori	r16, 0x40	; 64
    1790:	c5 01       	movw	r24, r10
    1792:	69 2d       	mov	r22, r9
    1794:	a7 01       	movw	r20, r14
    1796:	20 2f       	mov	r18, r16
    1798:	fd dd       	rcall	.-1030   	; 0x1394 <conv_int>
    179a:	88 23       	and	r24, r24
    179c:	29 f4       	brne	.+10     	; 0x17a8 <vfscanf+0x1ce>
    179e:	f5 01       	movw	r30, r10
    17a0:	83 81       	ldd	r24, Z+3	; 0x03
    17a2:	80 73       	andi	r24, 0x30	; 48
    17a4:	79 f4       	brne	.+30     	; 0x17c4 <vfscanf+0x1ea>
    17a6:	13 c0       	rjmp	.+38     	; 0x17ce <vfscanf+0x1f4>
    17a8:	00 ff       	sbrs	r16, 0
    17aa:	83 94       	inc	r8
    17ac:	f5 01       	movw	r30, r10
    17ae:	f3 80       	ldd	r15, Z+3	; 0x03
    17b0:	f6 01       	movw	r30, r12
    17b2:	f3 fc       	sbrc	r15, 3
    17b4:	15 91       	lpm	r17, Z+
    17b6:	f3 fe       	sbrs	r15, 3
    17b8:	11 91       	ld	r17, Z+
    17ba:	6f 01       	movw	r12, r30
    17bc:	11 23       	and	r17, r17
    17be:	09 f0       	breq	.+2      	; 0x17c2 <vfscanf+0x1e8>
    17c0:	19 cf       	rjmp	.-462    	; 0x15f4 <vfscanf+0x1a>
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <vfscanf+0x1f4>
    17c4:	88 20       	and	r8, r8
    17c6:	19 f4       	brne	.+6      	; 0x17ce <vfscanf+0x1f4>
    17c8:	2f ef       	ldi	r18, 0xFF	; 255
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <vfscanf+0x1f8>
    17ce:	28 2d       	mov	r18, r8
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	c9 01       	movw	r24, r18
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	ee e0       	ldi	r30, 0x0E	; 14
    17da:	33 c1       	rjmp	.+614    	; 0x1a42 <__epilogue_restores__+0x8>

000017dc <strchr_P>:
    17dc:	fc 01       	movw	r30, r24
    17de:	05 90       	lpm	r0, Z+
    17e0:	06 16       	cp	r0, r22
    17e2:	21 f0       	breq	.+8      	; 0x17ec <strchr_P+0x10>
    17e4:	00 20       	and	r0, r0
    17e6:	d9 f7       	brne	.-10     	; 0x17de <strchr_P+0x2>
    17e8:	c0 01       	movw	r24, r0
    17ea:	08 95       	ret
    17ec:	31 97       	sbiw	r30, 0x01	; 1
    17ee:	cf 01       	movw	r24, r30
    17f0:	08 95       	ret

000017f2 <strnlen_P>:
    17f2:	fc 01       	movw	r30, r24
    17f4:	05 90       	lpm	r0, Z+
    17f6:	61 50       	subi	r22, 0x01	; 1
    17f8:	70 40       	sbci	r23, 0x00	; 0
    17fa:	01 10       	cpse	r0, r1
    17fc:	d8 f7       	brcc	.-10     	; 0x17f4 <strnlen_P+0x2>
    17fe:	80 95       	com	r24
    1800:	90 95       	com	r25
    1802:	8e 0f       	add	r24, r30
    1804:	9f 1f       	adc	r25, r31
    1806:	08 95       	ret

00001808 <strnlen>:
    1808:	fc 01       	movw	r30, r24
    180a:	61 50       	subi	r22, 0x01	; 1
    180c:	70 40       	sbci	r23, 0x00	; 0
    180e:	01 90       	ld	r0, Z+
    1810:	01 10       	cpse	r0, r1
    1812:	d8 f7       	brcc	.-10     	; 0x180a <strnlen+0x2>
    1814:	80 95       	com	r24
    1816:	90 95       	com	r25
    1818:	8e 0f       	add	r24, r30
    181a:	9f 1f       	adc	r25, r31
    181c:	08 95       	ret

0000181e <fgetc>:
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	ec 01       	movw	r28, r24
    1824:	4b 81       	ldd	r20, Y+3	; 0x03
    1826:	40 ff       	sbrs	r20, 0
    1828:	1a c0       	rjmp	.+52     	; 0x185e <fgetc+0x40>
    182a:	46 ff       	sbrs	r20, 6
    182c:	0a c0       	rjmp	.+20     	; 0x1842 <fgetc+0x24>
    182e:	4f 7b       	andi	r20, 0xBF	; 191
    1830:	4b 83       	std	Y+3, r20	; 0x03
    1832:	8e 81       	ldd	r24, Y+6	; 0x06
    1834:	9f 81       	ldd	r25, Y+7	; 0x07
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	9f 83       	std	Y+7, r25	; 0x07
    183a:	8e 83       	std	Y+6, r24	; 0x06
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	2b c0       	rjmp	.+86     	; 0x1898 <fgetc+0x7a>
    1842:	42 ff       	sbrs	r20, 2
    1844:	13 c0       	rjmp	.+38     	; 0x186c <fgetc+0x4e>
    1846:	e8 81       	ld	r30, Y
    1848:	f9 81       	ldd	r31, Y+1	; 0x01
    184a:	80 81       	ld	r24, Z
    184c:	28 2f       	mov	r18, r24
    184e:	33 27       	eor	r19, r19
    1850:	27 fd       	sbrc	r18, 7
    1852:	30 95       	com	r19
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	29 f4       	brne	.+10     	; 0x1864 <fgetc+0x46>
    185a:	40 62       	ori	r20, 0x20	; 32
    185c:	4b 83       	std	Y+3, r20	; 0x03
    185e:	2f ef       	ldi	r18, 0xFF	; 255
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	1b c0       	rjmp	.+54     	; 0x189a <fgetc+0x7c>
    1864:	31 96       	adiw	r30, 0x01	; 1
    1866:	f9 83       	std	Y+1, r31	; 0x01
    1868:	e8 83       	st	Y, r30
    186a:	11 c0       	rjmp	.+34     	; 0x188e <fgetc+0x70>
    186c:	ea 85       	ldd	r30, Y+10	; 0x0a
    186e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1870:	ce 01       	movw	r24, r28
    1872:	09 95       	icall
    1874:	9c 01       	movw	r18, r24
    1876:	97 ff       	sbrs	r25, 7
    1878:	0a c0       	rjmp	.+20     	; 0x188e <fgetc+0x70>
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	2f 5f       	subi	r18, 0xFF	; 255
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	11 f0       	breq	.+4      	; 0x1886 <fgetc+0x68>
    1882:	80 e2       	ldi	r24, 0x20	; 32
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <fgetc+0x6a>
    1886:	80 e1       	ldi	r24, 0x10	; 16
    1888:	89 2b       	or	r24, r25
    188a:	8b 83       	std	Y+3, r24	; 0x03
    188c:	e8 cf       	rjmp	.-48     	; 0x185e <fgetc+0x40>
    188e:	8e 81       	ldd	r24, Y+6	; 0x06
    1890:	9f 81       	ldd	r25, Y+7	; 0x07
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	9f 83       	std	Y+7, r25	; 0x07
    1896:	8e 83       	std	Y+6, r24	; 0x06
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	c9 01       	movw	r24, r18
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	08 95       	ret

000018a2 <ungetc>:
    18a2:	9c 01       	movw	r18, r24
    18a4:	fb 01       	movw	r30, r22
    18a6:	83 81       	ldd	r24, Z+3	; 0x03
    18a8:	80 ff       	sbrs	r24, 0
    18aa:	11 c0       	rjmp	.+34     	; 0x18ce <ungetc+0x2c>
    18ac:	86 fd       	sbrc	r24, 6
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <ungetc+0x2c>
    18b0:	9f ef       	ldi	r25, 0xFF	; 255
    18b2:	2f 3f       	cpi	r18, 0xFF	; 255
    18b4:	39 07       	cpc	r19, r25
    18b6:	59 f0       	breq	.+22     	; 0x18ce <ungetc+0x2c>
    18b8:	22 83       	std	Z+2, r18	; 0x02
    18ba:	80 64       	ori	r24, 0x40	; 64
    18bc:	8f 7d       	andi	r24, 0xDF	; 223
    18be:	83 83       	std	Z+3, r24	; 0x03
    18c0:	86 81       	ldd	r24, Z+6	; 0x06
    18c2:	97 81       	ldd	r25, Z+7	; 0x07
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	97 83       	std	Z+7, r25	; 0x07
    18c8:	86 83       	std	Z+6, r24	; 0x06
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <ungetc+0x30>
    18ce:	2f ef       	ldi	r18, 0xFF	; 255
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	c9 01       	movw	r24, r18
    18d4:	08 95       	ret

000018d6 <__ultoa_invert>:
    18d6:	fa 01       	movw	r30, r20
    18d8:	aa 27       	eor	r26, r26
    18da:	28 30       	cpi	r18, 0x08	; 8
    18dc:	51 f1       	breq	.+84     	; 0x1932 <__ultoa_invert+0x5c>
    18de:	20 31       	cpi	r18, 0x10	; 16
    18e0:	81 f1       	breq	.+96     	; 0x1942 <__ultoa_invert+0x6c>
    18e2:	e8 94       	clt
    18e4:	6f 93       	push	r22
    18e6:	6e 7f       	andi	r22, 0xFE	; 254
    18e8:	6e 5f       	subi	r22, 0xFE	; 254
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	af 4f       	sbci	r26, 0xFF	; 255
    18f2:	b1 e0       	ldi	r27, 0x01	; 1
    18f4:	3e d0       	rcall	.+124    	; 0x1972 <__ultoa_invert+0x9c>
    18f6:	b4 e0       	ldi	r27, 0x04	; 4
    18f8:	3c d0       	rcall	.+120    	; 0x1972 <__ultoa_invert+0x9c>
    18fa:	67 0f       	add	r22, r23
    18fc:	78 1f       	adc	r23, r24
    18fe:	89 1f       	adc	r24, r25
    1900:	9a 1f       	adc	r25, r26
    1902:	a1 1d       	adc	r26, r1
    1904:	68 0f       	add	r22, r24
    1906:	79 1f       	adc	r23, r25
    1908:	8a 1f       	adc	r24, r26
    190a:	91 1d       	adc	r25, r1
    190c:	a1 1d       	adc	r26, r1
    190e:	6a 0f       	add	r22, r26
    1910:	71 1d       	adc	r23, r1
    1912:	81 1d       	adc	r24, r1
    1914:	91 1d       	adc	r25, r1
    1916:	a1 1d       	adc	r26, r1
    1918:	20 d0       	rcall	.+64     	; 0x195a <__ultoa_invert+0x84>
    191a:	09 f4       	brne	.+2      	; 0x191e <__ultoa_invert+0x48>
    191c:	68 94       	set
    191e:	3f 91       	pop	r19
    1920:	2a e0       	ldi	r18, 0x0A	; 10
    1922:	26 9f       	mul	r18, r22
    1924:	11 24       	eor	r1, r1
    1926:	30 19       	sub	r19, r0
    1928:	30 5d       	subi	r19, 0xD0	; 208
    192a:	31 93       	st	Z+, r19
    192c:	de f6       	brtc	.-74     	; 0x18e4 <__ultoa_invert+0xe>
    192e:	cf 01       	movw	r24, r30
    1930:	08 95       	ret
    1932:	46 2f       	mov	r20, r22
    1934:	47 70       	andi	r20, 0x07	; 7
    1936:	40 5d       	subi	r20, 0xD0	; 208
    1938:	41 93       	st	Z+, r20
    193a:	b3 e0       	ldi	r27, 0x03	; 3
    193c:	0f d0       	rcall	.+30     	; 0x195c <__ultoa_invert+0x86>
    193e:	c9 f7       	brne	.-14     	; 0x1932 <__ultoa_invert+0x5c>
    1940:	f6 cf       	rjmp	.-20     	; 0x192e <__ultoa_invert+0x58>
    1942:	46 2f       	mov	r20, r22
    1944:	4f 70       	andi	r20, 0x0F	; 15
    1946:	40 5d       	subi	r20, 0xD0	; 208
    1948:	4a 33       	cpi	r20, 0x3A	; 58
    194a:	18 f0       	brcs	.+6      	; 0x1952 <__ultoa_invert+0x7c>
    194c:	49 5d       	subi	r20, 0xD9	; 217
    194e:	31 fd       	sbrc	r19, 1
    1950:	40 52       	subi	r20, 0x20	; 32
    1952:	41 93       	st	Z+, r20
    1954:	02 d0       	rcall	.+4      	; 0x195a <__ultoa_invert+0x84>
    1956:	a9 f7       	brne	.-22     	; 0x1942 <__ultoa_invert+0x6c>
    1958:	ea cf       	rjmp	.-44     	; 0x192e <__ultoa_invert+0x58>
    195a:	b4 e0       	ldi	r27, 0x04	; 4
    195c:	a6 95       	lsr	r26
    195e:	97 95       	ror	r25
    1960:	87 95       	ror	r24
    1962:	77 95       	ror	r23
    1964:	67 95       	ror	r22
    1966:	ba 95       	dec	r27
    1968:	c9 f7       	brne	.-14     	; 0x195c <__ultoa_invert+0x86>
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	61 05       	cpc	r22, r1
    196e:	71 05       	cpc	r23, r1
    1970:	08 95       	ret
    1972:	9b 01       	movw	r18, r22
    1974:	ac 01       	movw	r20, r24
    1976:	0a 2e       	mov	r0, r26
    1978:	06 94       	lsr	r0
    197a:	57 95       	ror	r21
    197c:	47 95       	ror	r20
    197e:	37 95       	ror	r19
    1980:	27 95       	ror	r18
    1982:	ba 95       	dec	r27
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__ultoa_invert+0xa2>
    1986:	62 0f       	add	r22, r18
    1988:	73 1f       	adc	r23, r19
    198a:	84 1f       	adc	r24, r20
    198c:	95 1f       	adc	r25, r21
    198e:	a0 1d       	adc	r26, r0
    1990:	08 95       	ret

00001992 <__divmodqi4>:
    1992:	87 fb       	bst	r24, 7
    1994:	08 2e       	mov	r0, r24
    1996:	06 26       	eor	r0, r22
    1998:	87 fd       	sbrc	r24, 7
    199a:	81 95       	neg	r24
    199c:	67 fd       	sbrc	r22, 7
    199e:	61 95       	neg	r22
    19a0:	19 d0       	rcall	.+50     	; 0x19d4 <__udivmodqi4>
    19a2:	0e f4       	brtc	.+2      	; 0x19a6 <__divmodqi4_1>
    19a4:	91 95       	neg	r25

000019a6 <__divmodqi4_1>:
    19a6:	07 fc       	sbrc	r0, 7
    19a8:	81 95       	neg	r24

000019aa <__divmodqi4_exit>:
    19aa:	08 95       	ret

000019ac <__udivmodhi4>:
    19ac:	aa 1b       	sub	r26, r26
    19ae:	bb 1b       	sub	r27, r27
    19b0:	51 e1       	ldi	r21, 0x11	; 17
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <__udivmodhi4_ep>

000019b4 <__udivmodhi4_loop>:
    19b4:	aa 1f       	adc	r26, r26
    19b6:	bb 1f       	adc	r27, r27
    19b8:	a6 17       	cp	r26, r22
    19ba:	b7 07       	cpc	r27, r23
    19bc:	10 f0       	brcs	.+4      	; 0x19c2 <__udivmodhi4_ep>
    19be:	a6 1b       	sub	r26, r22
    19c0:	b7 0b       	sbc	r27, r23

000019c2 <__udivmodhi4_ep>:
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	5a 95       	dec	r21
    19c8:	a9 f7       	brne	.-22     	; 0x19b4 <__udivmodhi4_loop>
    19ca:	80 95       	com	r24
    19cc:	90 95       	com	r25
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	08 95       	ret

000019d4 <__udivmodqi4>:
    19d4:	99 1b       	sub	r25, r25
    19d6:	79 e0       	ldi	r23, 0x09	; 9
    19d8:	04 c0       	rjmp	.+8      	; 0x19e2 <__udivmodqi4_ep>

000019da <__udivmodqi4_loop>:
    19da:	99 1f       	adc	r25, r25
    19dc:	96 17       	cp	r25, r22
    19de:	08 f0       	brcs	.+2      	; 0x19e2 <__udivmodqi4_ep>
    19e0:	96 1b       	sub	r25, r22

000019e2 <__udivmodqi4_ep>:
    19e2:	88 1f       	adc	r24, r24
    19e4:	7a 95       	dec	r23
    19e6:	c9 f7       	brne	.-14     	; 0x19da <__udivmodqi4_loop>
    19e8:	80 95       	com	r24
    19ea:	08 95       	ret

000019ec <isspace>:
    19ec:	91 11       	cpse	r25, r1
    19ee:	06 c0       	rjmp	.+12     	; 0x19fc <__ctype_isfalse>
    19f0:	80 32       	cpi	r24, 0x20	; 32
    19f2:	19 f0       	breq	.+6      	; 0x19fa <isspace+0xe>
    19f4:	89 50       	subi	r24, 0x09	; 9
    19f6:	85 50       	subi	r24, 0x05	; 5
    19f8:	d0 f7       	brcc	.-12     	; 0x19ee <isspace+0x2>
    19fa:	08 95       	ret

000019fc <__ctype_isfalse>:
    19fc:	99 27       	eor	r25, r25
    19fe:	88 27       	eor	r24, r24

00001a00 <__ctype_istrue>:
    1a00:	08 95       	ret

00001a02 <__prologue_saves__>:
    1a02:	2f 92       	push	r2
    1a04:	3f 92       	push	r3
    1a06:	4f 92       	push	r4
    1a08:	5f 92       	push	r5
    1a0a:	6f 92       	push	r6
    1a0c:	7f 92       	push	r7
    1a0e:	8f 92       	push	r8
    1a10:	9f 92       	push	r9
    1a12:	af 92       	push	r10
    1a14:	bf 92       	push	r11
    1a16:	cf 92       	push	r12
    1a18:	df 92       	push	r13
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	ca 1b       	sub	r28, r26
    1a2c:	db 0b       	sbc	r29, r27
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	09 94       	ijmp

00001a3a <__epilogue_restores__>:
    1a3a:	2a 88       	ldd	r2, Y+18	; 0x12
    1a3c:	39 88       	ldd	r3, Y+17	; 0x11
    1a3e:	48 88       	ldd	r4, Y+16	; 0x10
    1a40:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a42:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a44:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a46:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a48:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a4c:	b9 84       	ldd	r11, Y+9	; 0x09
    1a4e:	c8 84       	ldd	r12, Y+8	; 0x08
    1a50:	df 80       	ldd	r13, Y+7	; 0x07
    1a52:	ee 80       	ldd	r14, Y+6	; 0x06
    1a54:	fd 80       	ldd	r15, Y+5	; 0x05
    1a56:	0c 81       	ldd	r16, Y+4	; 0x04
    1a58:	1b 81       	ldd	r17, Y+3	; 0x03
    1a5a:	aa 81       	ldd	r26, Y+2	; 0x02
    1a5c:	b9 81       	ldd	r27, Y+1	; 0x01
    1a5e:	ce 0f       	add	r28, r30
    1a60:	d1 1d       	adc	r29, r1
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	ed 01       	movw	r28, r26
    1a6e:	08 95       	ret

00001a70 <_exit>:
    1a70:	f8 94       	cli

00001a72 <__stop_program>:
    1a72:	ff cf       	rjmp	.-2      	; 0x1a72 <__stop_program>
